{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"951ce94fc4389bc4ed03166091ee2c583f391b3b","modified":1554113117000},{"_id":"source/robots.txt","hash":"20d5d6c20ebabdde6e5f5339089a5fbf1017e9eb","modified":1556523620000},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"6e5d4c8966057b7771ce0395e04f39a6dcaf3bee","modified":1588924085894},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1554113117000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"e2e833504799fa42d9a3284e8a154d151e0b13b3","modified":1588929469410},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/README.md","hash":"aca0933caf2980bc243ea6817f2d784847e1863c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"636a5dcb7d61613612d8004ab1b34cddde47113a","modified":1586619905000},{"_id":"source/_data/friends.json","hash":"e1663e1c227f4abf89469e78c1c1139aea3c0230","modified":1562774803000},{"_id":"source/about/index.md","hash":"2821f6ff4e78e232f4db7d802239c7102de35e40","modified":1554113117000},{"_id":"source/categories/index.md","hash":"347f98e72b8e7a9dca87f7acf9376914c7de85a2","modified":1554113117000},{"_id":"source/friends/index.md","hash":"270e1b826f8ba04c7000a083cfaea956274abb4d","modified":1554113117000},{"_id":"source/tags/index.md","hash":"84a1168c46a84beaa9d21cfbe250fc02ff3cdcb6","modified":1554113117000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"45acf7552845e1e69928e55d5044782e905adbce","modified":1588925951773},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"59c50792c8f39e14d77db79fd20a2e33b2adf495","modified":1588925285250},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"a0de92ad49e2e660be040dde13fa1acb65beee9e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"22125624381b8d4dd50cb17ffe0631c838557364","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"e93d523297ca345c510f2487bf9b786a31f0f0c6","modified":1588925364745},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"d142778829d1d99e9b2a64991f303adf5cc75a55","modified":1588925833979},{"_id":"source/_posts/DSA/create_and_traveral_BiTree.md","hash":"63cef70fbd82102ccbcd4500ef5c49b72ba37d2c","modified":1563036059000},{"_id":"source/_posts/DSA/reverse_LinkedList.md","hash":"1af8c7885f97120e0bb94895d0b05dd8f5692d74","modified":1580565922000},{"_id":"source/_posts/Environment/beautify_terminal.md","hash":"4c14ac4d1a4b72e16cf2fc06f26d52142926a998","modified":1563091617000},{"_id":"source/_posts/Environment/ignoreDS_Store.md","hash":"40067aec16a00e3a8615f78103d7274c56a1a056","modified":1554113117000},{"_id":"source/_posts/Environment/pyenv_and_virtualenv.md","hash":"0cb96835d81e5381a143a21614c3d34e029c2718","modified":1563074754000},{"_id":"source/_posts/Environment/zsh_for_mac.md","hash":"6b5dda7bb8e68f601b4643efaa79fc220be40bde","modified":1571365633000},{"_id":"source/_posts/LeetCode/118_pascals_triangle.md","hash":"9fdec5eedb87803875ee507c40cea3365d81d559","modified":1554113117000},{"_id":"source/_posts/LeetCode/136_single_number.md","hash":"cf5d214cd9183e45fe2bfd835a63006e7936d15e","modified":1554118447000},{"_id":"source/_posts/LeetCode/182_duplicate_emails.md","hash":"5441b5b48f5a36e59f2e893b2c2fea2946b49637","modified":1554118684000},{"_id":"source/_posts/LeetCode/191_number_of_1_bits.md","hash":"60e9c29ead6b7ac56102bd95af8ec3fa0d9c4722","modified":1554114941000},{"_id":"source/_posts/LeetCode/1_two_sum.md","hash":"0da742a0398d959f3f5b1f1e0b2617945540323c","modified":1554113117000},{"_id":"source/_posts/LeetCode/201_bitwise_and_of_numbers_range.md","hash":"11bd58264028f51bf5a07d2ad4f1a16ca959a84a","modified":1554118988000},{"_id":"source/_posts/LeetCode/231_power_of_two.md","hash":"cb2679473f0fe5b51a5cc80510ebfb16cbb68d82","modified":1559809895000},{"_id":"source/_posts/LeetCode/268_missing_number.md","hash":"2189085d07a16ad91c0130b81d165e0688c4f53c","modified":1554113117000},{"_id":"source/_posts/LeetCode/344_reverse_string.md","hash":"29098726c16e0aa2c990a23bfc8400e39afb58d1","modified":1554118457000},{"_id":"source/_posts/LeetCode/461_hamming_distance.md","hash":"e954d4890c7232935dc0b278cb4180793ef450f9","modified":1554118816000},{"_id":"source/_posts/LeetCode/476_number_complement.md","hash":"61224948d7db8d2a6cccbc2dee6d1e88231ae726","modified":1554119011000},{"_id":"source/_posts/LeetCode/509_fibonacci_number.md","hash":"eb9a1917059397a111ea666850d5440f3dd40a13","modified":1554113117000},{"_id":"source/_posts/LeetCode/561_array_partition_i.md","hash":"9f6f1234684e7b23d98b92a29990c5148ca4d571","modified":1554113117000},{"_id":"source/_posts/LeetCode/595_big_countries.md","hash":"f0525efaa51300bf17e52fe77e7fddb07ae19a17","modified":1554118844000},{"_id":"source/_posts/LeetCode/620_not_boring_movies.md","hash":"09d67fbf788afbbbc32fda6282ee01ab1413c756","modified":1554118849000},{"_id":"source/_posts/LeetCode/657_robot_return_to_origin.md","hash":"e2f77ab6e1be0db5ca04c671d1088698ba8a6aeb","modified":1554118336000},{"_id":"source/_posts/LeetCode/627_swap_salary.md","hash":"7db8eef4b0e33af9b16a4700d080d6024cde8c9d","modified":1554118853000},{"_id":"source/_posts/LeetCode/709_to_lower_case.md","hash":"b2de22c7045777ab575ef421944e6d22da2c41c1","modified":1554118353000},{"_id":"source/_posts/LeetCode/771_jewels_and_stones.md","hash":"d2acfc76267f68340997bafb1da3ccf27c45fff1","modified":1554118471000},{"_id":"source/_posts/LeetCode/78_subsets.md","hash":"84e3c4ed86f2f7768ff0e883ca2e467412c4a6d6","modified":1554113117000},{"_id":"source/_posts/LeetCode/7_reverse_integer.md","hash":"e8dacf62207a691c3203d623302cb379dcda1d9b","modified":1554113117000},{"_id":"source/_posts/LeetCode/804_unique_morse_code_words.md","hash":"6d232e950ead13b20b450058ad8e5cc9b43d5cc9","modified":1554118363000},{"_id":"source/_posts/LeetCode/807_max_increase_to_keep_city_skyline.md","hash":"dc8b366a49c73f528e8705be1559ea3c6347a3f0","modified":1554119570000},{"_id":"source/_posts/LeetCode/832_flipping_an_image.md","hash":"328b873149d3b57bed34206f43ec9b6b61b5ff85","modified":1554113117000},{"_id":"source/_posts/LeetCode/852_peak_index_in_a_mountain_array.md","hash":"d4b8b1f86853474ac9a688490b1f24141d932290","modified":1554119593000},{"_id":"source/_posts/LeetCode/867_transpose_matrix.md","hash":"aa1a4f9a4f59f7c4040c5f32596e2b24bf4faa24","modified":1554113117000},{"_id":"source/_posts/LeetCode/905_sort_array_by_parity.md","hash":"0bce7defb8afbe22d7205433e82c59d6ec0dfdfc","modified":1554113117000},{"_id":"source/_posts/LeetCode/922_sort_array_by_parity_ii.md","hash":"1f0b91c290b912240647d0e915f5f6d8b617a66d","modified":1554119314000},{"_id":"source/_posts/LeetCode/929_unique_email_addresses.md","hash":"038e7eccdd6645fddee32c0c6c32e0da81951210","modified":1554118374000},{"_id":"source/_posts/LeetCode/942_di_string_match.md","hash":"a0308f66b8f656c38ec9e8138ee113ff384a9ebb","modified":1554118016000},{"_id":"source/_posts/LeetCode/944_delete_columns_to_make_sorted.md","hash":"87679fe549d6da40ef21dda5b839fc84943df855","modified":1554119106000},{"_id":"source/_posts/LeetCode/961_n-repeated_element_in_size_2n_array.md","hash":"81dfed066cef27433b05bbc23f103c386750c2f4","modified":1554118494000},{"_id":"source/_posts/Share/Numpy.md","hash":"fde8a87eafcf5104a0919ee4d35cd8f832e29fff","modified":1564934085000},{"_id":"source/_posts/Share/Synology_docker_accelerate.md","hash":"7e778ffef0e59b8408ff282c2111a52cb72e4d3b","modified":1585538925325},{"_id":"source/_posts/Share/git_tag.md","hash":"7753b8508bc9fadcb84c5c63f71b21679b85a4d7","modified":1563074010000},{"_id":"source/_posts/Share/huaweicloud_git.md","hash":"47e11f436821dd5d203076407b46cea69899cca5","modified":1563074341000},{"_id":"source/_posts/Share/modify_ubuntu_username.md","hash":"7b56524cc076df2eb9df2463d207ab2a0fba9793","modified":1574682914000},{"_id":"source/_posts/Share/qt_serial_communication.md","hash":"7ae294f3c2023c3fe2039f68f7d88c9b7344ac03","modified":1563074430000},{"_id":"source/_posts/Share/tinyMediaManager_timeout.md","hash":"458ca159b910bb8791e89b7e874ca5ef97621244","modified":1588929663040},{"_id":"source/_posts/Sword_refers_to_Offer/01_lookup_in_a_two-dimensional_array.md","hash":"68daa6377284f9d03f52975babcc3c8745f47552","modified":1563087903000},{"_id":"source/_posts/Sword_refers_to_Offer/02_replaceSpace.md","hash":"e9616f6a0c18b07a5812c1a391813d5bc4a9f9d6","modified":1580614982000},{"_id":"source/_posts/Sword_refers_to_Offer/03_print_LinkedList_from_tail_to_head.md","hash":"0982b14a1992de380333dd008239e8da644ac255","modified":1580565495000},{"_id":"source/_posts/Sword_refers_to_Offer/05_queue_with_two_stacks.md","hash":"1a343294e0aeda7906543c794b26ea150175347d","modified":1563074950000},{"_id":"source/_posts/Sword_refers_to_Offer/08_jumpFloor.md","hash":"867ece6153d18cdc2d4841dfbdb35d0b9269b666","modified":1563075035000},{"_id":"source/_posts/Sword_refers_to_Offer/07_fibonacci_series.md","hash":"d7824dcbf8a6f3061d3c9779d9f8c2bdd15a427b","modified":1563075009000},{"_id":"source/_posts/Sword_refers_to_Offer/09_jumpFloorII.md","hash":"5534adcea6b8e6d2b3ae46f702e0d09798d28868","modified":1563075064000},{"_id":"source/_posts/Sword_refers_to_Offer/10_rectCover.md","hash":"c1657c89f9c4267e46638f5c07cbc28b4523f2fe","modified":1563075089000},{"_id":"source/_posts/Sword_refers_to_Offer/11_number_of_1_bits.md","hash":"1adae83046f46b95b37edae45f2419d3e9eef36f","modified":1563075115000},{"_id":"source/_posts/Sword_refers_to_Offer/12_power.md","hash":"68c641bbf79bf406e200d57535e2c6a9c2be7c58","modified":1563075141000},{"_id":"source/_posts/Sword_refers_to_Offer/14_FindKthToTail.md","hash":"f45e9afcf967f77382e869ebf3990d343aca6de5","modified":1580565676000},{"_id":"source/_posts/Sword_refers_to_Offer/15_reverse_LinkedList.md","hash":"6b91eac513b995014133c1ab3276969fc2ffba4a","modified":1580565671000},{"_id":"source/_posts/Sword_refers_to_Offer/18_mirror.md","hash":"3615fa939d607746171f8c5bae7635542810ec6f","modified":1580565690000},{"_id":"source/_posts/Sword_refers_to_Offer/20_min.md","hash":"d3f91377ca19b8294b900a3ac8ca0e2683cca090","modified":1571317511000},{"_id":"source/_posts/Sword_refers_to_Offer/30_FindGreatestSumOfSubArray.md","hash":"a9eafffbbcfc6c6426fe6e7c1d1113d3f110b150","modified":1564221180000},{"_id":"source/_posts/Sword_refers_to_Offer/38_TreeDepth.md","hash":"552cd7c80777716592f65f8e7e32375a61ff2f83","modified":1580565731000},{"_id":"source/_posts/Sword_refers_to_Offer/39_IsBalanced.md","hash":"afd2274854750f7f2c716d392f7ca618642da1a3","modified":1564222484000},{"_id":"source/_posts/Sword_refers_to_Offer/43_LeftRotateString.md","hash":"bfc6499e1ca0bd49fcd2cf234f58a666fcc8abad","modified":1563075312000},{"_id":"source/_posts/Sword_refers_to_Offer/47_sum.md","hash":"d1a482e9e699cc77ae2cd2fa72fd1790bd6c358e","modified":1563075342000},{"_id":"source/_posts/Sword_refers_to_Offer/48_add.md","hash":"0d12f6a789dfec2d230bfa4c2730cced69513728","modified":1564219041000},{"_id":"source/_posts/Sword_refers_to_Offer/49_StrToInt.md","hash":"e64484763c9961c575ba798cd123464684a9106b","modified":1563075376000},{"_id":"source/_posts/Sword_refers_to_Offer/51_multiply.md","hash":"d0cd9430e934f348be72c3d8e4169b9c098f4e22","modified":1563075410000},{"_id":"source/_posts/Sword_refers_to_Offer/55_EntryNodeOfLoop.md","hash":"b4a740549c97c32c5ea813ce822bef2bf05165c2","modified":1580565945000},{"_id":"source/_posts/Sword_refers_to_Offer/Sword_refers_to_Offer.md","hash":"59e39353c222f1dcc6b6d4fb74714de1a18b6d29","modified":1580569922000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"3c2a8271027f867cfecc4d82095b30da16b22857","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"cecf43179878e3784e0b57e4a2abbbd234f2e2fd","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"8d263ebccccd0f9e69539f402955296de6f24a62","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"dc3f8d9faee91ede001407e7cac96590973bc87a","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"79c8e55cce3354f7e71143776d0f9c7bf566d5c0","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"a569499d9a561bd9ac2ea53264eb8a58c10a5f76","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"e204365eaf03d0365367fe0f56c000f40b7fd5ff","modified":1588925943930},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"d6ed29c7089c529fcebe36c4e217f1d24244d195","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"b39db4e38cf230a83e83dbbfae5560519f59abfa","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"c4c106c059f0eecfce92c1577f38e3abf1473dff","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"543d835c4c1c24fcac8f84ea094d8e82edeef526","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"046b2c855346a89acda77950bd813b8740435521","modified":1586619905000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9af007b47df7be7713a74ce670336b5b60d770d5","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"3516d97bd1df9e7f6d2d326b7a9a78d586541d98","modified":1588924142801},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"1d63ea78c31d7e84a3710e46c2edc70c73f1d5d5","modified":1588924126021},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1588924172469},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1588924172471},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1588924172471},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1588924172474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1588924172475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1588924172476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1588924172476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1588924172478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1588924172481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1588924172482},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1588924172455},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1588924172464},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1588924172466},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1588924172467},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1588924172467},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1588924172469},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1588924172470},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1588924172472},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1588924172473},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1588924172473},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1588924172474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1588924172477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1588924172477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1588924172480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1588924172482},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"af6d6cfd7d2f2d03dcc1d6a7c85f522f061e7936","modified":1588924185798},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"89e61f59d92d5a24659b08c11cd5b13508c1e1a6","modified":1588924197798},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1588924172459},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1588924172457},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1588924172461},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1588924172460},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"555100ac2faf9f43c17b6b103b34fe84aac911ce","modified":1588924172464},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"1b621d40a0b439e28259b2f948b98fab68b5e46f","modified":1588924172457},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1586619905000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1586619905000}],"Category":[{"name":"分享","_id":"cka5eurge0006metfy8xdk4dh"},{"name":"LeetCode","_id":"cka5eurgv000nmetfemew0c4l"},{"name":"剑指 offer","_id":"cka5euril003smetf7qskoayb"}],"Data":[{"_id":"friends","data":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}],"Page":[{"title":"about","date":"2019-02-24T12:14:27.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-02-24 20:14:27\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-04-01T10:05:17.000Z","path":"about/index.html","comments":1,"_id":"cka5eureh0000metf6uxrr0jr","content":"","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-02-24T02:51:35.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-24 10:51:35\ntype: \"categories\"\nlayout: \"categories\"\n\n---\n","updated":"2019-04-01T10:05:17.000Z","path":"categories/index.html","comments":1,"_id":"cka5eurej0001metf7rwtvi2g","content":"","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-03-01T02:30:07.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-03-01 10:30:07\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-04-01T10:05:17.000Z","path":"friends/index.html","comments":1,"_id":"cka5eurek0002metf9pcrane8","content":"","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-24T02:55:55.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-24 10:55:55\ntype: \"tags\"\nlayout: \"tags\"\n\n---\n","updated":"2019-04-01T10:05:17.000Z","path":"tags/index.html","comments":1,"_id":"cka5eurek0003metf9dh0j9f0","content":"","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"二叉树的创建和遍历","date":"2019-05-10T16:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-1.jpg","summary":"二叉树的创建和遍历","_content":"\n## 二叉树相关概念\n二叉树是一种常见的数据结构，二叉树的每个节点**最多有2个**孩子节点\n\n### 二叉树形式\n1. 满二叉树\n   > 一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树\n   > ![满二叉树](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg)\n\n2. 完全二叉树\n   > 对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树\n   > ![完全二叉树](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg)\n\n### 二叉树存储方式\n1. 链式存储\n   >  ![链式存储](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg)\n2. 数组存储\n   >  ![数组存储](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg)\n   在数组存储中，如果父节点下标为`parent`， 那么他的左孩子节点下标为`2 * parent + 1`，右孩子节点下标为`2 * parent + 2`。\n\n## 二叉树的遍历\n二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）\n以下树为例来讲述不同方式的遍历顺序\n```\n        实例二叉树\n    \t    3\n    \t   /  \\\n    \t  2    8\n    \t / \\    \\\n    \t9  10   11\n```\n\n### 深度优先遍历\n1. 前序遍历（先序遍历）\n   >二叉树前序遍历的输出顺序为：根节点、左节点、右节点\n\n    则上例二叉树的前序遍历顺序为：`3 -> 2 -> 9 -> 10 -> 8 -> 11`\n2. 中序遍历\n   >二叉树中序遍历的输出顺序为：左节点、根节点、右节点\n\n    则上例二叉树的中序遍历顺序为：`9 -> 2 -> 10 -> 3 -> 8 -> 11`\n3. 后序遍历\n   >二叉树后序遍历的输出顺序为：左节点、右节点、根节点\n\n    则上例二叉树的中序遍历顺序为：`9 -> 10 -> 2 -> 11 -> 8 -> 3`\n\n**中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树**\n\n### 广度优先遍历\n1. 层序遍历\n   > 按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点\n\n    则上例二叉树的层序遍历顺序为：`3 -> 2 -> 8 -> 9 -> 10 -> 11`\n\n## 代码实现\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nstruct TreeNode\n{\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr)\n    {}\n};\n\nclass BinaryTree\n{\npublic:\n    // 前序遍历创建二叉树\n    TreeNode* createBinaryTree_1(vector<int> &array, int len, int& index);\n    // 层序遍历创建二叉树\n    TreeNode* createBinaryTree_2(vector<int> &array, int len, int index);\n    // 前序遍历\n    void preOrderTraveral(TreeNode *node);\n    // 中序遍历\n    void inOrderTraveral(TreeNode *node);\n    // 后序遍历\n    void postOrderTraveral(TreeNode *node);\n    // 层序遍历\n    void levelOrderTraveral(TreeNode *node);\n    // 二叉树深度\n    int TreeDepth(TreeNode *pRoot);\n};\n\n//前序遍历顺序创建二叉树\nTreeNode* BinaryTree::createBinaryTree_1(vector<int> &array, int len, int& index)\n{\n    TreeNode *node = nullptr;\n    if(index < len && array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node->left = createBinaryTree_1(array, len, ++index);\n        node->right = createBinaryTree_1(array, len, ++index);\n    }\n    return node;\n}\n\n// 层序遍历创建二叉树\nTreeNode* BinaryTree::createBinaryTree_2(vector<int> &array, int len, int index)\n{\n    TreeNode *node = nullptr;\n    if(index < len && array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node->left = createBinaryTree_2(array, len, 2 * index + 1);\n        node->right = createBinaryTree_2(array, len, 2 * index + 2);\n    }\n    return node;\n}\n\n// 前序遍历\nvoid BinaryTree::preOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    cout << node->val << \" \";\n    preOrderTraveral(node->left);\n    preOrderTraveral(node->right);\n}\n\n// 中序遍历\nvoid BinaryTree::inOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    inOrderTraveral(node->left);\n    cout << node->val << \" \";\n    inOrderTraveral(node->right);\n}\n\n// 后序遍历\nvoid BinaryTree::postOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    postOrderTraveral(node->left);\n    postOrderTraveral(node->right);\n    cout << node->val << \" \";\n}\n\n// 层序遍历\n// 层序遍历需要借助队列来实现\nvoid BinaryTree::levelOrderTraveral(TreeNode *node)\n{\n    queue<TreeNode *> qTreeNode;\n    qTreeNode.push(node);\n    while(!qTreeNode.empty())\n    {\n        TreeNode *pNode = qTreeNode.front();\n        qTreeNode.pop();\n        cout << pNode->val << \" \";\n        if(pNode->left != nullptr)\n            qTreeNode.push(pNode->left);\n        if(pNode->right != nullptr)\n            qTreeNode.push(pNode->right);\n    }\n}\n\n// 二叉树深度\nint BinaryTree::TreeDepth(TreeNode *pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot->left), TreeDepth(pRoot->right)) + 1;\n    }\n\nint main()\n{\n    // -1 代表节点为空\n    // 按前序遍历顺序创建二叉树，并且遍历\n    vector<int> array_1 {3, 2, 9, -1, -1, 10, -1, -1, 8, -1, 11};\n    int len_1 = array_1.size();\n    BinaryTree biTree;\n    int index = 0;\n    TreeNode *root_1 = biTree.createBinaryTree_1(array_1, len_1, index);\n    cout << \"PreOrderTraveral: \";\n    biTree.preOrderTraveral(root_1);\n    cout << endl;\n    cout << \"InOrderTraveral: \";\n    biTree.inOrderTraveral(root_1);\n    cout << endl;\n    cout << \"PostOrderTraveral: \";\n    biTree.postOrderTraveral(root_1);\n    cout << endl;\n    cout << \"LevelOrderTraveral: \";\n    biTree.levelOrderTraveral(root_1);\n    cout << endl;\n    cout << \"Tree_1's depth is: \" << biTree.TreeDepth(root_1) << endl;\n\n    // 按层序遍历顺序创建二叉树，并且遍历\n    vector<int> array_2 {3, 2, 8, 9, 10, -1, 11};\n    int len_2 = array_2.size();\n    TreeNode *root_2 = biTree.createBinaryTree_2(array_2, len_2, 0);\n    cout << \"PreOrderTraveral: \";\n    biTree.preOrderTraveral(root_2);\n    cout << endl;\n    cout << \"InOrderTraveral: \";\n    biTree.inOrderTraveral(root_2);\n    cout << endl;\n    cout << \"PostOrderTraveral: \";\n    biTree.postOrderTraveral(root_2);\n    cout << endl;\n    cout << \"LevelOrderTraveral: \";\n    biTree.levelOrderTraveral(root_2);\n    cout << endl;\n    cout << \"Tree_2's depth is: \" << biTree.TreeDepth(root_2) << endl;\n}\n```\n\n**致谢：**本文部分文字和图片引自**程序员小灰**的新书**漫画算法**，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！\n![程序员小灰](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg)\n\n","source":"_posts/DSA/create_and_traveral_BiTree.md","raw":"---\ntitle: 二叉树的创建和遍历\ndate: 2019-05-11 00:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190511-1.jpg\nsummary: 二叉树的创建和遍历\ncategories: 分享\ntags:\n  - 数据结构\n  - 二叉树\n---\n\n## 二叉树相关概念\n二叉树是一种常见的数据结构，二叉树的每个节点**最多有2个**孩子节点\n\n### 二叉树形式\n1. 满二叉树\n   > 一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树\n   > ![满二叉树](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg)\n\n2. 完全二叉树\n   > 对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树\n   > ![完全二叉树](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg)\n\n### 二叉树存储方式\n1. 链式存储\n   >  ![链式存储](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg)\n2. 数组存储\n   >  ![数组存储](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg)\n   在数组存储中，如果父节点下标为`parent`， 那么他的左孩子节点下标为`2 * parent + 1`，右孩子节点下标为`2 * parent + 2`。\n\n## 二叉树的遍历\n二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）\n以下树为例来讲述不同方式的遍历顺序\n```\n        实例二叉树\n    \t    3\n    \t   /  \\\n    \t  2    8\n    \t / \\    \\\n    \t9  10   11\n```\n\n### 深度优先遍历\n1. 前序遍历（先序遍历）\n   >二叉树前序遍历的输出顺序为：根节点、左节点、右节点\n\n    则上例二叉树的前序遍历顺序为：`3 -> 2 -> 9 -> 10 -> 8 -> 11`\n2. 中序遍历\n   >二叉树中序遍历的输出顺序为：左节点、根节点、右节点\n\n    则上例二叉树的中序遍历顺序为：`9 -> 2 -> 10 -> 3 -> 8 -> 11`\n3. 后序遍历\n   >二叉树后序遍历的输出顺序为：左节点、右节点、根节点\n\n    则上例二叉树的中序遍历顺序为：`9 -> 10 -> 2 -> 11 -> 8 -> 3`\n\n**中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树**\n\n### 广度优先遍历\n1. 层序遍历\n   > 按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点\n\n    则上例二叉树的层序遍历顺序为：`3 -> 2 -> 8 -> 9 -> 10 -> 11`\n\n## 代码实现\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nstruct TreeNode\n{\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr)\n    {}\n};\n\nclass BinaryTree\n{\npublic:\n    // 前序遍历创建二叉树\n    TreeNode* createBinaryTree_1(vector<int> &array, int len, int& index);\n    // 层序遍历创建二叉树\n    TreeNode* createBinaryTree_2(vector<int> &array, int len, int index);\n    // 前序遍历\n    void preOrderTraveral(TreeNode *node);\n    // 中序遍历\n    void inOrderTraveral(TreeNode *node);\n    // 后序遍历\n    void postOrderTraveral(TreeNode *node);\n    // 层序遍历\n    void levelOrderTraveral(TreeNode *node);\n    // 二叉树深度\n    int TreeDepth(TreeNode *pRoot);\n};\n\n//前序遍历顺序创建二叉树\nTreeNode* BinaryTree::createBinaryTree_1(vector<int> &array, int len, int& index)\n{\n    TreeNode *node = nullptr;\n    if(index < len && array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node->left = createBinaryTree_1(array, len, ++index);\n        node->right = createBinaryTree_1(array, len, ++index);\n    }\n    return node;\n}\n\n// 层序遍历创建二叉树\nTreeNode* BinaryTree::createBinaryTree_2(vector<int> &array, int len, int index)\n{\n    TreeNode *node = nullptr;\n    if(index < len && array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node->left = createBinaryTree_2(array, len, 2 * index + 1);\n        node->right = createBinaryTree_2(array, len, 2 * index + 2);\n    }\n    return node;\n}\n\n// 前序遍历\nvoid BinaryTree::preOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    cout << node->val << \" \";\n    preOrderTraveral(node->left);\n    preOrderTraveral(node->right);\n}\n\n// 中序遍历\nvoid BinaryTree::inOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    inOrderTraveral(node->left);\n    cout << node->val << \" \";\n    inOrderTraveral(node->right);\n}\n\n// 后序遍历\nvoid BinaryTree::postOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    postOrderTraveral(node->left);\n    postOrderTraveral(node->right);\n    cout << node->val << \" \";\n}\n\n// 层序遍历\n// 层序遍历需要借助队列来实现\nvoid BinaryTree::levelOrderTraveral(TreeNode *node)\n{\n    queue<TreeNode *> qTreeNode;\n    qTreeNode.push(node);\n    while(!qTreeNode.empty())\n    {\n        TreeNode *pNode = qTreeNode.front();\n        qTreeNode.pop();\n        cout << pNode->val << \" \";\n        if(pNode->left != nullptr)\n            qTreeNode.push(pNode->left);\n        if(pNode->right != nullptr)\n            qTreeNode.push(pNode->right);\n    }\n}\n\n// 二叉树深度\nint BinaryTree::TreeDepth(TreeNode *pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot->left), TreeDepth(pRoot->right)) + 1;\n    }\n\nint main()\n{\n    // -1 代表节点为空\n    // 按前序遍历顺序创建二叉树，并且遍历\n    vector<int> array_1 {3, 2, 9, -1, -1, 10, -1, -1, 8, -1, 11};\n    int len_1 = array_1.size();\n    BinaryTree biTree;\n    int index = 0;\n    TreeNode *root_1 = biTree.createBinaryTree_1(array_1, len_1, index);\n    cout << \"PreOrderTraveral: \";\n    biTree.preOrderTraveral(root_1);\n    cout << endl;\n    cout << \"InOrderTraveral: \";\n    biTree.inOrderTraveral(root_1);\n    cout << endl;\n    cout << \"PostOrderTraveral: \";\n    biTree.postOrderTraveral(root_1);\n    cout << endl;\n    cout << \"LevelOrderTraveral: \";\n    biTree.levelOrderTraveral(root_1);\n    cout << endl;\n    cout << \"Tree_1's depth is: \" << biTree.TreeDepth(root_1) << endl;\n\n    // 按层序遍历顺序创建二叉树，并且遍历\n    vector<int> array_2 {3, 2, 8, 9, 10, -1, 11};\n    int len_2 = array_2.size();\n    TreeNode *root_2 = biTree.createBinaryTree_2(array_2, len_2, 0);\n    cout << \"PreOrderTraveral: \";\n    biTree.preOrderTraveral(root_2);\n    cout << endl;\n    cout << \"InOrderTraveral: \";\n    biTree.inOrderTraveral(root_2);\n    cout << endl;\n    cout << \"PostOrderTraveral: \";\n    biTree.postOrderTraveral(root_2);\n    cout << endl;\n    cout << \"LevelOrderTraveral: \";\n    biTree.levelOrderTraveral(root_2);\n    cout << endl;\n    cout << \"Tree_2's depth is: \" << biTree.TreeDepth(root_2) << endl;\n}\n```\n\n**致谢：**本文部分文字和图片引自**程序员小灰**的新书**漫画算法**，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！\n![程序员小灰](https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg)\n\n","slug":"DSA/create_and_traveral_BiTree","published":1,"updated":"2019-07-13T16:40:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurg40004metfs2y3dytf","content":"<h2 id=\"二叉树相关概念\"><a href=\"#二叉树相关概念\" class=\"headerlink\" title=\"二叉树相关概念\"></a>二叉树相关概念</h2><p>二叉树是一种常见的数据结构，二叉树的每个节点<strong>最多有2个</strong>孩子节点</p>\n<h3 id=\"二叉树形式\"><a href=\"#二叉树形式\" class=\"headerlink\" title=\"二叉树形式\"></a>二叉树形式</h3><ol>\n<li><p>满二叉树</p>\n<blockquote>\n<p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg\" alt=\"满二叉树\"></p>\n</blockquote>\n</li>\n<li><p>完全二叉树</p>\n<blockquote>\n<p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg\" alt=\"完全二叉树\"></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"二叉树存储方式\"><a href=\"#二叉树存储方式\" class=\"headerlink\" title=\"二叉树存储方式\"></a>二叉树存储方式</h3><ol>\n<li>链式存储<blockquote>\n<p> <img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg\" alt=\"链式存储\"></p>\n</blockquote>\n</li>\n<li>数组存储<blockquote>\n<p> <img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg\" alt=\"数组存储\"><br>在数组存储中，如果父节点下标为<code>parent</code>， 那么他的左孩子节点下标为<code>2 * parent + 1</code>，右孩子节点下标为<code>2 * parent + 2</code>。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）<br>以下树为例来讲述不同方式的遍历顺序</p>\n<pre><code>        实例二叉树\n            3\n           /  \\\n          2    8\n         / \\    \\\n        9  10   11</code></pre><h3 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h3><ol>\n<li><p>前序遍历（先序遍历）</p>\n<blockquote>\n<p>二叉树前序遍历的输出顺序为：根节点、左节点、右节点</p>\n</blockquote>\n<p> 则上例二叉树的前序遍历顺序为：<code>3 -&gt; 2 -&gt; 9 -&gt; 10 -&gt; 8 -&gt; 11</code></p>\n</li>\n<li><p>中序遍历</p>\n<blockquote>\n<p>二叉树中序遍历的输出顺序为：左节点、根节点、右节点</p>\n</blockquote>\n<p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 2 -&gt; 10 -&gt; 3 -&gt; 8 -&gt; 11</code></p>\n</li>\n<li><p>后序遍历</p>\n<blockquote>\n<p>二叉树后序遍历的输出顺序为：左节点、右节点、根节点</p>\n</blockquote>\n<p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 10 -&gt; 2 -&gt; 11 -&gt; 8 -&gt; 3</code></p>\n</li>\n</ol>\n<p><strong>中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树</strong></p>\n<h3 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h3><ol>\n<li><p>层序遍历</p>\n<blockquote>\n<p>按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点</p>\n</blockquote>\n<p> 则上例二叉树的层序遍历顺序为：<code>3 -&gt; 2 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11</code></p>\n</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> TreeNode\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 前序遍历创建二叉树</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">createBinaryTree_1</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 层序遍历创建二叉树</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">createBinaryTree_2</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 前序遍历</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 中序遍历</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 后序遍历</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 层序遍历</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 二叉树深度</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>pRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//前序遍历顺序创建二叉树</span>\nTreeNode<span class=\"token operator\">*</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">createBinaryTree_1</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    TreeNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">=</span> <span class=\"token function\">createBinaryTree_1</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">=</span> <span class=\"token function\">createBinaryTree_1</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 层序遍历创建二叉树</span>\nTreeNode<span class=\"token operator\">*</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">createBinaryTree_2</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    TreeNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">=</span> <span class=\"token function\">createBinaryTree_2</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">=</span> <span class=\"token function\">createBinaryTree_2</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 前序遍历</span>\n<span class=\"token keyword\">void</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 中序遍历</span>\n<span class=\"token keyword\">void</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 后序遍历</span>\n<span class=\"token keyword\">void</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 层序遍历</span>\n<span class=\"token comment\" spellcheck=\"true\">// 层序遍历需要借助队列来实现</span>\n<span class=\"token keyword\">void</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">levelOrderTraveral</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    queue<span class=\"token operator\">&lt;</span>TreeNode <span class=\"token operator\">*</span><span class=\"token operator\">></span> qTreeNode<span class=\"token punctuation\">;</span>\n    qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        TreeNode <span class=\"token operator\">*</span>pNode <span class=\"token operator\">=</span> qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            qTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 二叉树深度</span>\n<span class=\"token keyword\">int</span> BinaryTree<span class=\"token operator\">::</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>pRoot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pRoot<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// -1 代表节点为空</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 按前序遍历顺序创建二叉树，并且遍历</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> array_1 <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len_1 <span class=\"token operator\">=</span> array_1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BinaryTree biTree<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    TreeNode <span class=\"token operator\">*</span>root_1 <span class=\"token operator\">=</span> biTree<span class=\"token punctuation\">.</span><span class=\"token function\">createBinaryTree_1</span><span class=\"token punctuation\">(</span>array_1<span class=\"token punctuation\">,</span> len_1<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PreOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>root_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"InOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>root_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PostOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>root_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"LevelOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">levelOrderTraveral</span><span class=\"token punctuation\">(</span>root_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Tree_1's depth is: \"</span> <span class=\"token operator\">&lt;&lt;</span> biTree<span class=\"token punctuation\">.</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>root_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 按层序遍历顺序创建二叉树，并且遍历</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> array_2 <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len_2 <span class=\"token operator\">=</span> array_2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    TreeNode <span class=\"token operator\">*</span>root_2 <span class=\"token operator\">=</span> biTree<span class=\"token punctuation\">.</span><span class=\"token function\">createBinaryTree_2</span><span class=\"token punctuation\">(</span>array_2<span class=\"token punctuation\">,</span> len_2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PreOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderTraveral</span><span class=\"token punctuation\">(</span>root_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"InOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">inOrderTraveral</span><span class=\"token punctuation\">(</span>root_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PostOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderTraveral</span><span class=\"token punctuation\">(</span>root_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"LevelOrderTraveral: \"</span><span class=\"token punctuation\">;</span>\n    biTree<span class=\"token punctuation\">.</span><span class=\"token function\">levelOrderTraveral</span><span class=\"token punctuation\">(</span>root_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Tree_2's depth is: \"</span> <span class=\"token operator\">&lt;&lt;</span> biTree<span class=\"token punctuation\">.</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>root_2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>致谢：</strong>本文部分文字和图片引自<strong>程序员小灰</strong>的新书<strong>漫画算法</strong>，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg\" alt=\"程序员小灰\"></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"二叉树相关概念\"><a href=\"#二叉树相关概念\" class=\"headerlink\" title=\"二叉树相关概念\"></a>二叉树相关概念</h2><p>二叉树是一种常见的数据结构，二叉树的每个节点<strong>最多有2个</strong>孩子节点</p>\n<h3 id=\"二叉树形式\"><a href=\"#二叉树形式\" class=\"headerlink\" title=\"二叉树形式\"></a>二叉树形式</h3><ol>\n<li><p>满二叉树</p>\n<blockquote>\n<p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg\" alt=\"满二叉树\"></p>\n</blockquote>\n</li>\n<li><p>完全二叉树</p>\n<blockquote>\n<p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg\" alt=\"完全二叉树\"></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"二叉树存储方式\"><a href=\"#二叉树存储方式\" class=\"headerlink\" title=\"二叉树存储方式\"></a>二叉树存储方式</h3><ol>\n<li>链式存储<blockquote>\n<p> <img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg\" alt=\"链式存储\"></p>\n</blockquote>\n</li>\n<li>数组存储<blockquote>\n<p> <img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg\" alt=\"数组存储\"><br>在数组存储中，如果父节点下标为<code>parent</code>， 那么他的左孩子节点下标为<code>2 * parent + 1</code>，右孩子节点下标为<code>2 * parent + 2</code>。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）<br>以下树为例来讲述不同方式的遍历顺序</p>\n<pre><code>        实例二叉树\n            3\n           /  \\\n          2    8\n         / \\    \\\n        9  10   11</code></pre><h3 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h3><ol>\n<li><p>前序遍历（先序遍历）</p>\n<blockquote>\n<p>二叉树前序遍历的输出顺序为：根节点、左节点、右节点</p>\n</blockquote>\n<p> 则上例二叉树的前序遍历顺序为：<code>3 -&gt; 2 -&gt; 9 -&gt; 10 -&gt; 8 -&gt; 11</code></p>\n</li>\n<li><p>中序遍历</p>\n<blockquote>\n<p>二叉树中序遍历的输出顺序为：左节点、根节点、右节点</p>\n</blockquote>\n<p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 2 -&gt; 10 -&gt; 3 -&gt; 8 -&gt; 11</code></p>\n</li>\n<li><p>后序遍历</p>\n<blockquote>\n<p>二叉树后序遍历的输出顺序为：左节点、右节点、根节点</p>\n</blockquote>\n<p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 10 -&gt; 2 -&gt; 11 -&gt; 8 -&gt; 3</code></p>\n</li>\n</ol>\n<p><strong>中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树</strong></p>\n<h3 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h3><ol>\n<li><p>层序遍历</p>\n<blockquote>\n<p>按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点</p>\n</blockquote>\n<p> 则上例二叉树的层序遍历顺序为：<code>3 -&gt; 2 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11</code></p>\n</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nstruct TreeNode\n{\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr)\n    {}\n};\n\nclass BinaryTree\n{\npublic:\n    // 前序遍历创建二叉树\n    TreeNode* createBinaryTree_1(vector&lt;int&gt; &amp;array, int len, int&amp; index);\n    // 层序遍历创建二叉树\n    TreeNode* createBinaryTree_2(vector&lt;int&gt; &amp;array, int len, int index);\n    // 前序遍历\n    void preOrderTraveral(TreeNode *node);\n    // 中序遍历\n    void inOrderTraveral(TreeNode *node);\n    // 后序遍历\n    void postOrderTraveral(TreeNode *node);\n    // 层序遍历\n    void levelOrderTraveral(TreeNode *node);\n    // 二叉树深度\n    int TreeDepth(TreeNode *pRoot);\n};\n\n//前序遍历顺序创建二叉树\nTreeNode* BinaryTree::createBinaryTree_1(vector&lt;int&gt; &amp;array, int len, int&amp; index)\n{\n    TreeNode *node = nullptr;\n    if(index &lt; len &amp;&amp; array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node-&gt;left = createBinaryTree_1(array, len, ++index);\n        node-&gt;right = createBinaryTree_1(array, len, ++index);\n    }\n    return node;\n}\n\n// 层序遍历创建二叉树\nTreeNode* BinaryTree::createBinaryTree_2(vector&lt;int&gt; &amp;array, int len, int index)\n{\n    TreeNode *node = nullptr;\n    if(index &lt; len &amp;&amp; array[index] != -1)\n    {\n        node = new TreeNode(array[index]);\n        node-&gt;left = createBinaryTree_2(array, len, 2 * index + 1);\n        node-&gt;right = createBinaryTree_2(array, len, 2 * index + 2);\n    }\n    return node;\n}\n\n// 前序遍历\nvoid BinaryTree::preOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    cout &lt;&lt; node-&gt;val &lt;&lt; &quot; &quot;;\n    preOrderTraveral(node-&gt;left);\n    preOrderTraveral(node-&gt;right);\n}\n\n// 中序遍历\nvoid BinaryTree::inOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    inOrderTraveral(node-&gt;left);\n    cout &lt;&lt; node-&gt;val &lt;&lt; &quot; &quot;;\n    inOrderTraveral(node-&gt;right);\n}\n\n// 后序遍历\nvoid BinaryTree::postOrderTraveral(TreeNode *node)\n{\n    if(node == nullptr)\n        return;\n    postOrderTraveral(node-&gt;left);\n    postOrderTraveral(node-&gt;right);\n    cout &lt;&lt; node-&gt;val &lt;&lt; &quot; &quot;;\n}\n\n// 层序遍历\n// 层序遍历需要借助队列来实现\nvoid BinaryTree::levelOrderTraveral(TreeNode *node)\n{\n    queue&lt;TreeNode *&gt; qTreeNode;\n    qTreeNode.push(node);\n    while(!qTreeNode.empty())\n    {\n        TreeNode *pNode = qTreeNode.front();\n        qTreeNode.pop();\n        cout &lt;&lt; pNode-&gt;val &lt;&lt; &quot; &quot;;\n        if(pNode-&gt;left != nullptr)\n            qTreeNode.push(pNode-&gt;left);\n        if(pNode-&gt;right != nullptr)\n            qTreeNode.push(pNode-&gt;right);\n    }\n}\n\n// 二叉树深度\nint BinaryTree::TreeDepth(TreeNode *pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot-&gt;left), TreeDepth(pRoot-&gt;right)) + 1;\n    }\n\nint main()\n{\n    // -1 代表节点为空\n    // 按前序遍历顺序创建二叉树，并且遍历\n    vector&lt;int&gt; array_1 {3, 2, 9, -1, -1, 10, -1, -1, 8, -1, 11};\n    int len_1 = array_1.size();\n    BinaryTree biTree;\n    int index = 0;\n    TreeNode *root_1 = biTree.createBinaryTree_1(array_1, len_1, index);\n    cout &lt;&lt; &quot;PreOrderTraveral: &quot;;\n    biTree.preOrderTraveral(root_1);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;InOrderTraveral: &quot;;\n    biTree.inOrderTraveral(root_1);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;PostOrderTraveral: &quot;;\n    biTree.postOrderTraveral(root_1);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;LevelOrderTraveral: &quot;;\n    biTree.levelOrderTraveral(root_1);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;Tree_1&#39;s depth is: &quot; &lt;&lt; biTree.TreeDepth(root_1) &lt;&lt; endl;\n\n    // 按层序遍历顺序创建二叉树，并且遍历\n    vector&lt;int&gt; array_2 {3, 2, 8, 9, 10, -1, 11};\n    int len_2 = array_2.size();\n    TreeNode *root_2 = biTree.createBinaryTree_2(array_2, len_2, 0);\n    cout &lt;&lt; &quot;PreOrderTraveral: &quot;;\n    biTree.preOrderTraveral(root_2);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;InOrderTraveral: &quot;;\n    biTree.inOrderTraveral(root_2);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;PostOrderTraveral: &quot;;\n    biTree.postOrderTraveral(root_2);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;LevelOrderTraveral: &quot;;\n    biTree.levelOrderTraveral(root_2);\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;Tree_2&#39;s depth is: &quot; &lt;&lt; biTree.TreeDepth(root_2) &lt;&lt; endl;\n}</code></pre>\n<p><strong>致谢：</strong>本文部分文字和图片引自<strong>程序员小灰</strong>的新书<strong>漫画算法</strong>，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg\" alt=\"程序员小灰\"></p>\n"},{"title":"macOS终端、vim美化(Solarized主题)","date":"2019-07-14T05:44:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg","summary":"利用Solarized主题对mac终端进行优化","_content":"\n## 优化原因\nmacOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg)\n所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg)\n\n## 优化方法\n这里优化用到的是Solarized主题[GitHub](https://github.com/altercation/solarized)。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg)\n\n### 主题安装\n1. 主题可以通过两种方式获取\n+ 从[GitHub](https://github.com/altercation/solarized)仓库中的`release`中下载作者发布的压缩包\n+ 通过终端克隆仓库的方式进行获取\n    ```bash\n    # 在终端输入\n    git clone git://github.com/altercation/solarized.git\n    ```\n2. 下载好主题后，从下载的文件中找到`osx-terminal.app-colors-solarized`文件夹，文件内容如图所示：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg)\n文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。*在安装中可能会遇到安全提示，在`系统偏好设置\\安全性与隐私`中允许即可。*\n3. 打开终端，进入`偏好设置`便可以在`描述文件`中看到新安装的主题了，将新安装的主题设置为**默认**。并在`通用`设置为启动时打开刚才设置为默认的描述文件。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg)\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg)\n现在主题就安装好了。\n\n### vim配置\n1. 将Solarized主题的vim文件拷贝到系统的vim目录\n    ```bash\n    cd solarized\n    cd vim-colors-solarized/colors\n    mkdir -p ~/.vim/colors\n    cp solarized.vim ~/.vim/colors/\n    ```\n2. 修改vim设置:`vim ~/.vimrc`，在该文件中添加一下内容\n    ```bash\n    syntax on\n    set background=dark # 背景为dark，也可选light\n    colorscheme solarized\n    ```\n修改后如图所示：（版本不同，效果可能有所不同）\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg)\n\n### 高亮\n安装Solarized主题后，终端中执行`ls`等命令时，文件都是同一个颜色，没有高亮，可以在`.bash_profile`中添加一下设置\n```bash\n# vim ~/.bash_profile\nexport GREP_OPTIONS='--color=auto'\nexport TERM=\"xterm-color\"\nPS1='\\[\\e[0;33m\\]\\u\\[\\e[0m\\]@\\[\\e[0;32m\\]\\h\\[\\e[0m\\]:\\[\\e[0;34m\\]\\w\\[\\e[0m\\]\\$ '\n```\n设置后如图所示：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg)\n\n\n","source":"_posts/Environment/beautify_terminal.md","raw":"---\ntitle: macOS终端、vim美化(Solarized主题)\ndate: 2019-07-14 13:44:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg\nsummary: 利用Solarized主题对mac终端进行优化\ncategories: 分享\ntags:\n  - macOS\n  - 终端美化\n---\n\n## 优化原因\nmacOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg)\n所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg)\n\n## 优化方法\n这里优化用到的是Solarized主题[GitHub](https://github.com/altercation/solarized)。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg)\n\n### 主题安装\n1. 主题可以通过两种方式获取\n+ 从[GitHub](https://github.com/altercation/solarized)仓库中的`release`中下载作者发布的压缩包\n+ 通过终端克隆仓库的方式进行获取\n    ```bash\n    # 在终端输入\n    git clone git://github.com/altercation/solarized.git\n    ```\n2. 下载好主题后，从下载的文件中找到`osx-terminal.app-colors-solarized`文件夹，文件内容如图所示：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg)\n文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。*在安装中可能会遇到安全提示，在`系统偏好设置\\安全性与隐私`中允许即可。*\n3. 打开终端，进入`偏好设置`便可以在`描述文件`中看到新安装的主题了，将新安装的主题设置为**默认**。并在`通用`设置为启动时打开刚才设置为默认的描述文件。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg)\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg)\n现在主题就安装好了。\n\n### vim配置\n1. 将Solarized主题的vim文件拷贝到系统的vim目录\n    ```bash\n    cd solarized\n    cd vim-colors-solarized/colors\n    mkdir -p ~/.vim/colors\n    cp solarized.vim ~/.vim/colors/\n    ```\n2. 修改vim设置:`vim ~/.vimrc`，在该文件中添加一下内容\n    ```bash\n    syntax on\n    set background=dark # 背景为dark，也可选light\n    colorscheme solarized\n    ```\n修改后如图所示：（版本不同，效果可能有所不同）\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg)\n\n### 高亮\n安装Solarized主题后，终端中执行`ls`等命令时，文件都是同一个颜色，没有高亮，可以在`.bash_profile`中添加一下设置\n```bash\n# vim ~/.bash_profile\nexport GREP_OPTIONS='--color=auto'\nexport TERM=\"xterm-color\"\nPS1='\\[\\e[0;33m\\]\\u\\[\\e[0m\\]@\\[\\e[0;32m\\]\\h\\[\\e[0m\\]:\\[\\e[0;34m\\]\\w\\[\\e[0m\\]\\$ '\n```\n设置后如图所示：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg)\n\n\n","slug":"Environment/beautify_terminal","published":1,"updated":"2019-07-14T08:06:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgc0005metfglq39p35","content":"<h2 id=\"优化原因\"><a href=\"#优化原因\" class=\"headerlink\" title=\"优化原因\"></a>优化原因</h2><p>macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg\" alt><br>所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg\" alt></p>\n<h2 id=\"优化方法\"><a href=\"#优化方法\" class=\"headerlink\" title=\"优化方法\"></a>优化方法</h2><p>这里优化用到的是Solarized主题<a href=\"https://github.com/altercation/solarized\" target=\"_blank\" rel=\"noopener\">GitHub</a>。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg\" alt></p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><ol>\n<li>主题可以通过两种方式获取</li>\n</ol>\n<ul>\n<li>从<a href=\"https://github.com/altercation/solarized\" target=\"_blank\" rel=\"noopener\">GitHub</a>仓库中的<code>release</code>中下载作者发布的压缩包</li>\n<li>通过终端克隆仓库的方式进行获取<pre class=\" language-bash\"><code class=\"language-bash\">  <span class=\"token comment\" spellcheck=\"true\"># 在终端输入</span>\n  <span class=\"token function\">git</span> clone git://github.com/altercation/solarized.git</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>下载好主题后，从下载的文件中找到<code>osx-terminal.app-colors-solarized</code>文件夹，文件内容如图所示：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg\" alt><br>文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。<em>在安装中可能会遇到安全提示，在<code>系统偏好设置\\安全性与隐私</code>中允许即可。</em></li>\n<li>打开终端，进入<code>偏好设置</code>便可以在<code>描述文件</code>中看到新安装的主题了，将新安装的主题设置为<strong>默认</strong>。并在<code>通用</code>设置为启动时打开刚才设置为默认的描述文件。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg\" alt><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg\" alt><br>现在主题就安装好了。</li>\n</ol>\n<h3 id=\"vim配置\"><a href=\"#vim配置\" class=\"headerlink\" title=\"vim配置\"></a>vim配置</h3><ol>\n<li>将Solarized主题的vim文件拷贝到系统的vim目录<pre class=\" language-bash\"><code class=\"language-bash\"> <span class=\"token function\">cd</span> solarized\n <span class=\"token function\">cd</span> vim-colors-solarized/colors\n <span class=\"token function\">mkdir</span> -p ~/.vim/colors\n <span class=\"token function\">cp</span> solarized.vim ~/.vim/colors/</code></pre>\n</li>\n<li>修改vim设置:<code>vim ~/.vimrc</code>，在该文件中添加一下内容<pre class=\" language-bash\"><code class=\"language-bash\"> syntax on\n <span class=\"token keyword\">set</span> background<span class=\"token operator\">=</span>dark <span class=\"token comment\" spellcheck=\"true\"># 背景为dark，也可选light</span>\n colorscheme solarized</code></pre>\n修改后如图所示：（版本不同，效果可能有所不同）<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg\" alt></li>\n</ol>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>安装Solarized主题后，终端中执行<code>ls</code>等命令时，文件都是同一个颜色，没有高亮，可以在<code>.bash_profile</code>中添加一下设置</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># vim ~/.bash_profile</span>\n<span class=\"token function\">export</span> GREP_OPTIONS<span class=\"token operator\">=</span><span class=\"token string\">'--color=auto'</span>\n<span class=\"token function\">export</span> TERM<span class=\"token operator\">=</span><span class=\"token string\">\"xterm-color\"</span>\nPS1<span class=\"token operator\">=</span><span class=\"token string\">'\\[\\e[0;33m\\]\\u\\[\\e[0m\\]@\\[\\e[0;32m\\]\\h\\[\\e[0m\\]:\\[\\e[0;34m\\]\\w\\[\\e[0m\\]\\$ '</span></code></pre>\n<p>设置后如图所示：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg\" alt></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"优化原因\"><a href=\"#优化原因\" class=\"headerlink\" title=\"优化原因\"></a>优化原因</h2><p>macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg\" alt><br>所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg\" alt></p>\n<h2 id=\"优化方法\"><a href=\"#优化方法\" class=\"headerlink\" title=\"优化方法\"></a>优化方法</h2><p>这里优化用到的是Solarized主题<a href=\"https://github.com/altercation/solarized\" target=\"_blank\" rel=\"noopener\">GitHub</a>。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg\" alt></p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><ol>\n<li>主题可以通过两种方式获取</li>\n</ol>\n<ul>\n<li>从<a href=\"https://github.com/altercation/solarized\" target=\"_blank\" rel=\"noopener\">GitHub</a>仓库中的<code>release</code>中下载作者发布的压缩包</li>\n<li>通过终端克隆仓库的方式进行获取<pre><code class=\"bash\">  # 在终端输入\n  git clone git://github.com/altercation/solarized.git</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>下载好主题后，从下载的文件中找到<code>osx-terminal.app-colors-solarized</code>文件夹，文件内容如图所示：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg\" alt><br>文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。<em>在安装中可能会遇到安全提示，在<code>系统偏好设置\\安全性与隐私</code>中允许即可。</em></li>\n<li>打开终端，进入<code>偏好设置</code>便可以在<code>描述文件</code>中看到新安装的主题了，将新安装的主题设置为<strong>默认</strong>。并在<code>通用</code>设置为启动时打开刚才设置为默认的描述文件。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg\" alt><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg\" alt><br>现在主题就安装好了。</li>\n</ol>\n<h3 id=\"vim配置\"><a href=\"#vim配置\" class=\"headerlink\" title=\"vim配置\"></a>vim配置</h3><ol>\n<li>将Solarized主题的vim文件拷贝到系统的vim目录<pre><code class=\"bash\"> cd solarized\n cd vim-colors-solarized/colors\n mkdir -p ~/.vim/colors\n cp solarized.vim ~/.vim/colors/</code></pre>\n</li>\n<li>修改vim设置:<code>vim ~/.vimrc</code>，在该文件中添加一下内容<pre><code class=\"bash\"> syntax on\n set background=dark # 背景为dark，也可选light\n colorscheme solarized</code></pre>\n修改后如图所示：（版本不同，效果可能有所不同）<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg\" alt></li>\n</ol>\n<h3 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h3><p>安装Solarized主题后，终端中执行<code>ls</code>等命令时，文件都是同一个颜色，没有高亮，可以在<code>.bash_profile</code>中添加一下设置</p>\n<pre><code class=\"bash\"># vim ~/.bash_profile\nexport GREP_OPTIONS=&#39;--color=auto&#39;\nexport TERM=&quot;xterm-color&quot;\nPS1=&#39;\\[\\e[0;33m\\]\\u\\[\\e[0m\\]@\\[\\e[0;32m\\]\\h\\[\\e[0m\\]:\\[\\e[0;34m\\]\\w\\[\\e[0m\\]\\$ &#39;</code></pre>\n<p>设置后如图所示：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg\" alt></p>\n"},{"title":"macOS下忽略.DS_Store文件","date":"2019-02-26T10:58:56.000Z","toc":false,"summary":"macOS平台使用git时全局忽略没有用的.DS_Store文件","_content":"在macOS平台下会自动生成`.DS_Store`文件，在使用git提交的过程中，会发现git将`.DS_Store`文件一并提交了，这是我们不需要的。我们可以在项目中新建一个`.gitignore`文件，将`.DS_Store`添加进去，但是这种方式只对当前项目有效，新建项目之后仍会出现上述问题，所以这里介绍全局忽略`.DS_Store`的方法。\n1. 在`home`目录下新建`.gitignore_global`文件，文件内容如下\n```bash\n# .gitignore_global\n.DS_Store\n.DS_Store?\n```\n2. 编辑在`home`目录下的`.gitconfig`文件，使其引入`.gitignore_global`的设置。`.gitconfig`的内容如下：\n```bash\n[user]\n\tname = yourname\n\temail = yourname@github.com\n[core]\n\texcludesfile = /Users/yourname/.gitignore_global\n```\n*home路径中的yourname和自己的对应*\n\n3. 如果项目中已经出现了`.DS_Store`文件并且已经提交了，我们需要将`.DS_Store`文件删除，并再次提交。\n+ 删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store\n```bash\nfind . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n```\n+ 如果要删除目录及其子目录下的`.DS_Store`，执行以下指令\n```bash\nfind . -name '*.DS_Store' -type f -delete\n```\n+ 更新项目\n```bash\ngit add --all\ngit commit -m '.DS_Store banished!'\n```\n4. 当然也可以在终端通过修改系统设置来禁止生成`.DS_Store`（*好像不能禁止本地生成*）。\n+ 禁止`.DS_Store`生成：\n```bash\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE\n```\n+ 恢复`.DS_Store`生成\n```bash\ndefaults delete com.apple.desktopservices DSDontWriteNetworkStores\n```\n参考博客：\n\n1. [简书-iOSReverse-如何删除GIT中的.DS_Store](https://www.jianshu.com/p/fdaa8be7f6c3)\n\n2. [个人博客-aoenian](https://aoenian.github.io/2018/12/19/git-ignore-config/)\n","source":"_posts/Environment/ignoreDS_Store.md","raw":"---\ntitle: macOS下忽略.DS_Store文件\ndate: 2019-02-26 18:58:56\ntoc: false\nsummary: macOS平台使用git时全局忽略没有用的.DS_Store文件\ncategories: 分享\ntags:\n  - git\n  - 全局忽略\n  - macOS\n---\n在macOS平台下会自动生成`.DS_Store`文件，在使用git提交的过程中，会发现git将`.DS_Store`文件一并提交了，这是我们不需要的。我们可以在项目中新建一个`.gitignore`文件，将`.DS_Store`添加进去，但是这种方式只对当前项目有效，新建项目之后仍会出现上述问题，所以这里介绍全局忽略`.DS_Store`的方法。\n1. 在`home`目录下新建`.gitignore_global`文件，文件内容如下\n```bash\n# .gitignore_global\n.DS_Store\n.DS_Store?\n```\n2. 编辑在`home`目录下的`.gitconfig`文件，使其引入`.gitignore_global`的设置。`.gitconfig`的内容如下：\n```bash\n[user]\n\tname = yourname\n\temail = yourname@github.com\n[core]\n\texcludesfile = /Users/yourname/.gitignore_global\n```\n*home路径中的yourname和自己的对应*\n\n3. 如果项目中已经出现了`.DS_Store`文件并且已经提交了，我们需要将`.DS_Store`文件删除，并再次提交。\n+ 删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store\n```bash\nfind . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n```\n+ 如果要删除目录及其子目录下的`.DS_Store`，执行以下指令\n```bash\nfind . -name '*.DS_Store' -type f -delete\n```\n+ 更新项目\n```bash\ngit add --all\ngit commit -m '.DS_Store banished!'\n```\n4. 当然也可以在终端通过修改系统设置来禁止生成`.DS_Store`（*好像不能禁止本地生成*）。\n+ 禁止`.DS_Store`生成：\n```bash\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE\n```\n+ 恢复`.DS_Store`生成\n```bash\ndefaults delete com.apple.desktopservices DSDontWriteNetworkStores\n```\n参考博客：\n\n1. [简书-iOSReverse-如何删除GIT中的.DS_Store](https://www.jianshu.com/p/fdaa8be7f6c3)\n\n2. [个人博客-aoenian](https://aoenian.github.io/2018/12/19/git-ignore-config/)\n","slug":"Environment/ignoreDS_Store","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgg0008metfn86jajxi","content":"<p>在macOS平台下会自动生成<code>.DS_Store</code>文件，在使用git提交的过程中，会发现git将<code>.DS_Store</code>文件一并提交了，这是我们不需要的。我们可以在项目中新建一个<code>.gitignore</code>文件，将<code>.DS_Store</code>添加进去，但是这种方式只对当前项目有效，新建项目之后仍会出现上述问题，所以这里介绍全局忽略<code>.DS_Store</code>的方法。</p>\n<ol>\n<li>在<code>home</code>目录下新建<code>.gitignore_global</code>文件，文件内容如下<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># .gitignore_global</span>\n.DS_Store\n.DS_Store?</code></pre>\n</li>\n<li>编辑在<code>home</code>目录下的<code>.gitconfig</code>文件，使其引入<code>.gitignore_global</code>的设置。<code>.gitconfig</code>的内容如下：<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span>\n name <span class=\"token operator\">=</span> yourname\n email <span class=\"token operator\">=</span> yourname@github.com\n<span class=\"token punctuation\">[</span>core<span class=\"token punctuation\">]</span>\n excludesfile <span class=\"token operator\">=</span> /Users/yourname/.gitignore_global</code></pre>\n</li>\n</ol>\n<p><em>home路径中的yourname和自己的对应</em></p>\n<ol start=\"3\">\n<li>如果项目中已经出现了<code>.DS_Store</code>文件并且已经提交了，我们需要将<code>.DS_Store</code>文件删除，并再次提交。</li>\n</ol>\n<ul>\n<li>删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -name .DS_Store -print0 <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -0 <span class=\"token function\">git</span> <span class=\"token function\">rm</span> -f --ignore-unmatch</code></pre>\n</li>\n<li>如果要删除目录及其子目录下的<code>.DS_Store</code>，执行以下指令<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -name <span class=\"token string\">'*.DS_Store'</span> -type f -delete</code></pre>\n</li>\n<li>更新项目<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> add --all\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'.DS_Store banished!'</span></code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>当然也可以在终端通过修改系统设置来禁止生成<code>.DS_Store</code>（<em>好像不能禁止本地生成</em>）。</li>\n</ol>\n<ul>\n<li>禁止<code>.DS_Store</code>生成：<pre class=\" language-bash\"><code class=\"language-bash\">defaults <span class=\"token function\">write</span> com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></pre>\n</li>\n<li>恢复<code>.DS_Store</code>生成<pre class=\" language-bash\"><code class=\"language-bash\">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></pre>\n参考博客：</li>\n</ul>\n<ol>\n<li><p><a href=\"https://www.jianshu.com/p/fdaa8be7f6c3\" target=\"_blank\" rel=\"noopener\">简书-iOSReverse-如何删除GIT中的.DS_Store</a></p>\n</li>\n<li><p><a href=\"https://aoenian.github.io/2018/12/19/git-ignore-config/\" target=\"_blank\" rel=\"noopener\">个人博客-aoenian</a></p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<p>在macOS平台下会自动生成<code>.DS_Store</code>文件，在使用git提交的过程中，会发现git将<code>.DS_Store</code>文件一并提交了，这是我们不需要的。我们可以在项目中新建一个<code>.gitignore</code>文件，将<code>.DS_Store</code>添加进去，但是这种方式只对当前项目有效，新建项目之后仍会出现上述问题，所以这里介绍全局忽略<code>.DS_Store</code>的方法。</p>\n<ol>\n<li>在<code>home</code>目录下新建<code>.gitignore_global</code>文件，文件内容如下<pre><code class=\"bash\"># .gitignore_global\n.DS_Store\n.DS_Store?</code></pre>\n</li>\n<li>编辑在<code>home</code>目录下的<code>.gitconfig</code>文件，使其引入<code>.gitignore_global</code>的设置。<code>.gitconfig</code>的内容如下：<pre><code class=\"bash\">[user]\n name = yourname\n email = yourname@github.com\n[core]\n excludesfile = /Users/yourname/.gitignore_global</code></pre>\n</li>\n</ol>\n<p><em>home路径中的yourname和自己的对应</em></p>\n<ol start=\"3\">\n<li>如果项目中已经出现了<code>.DS_Store</code>文件并且已经提交了，我们需要将<code>.DS_Store</code>文件删除，并再次提交。</li>\n</ol>\n<ul>\n<li>删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store<pre><code class=\"bash\">find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch</code></pre>\n</li>\n<li>如果要删除目录及其子目录下的<code>.DS_Store</code>，执行以下指令<pre><code class=\"bash\">find . -name &#39;*.DS_Store&#39; -type f -delete</code></pre>\n</li>\n<li>更新项目<pre><code class=\"bash\">git add --all\ngit commit -m &#39;.DS_Store banished!&#39;</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>当然也可以在终端通过修改系统设置来禁止生成<code>.DS_Store</code>（<em>好像不能禁止本地生成</em>）。</li>\n</ol>\n<ul>\n<li>禁止<code>.DS_Store</code>生成：<pre><code class=\"bash\">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></pre>\n</li>\n<li>恢复<code>.DS_Store</code>生成<pre><code class=\"bash\">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></pre>\n参考博客：</li>\n</ul>\n<ol>\n<li><p><a href=\"https://www.jianshu.com/p/fdaa8be7f6c3\" target=\"_blank\" rel=\"noopener\">简书-iOSReverse-如何删除GIT中的.DS_Store</a></p>\n</li>\n<li><p><a href=\"https://aoenian.github.io/2018/12/19/git-ignore-config/\" target=\"_blank\" rel=\"noopener\">个人博客-aoenian</a></p>\n</li>\n</ol>\n"},{"title":"（转载）漫画：如何将一个链表“逆序”？","date":"2019-03-20T14:49:37.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg","summary":"（转载）漫画：如何将一个链表“逆序”？,数据结构-链表逆序","_content":"声明：本文转载自微信公众号**程序员小灰**，以获作者授权转载\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-2.jpg)\n<center>------第二天-------</center>\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-3.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-4.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-5.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-6.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-7.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-8.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-9.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-10.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-11.jpg)\n（现实里的小灰在刚入行的时候，面试官也问了我这个问题，当时小灰就傻傻的问面试官是单链表还是双链表？然后就没然后了......）\n***\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-12.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-13.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-14.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-15.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-16.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-17.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-18.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-19.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-20.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-21.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-22.jpg)\n\n让我们从链表头部开始，建立三个临时节点的引用，分别为p1，p2，p3。它们分别指向头节点、第二个节点、第三个节点。\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-23.jpg)\n\n实现链表逆序的完整步骤如下：\n\n1. 以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-24.jpg)\n\n2. 三个临时节点引用p1，p2，p3分别向后移动一格位置。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-25.jpg)\n\n3. 重复第1步的工作，以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-26.jpg)\n\n4. 重复第2步的工作，三个临时节点引用p1，p2，p3分别向后移动一格位置。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-27.jpg)\n.......\n.......\n\n5. 继续像这样子迭代下去，一直到p2是空为止。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-28.jpg)\n\n6. 最后，把head节点的next指向空，成为逆序链表的尾节点。并且把p1赋值给head，让p1所在的节点成为逆序链表的头节点。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-29.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-30.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-31.jpg)\n\n> Java:\n\n```java\nprivate static Node head;\npublic static void reverseLinkedList()\n{\n    if(head == null || head.next == null)\n        return;\n    Node p1 = head;\n    Node p2 = head.next;\n    Node p3 = null;\n    while(p2 != null)\n    {\n        p3 = p2.next;\n        p2.next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head.next = null;\n    head = p1;\n}\n\nprivate static class Node\n{\n    int data;\n    Node next;\n    Node(int data)\n    {\n        this.data = data;\n    }\n}\n\npublic static void main(String[] args)\n{\n    // 初始化链表\n    head = new Node(3);\n    head.next = new Node(5);\n    Node temp = head.next;\n    temp.next = new Node(1);\n    temp = temp.next;\n    temp.next = new Node(4);\n    temp = temp.next;\n    temp.next = new Node(9);\n\n    // 逆序前输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n\n    // 逆序链表\n    reverseLinkedList();\n    \n    // 逆序后输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n}\n```\n> C++\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Node\n{\npublic:\n    int data;\n    Node* next;\n    Node(int da, Node* p = nullptr)\n    {\n        this->data =  da;\n        this->next = p;\n    }\n};\n\nNode* reverseLinkedList(Node *head)\n{\n    if(head == nullptr || head->next == nullptr)\n        return head;\n    Node *p1 = head;\n    Node *p2 = head->next;\n    Node *p3 = nullptr;\n    while(p2 != nullptr)\n    {\n        p3 = p2->next;\n        p2->next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head->next = nullptr;\n    head = p1;\n    return head;\n}\n\nint main()\n{\n    // 初始化链表\n    Node *head;\n    head = new Node(3);\n    head->next = new Node(5);\n    Node *tmp = head->next;\n    tmp->next = new Node(1);\n    tmp = tmp->next;\n    tmp->next = new Node(4);\n    tmp = tmp->next;\n    tmp->next = new Node(9);\n\n    cout << \"逆序前\" << endl;\n    // 逆序前输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout << tmp->data << endl;\n        tmp = tmp->next;\n    }\n    // 逆序链表\n    head = reverseLinkedList(head);\n\n    cout << \"逆序后\" << endl;\n    // 逆序后输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout << tmp->data << endl;\n        tmp = tmp->next;\n    }\n}\n```\n链表反转的逻辑本身，都在reverseLinkedList方法当中。在这里我们把链表的头节点作为了静态成员，实际上也可以作为方法参数传入，只是逻辑上需要一些小小的修改。\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-32.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-33.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-34.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-35.jpg)\n\n**如果喜欢小灰的漫画，可以长按下图关注订阅号程序员小灰，收看更多精彩内容哦**\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-36.jpg)","source":"_posts/DSA/reverse_LinkedList.md","raw":"---\ntitle: （转载）漫画：如何将一个链表“逆序”？\ndate: 2019-03-20 22:49:37\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg\nsummary: （转载）漫画：如何将一个链表“逆序”？,数据结构-链表逆序\ncategories: 分享\ntags:\n  - 数据结构\n  - 链表\n  - 转载\n---\n声明：本文转载自微信公众号**程序员小灰**，以获作者授权转载\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-2.jpg)\n<center>------第二天-------</center>\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-3.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-4.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-5.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-6.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-7.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-8.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-9.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-10.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-11.jpg)\n（现实里的小灰在刚入行的时候，面试官也问了我这个问题，当时小灰就傻傻的问面试官是单链表还是双链表？然后就没然后了......）\n***\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-12.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-13.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-14.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-15.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-16.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-17.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-18.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-19.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-20.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-21.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-22.jpg)\n\n让我们从链表头部开始，建立三个临时节点的引用，分别为p1，p2，p3。它们分别指向头节点、第二个节点、第三个节点。\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-23.jpg)\n\n实现链表逆序的完整步骤如下：\n\n1. 以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-24.jpg)\n\n2. 三个临时节点引用p1，p2，p3分别向后移动一格位置。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-25.jpg)\n\n3. 重复第1步的工作，以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-26.jpg)\n\n4. 重复第2步的工作，三个临时节点引用p1，p2，p3分别向后移动一格位置。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-27.jpg)\n.......\n.......\n\n5. 继续像这样子迭代下去，一直到p2是空为止。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-28.jpg)\n\n6. 最后，把head节点的next指向空，成为逆序链表的尾节点。并且把p1赋值给head，让p1所在的节点成为逆序链表的头节点。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-29.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-30.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-31.jpg)\n\n> Java:\n\n```java\nprivate static Node head;\npublic static void reverseLinkedList()\n{\n    if(head == null || head.next == null)\n        return;\n    Node p1 = head;\n    Node p2 = head.next;\n    Node p3 = null;\n    while(p2 != null)\n    {\n        p3 = p2.next;\n        p2.next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head.next = null;\n    head = p1;\n}\n\nprivate static class Node\n{\n    int data;\n    Node next;\n    Node(int data)\n    {\n        this.data = data;\n    }\n}\n\npublic static void main(String[] args)\n{\n    // 初始化链表\n    head = new Node(3);\n    head.next = new Node(5);\n    Node temp = head.next;\n    temp.next = new Node(1);\n    temp = temp.next;\n    temp.next = new Node(4);\n    temp = temp.next;\n    temp.next = new Node(9);\n\n    // 逆序前输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n\n    // 逆序链表\n    reverseLinkedList();\n    \n    // 逆序后输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n}\n```\n> C++\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Node\n{\npublic:\n    int data;\n    Node* next;\n    Node(int da, Node* p = nullptr)\n    {\n        this->data =  da;\n        this->next = p;\n    }\n};\n\nNode* reverseLinkedList(Node *head)\n{\n    if(head == nullptr || head->next == nullptr)\n        return head;\n    Node *p1 = head;\n    Node *p2 = head->next;\n    Node *p3 = nullptr;\n    while(p2 != nullptr)\n    {\n        p3 = p2->next;\n        p2->next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head->next = nullptr;\n    head = p1;\n    return head;\n}\n\nint main()\n{\n    // 初始化链表\n    Node *head;\n    head = new Node(3);\n    head->next = new Node(5);\n    Node *tmp = head->next;\n    tmp->next = new Node(1);\n    tmp = tmp->next;\n    tmp->next = new Node(4);\n    tmp = tmp->next;\n    tmp->next = new Node(9);\n\n    cout << \"逆序前\" << endl;\n    // 逆序前输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout << tmp->data << endl;\n        tmp = tmp->next;\n    }\n    // 逆序链表\n    head = reverseLinkedList(head);\n\n    cout << \"逆序后\" << endl;\n    // 逆序后输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout << tmp->data << endl;\n        tmp = tmp->next;\n    }\n}\n```\n链表反转的逻辑本身，都在reverseLinkedList方法当中。在这里我们把链表的头节点作为了静态成员，实际上也可以作为方法参数传入，只是逻辑上需要一些小小的修改。\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-32.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-33.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-34.jpg)\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-35.jpg)\n\n**如果喜欢小灰的漫画，可以长按下图关注订阅号程序员小灰，收看更多精彩内容哦**\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20190320-36.jpg)","slug":"DSA/reverse_LinkedList","published":1,"updated":"2020-02-01T14:05:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgh0009metfhn6rkhiu","content":"<p>声明：本文转载自微信公众号<strong>程序员小灰</strong>，以获作者授权转载<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-2.jpg\" alt></p>\n<center>------第二天-------</center>\n\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-3.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-4.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-5.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-6.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-7.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-8.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-9.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-10.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-11.jpg\" alt><br>（现实里的小灰在刚入行的时候，面试官也问了我这个问题，当时小灰就傻傻的问面试官是单链表还是双链表？然后就没然后了……）</p>\n<hr>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-12.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-13.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-14.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-15.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-16.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-17.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-18.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-19.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-20.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-21.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-22.jpg\" alt></p>\n<p>让我们从链表头部开始，建立三个临时节点的引用，分别为p1，p2，p3。它们分别指向头节点、第二个节点、第三个节点。</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-23.jpg\" alt></p>\n<p>实现链表逆序的完整步骤如下：</p>\n<ol>\n<li><p>以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-24.jpg\" alt></p>\n</li>\n<li><p>三个临时节点引用p1，p2，p3分别向后移动一格位置。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-25.jpg\" alt></p>\n</li>\n<li><p>重复第1步的工作，以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-26.jpg\" alt></p>\n</li>\n<li><p>重复第2步的工作，三个临时节点引用p1，p2，p3分别向后移动一格位置。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-27.jpg\" alt><br>…….<br>…….</p>\n</li>\n<li><p>继续像这样子迭代下去，一直到p2是空为止。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-28.jpg\" alt></p>\n</li>\n<li><p>最后，把head节点的next指向空，成为逆序链表的尾节点。并且把p1赋值给head，让p1所在的节点成为逆序链表的头节点。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-29.jpg\" alt></p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-30.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-31.jpg\" alt></p>\n<blockquote>\n<p>Java:</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Node head<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reverseLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    Node p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    Node p2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    Node p3 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        p3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        p1 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        p2 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    Node next<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化链表</span>\n    head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序前输出链表</span>\n    temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序链表</span>\n    <span class=\"token function\">reverseLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序后输出链表</span>\n    temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>C++</p>\n</blockquote>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> da<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>data <span class=\"token operator\">=</span>  da<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseLinkedList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> head<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> head<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        p3 <span class=\"token operator\">=</span> p2<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        p2<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        p1 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        p2 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    head<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化链表</span>\n    Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> head<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"逆序前\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序前输出链表</span>\n    tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序链表</span>\n    head <span class=\"token operator\">=</span> <span class=\"token function\">reverseLinkedList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"逆序后\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 逆序后输出链表</span>\n    tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>链表反转的逻辑本身，都在reverseLinkedList方法当中。在这里我们把链表的头节点作为了静态成员，实际上也可以作为方法参数传入，只是逻辑上需要一些小小的修改。</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-32.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-33.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-34.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-35.jpg\" alt></p>\n<p><strong>如果喜欢小灰的漫画，可以长按下图关注订阅号程序员小灰，收看更多精彩内容哦</strong></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-36.jpg\" alt></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<p>声明：本文转载自微信公众号<strong>程序员小灰</strong>，以获作者授权转载<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-1.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-2.jpg\" alt></p>\n<center>------第二天-------</center>\n\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-3.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-4.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-5.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-6.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-7.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-8.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-9.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-10.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-11.jpg\" alt><br>（现实里的小灰在刚入行的时候，面试官也问了我这个问题，当时小灰就傻傻的问面试官是单链表还是双链表？然后就没然后了……）</p>\n<hr>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-12.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-13.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-14.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-15.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-16.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-17.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-18.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-19.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-20.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-21.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-22.jpg\" alt></p>\n<p>让我们从链表头部开始，建立三个临时节点的引用，分别为p1，p2，p3。它们分别指向头节点、第二个节点、第三个节点。</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-23.jpg\" alt></p>\n<p>实现链表逆序的完整步骤如下：</p>\n<ol>\n<li><p>以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-24.jpg\" alt></p>\n</li>\n<li><p>三个临时节点引用p1，p2，p3分别向后移动一格位置。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-25.jpg\" alt></p>\n</li>\n<li><p>重复第1步的工作，以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-26.jpg\" alt></p>\n</li>\n<li><p>重复第2步的工作，三个临时节点引用p1，p2，p3分别向后移动一格位置。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-27.jpg\" alt><br>…….<br>…….</p>\n</li>\n<li><p>继续像这样子迭代下去，一直到p2是空为止。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-28.jpg\" alt></p>\n</li>\n<li><p>最后，把head节点的next指向空，成为逆序链表的尾节点。并且把p1赋值给head，让p1所在的节点成为逆序链表的头节点。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-29.jpg\" alt></p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-30.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-31.jpg\" alt></p>\n<blockquote>\n<p>Java:</p>\n</blockquote>\n<pre><code class=\"java\">private static Node head;\npublic static void reverseLinkedList()\n{\n    if(head == null || head.next == null)\n        return;\n    Node p1 = head;\n    Node p2 = head.next;\n    Node p3 = null;\n    while(p2 != null)\n    {\n        p3 = p2.next;\n        p2.next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head.next = null;\n    head = p1;\n}\n\nprivate static class Node\n{\n    int data;\n    Node next;\n    Node(int data)\n    {\n        this.data = data;\n    }\n}\n\npublic static void main(String[] args)\n{\n    // 初始化链表\n    head = new Node(3);\n    head.next = new Node(5);\n    Node temp = head.next;\n    temp.next = new Node(1);\n    temp = temp.next;\n    temp.next = new Node(4);\n    temp = temp.next;\n    temp.next = new Node(9);\n\n    // 逆序前输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n\n    // 逆序链表\n    reverseLinkedList();\n\n    // 逆序后输出链表\n    temp = head;\n    while(temp != null)\n    {\n        System.out.println(temp.data);\n        temp = temp.next;\n    }\n}</code></pre>\n<blockquote>\n<p>C++</p>\n</blockquote>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nclass Node\n{\npublic:\n    int data;\n    Node* next;\n    Node(int da, Node* p = nullptr)\n    {\n        this-&gt;data =  da;\n        this-&gt;next = p;\n    }\n};\n\nNode* reverseLinkedList(Node *head)\n{\n    if(head == nullptr || head-&gt;next == nullptr)\n        return head;\n    Node *p1 = head;\n    Node *p2 = head-&gt;next;\n    Node *p3 = nullptr;\n    while(p2 != nullptr)\n    {\n        p3 = p2-&gt;next;\n        p2-&gt;next = p1;\n        p1 = p2;\n        p2 = p3;\n    }\n    head-&gt;next = nullptr;\n    head = p1;\n    return head;\n}\n\nint main()\n{\n    // 初始化链表\n    Node *head;\n    head = new Node(3);\n    head-&gt;next = new Node(5);\n    Node *tmp = head-&gt;next;\n    tmp-&gt;next = new Node(1);\n    tmp = tmp-&gt;next;\n    tmp-&gt;next = new Node(4);\n    tmp = tmp-&gt;next;\n    tmp-&gt;next = new Node(9);\n\n    cout &lt;&lt; &quot;逆序前&quot; &lt;&lt; endl;\n    // 逆序前输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout &lt;&lt; tmp-&gt;data &lt;&lt; endl;\n        tmp = tmp-&gt;next;\n    }\n    // 逆序链表\n    head = reverseLinkedList(head);\n\n    cout &lt;&lt; &quot;逆序后&quot; &lt;&lt; endl;\n    // 逆序后输出链表\n    tmp = head;\n    while(tmp != nullptr)\n    {\n        cout &lt;&lt; tmp-&gt;data &lt;&lt; endl;\n        tmp = tmp-&gt;next;\n    }\n}</code></pre>\n<p>链表反转的逻辑本身，都在reverseLinkedList方法当中。在这里我们把链表的头节点作为了静态成员，实际上也可以作为方法参数传入，只是逻辑上需要一些小小的修改。</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-32.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-33.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-34.jpg\" alt></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-35.jpg\" alt></p>\n<p><strong>如果喜欢小灰的漫画，可以长按下图关注订阅号程序员小灰，收看更多精彩内容哦</strong></p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190320-36.jpg\" alt></p>\n"},{"title":"macOS中Python多版本管理与虚拟环境","date":"2019-03-10T14:25:37.000Z","summary":"通过pyenv版本管理和virtualenv虚拟环境进行python管理","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190310-1.jpg","_content":"## 多版本管理的优点\n+ 当我们频繁开发和调试python程序时，会导致系统目录特别凌乱。\n+ 不同开发用途可能会用到不同版本的python，不同的应用程序也可能需要不同版本的第三方库，这样在管理时会比较麻烦\n因此我们引入**pyenv**版本管理和**virtualenv**虚拟环境。\n\n## 安装pyenv版本管理\n利用Homebrew进行安装\n```bash\n$ brew install pyenv\n```\n\n### 查看可安装的版本列表\n```bash\n$ pyenv install --list\n```\n我们可以看到有不同版本的python，例如python3.5.x和python3.6.x\n\n### 安装python 3.5.2\n这里以安装python 3.5.2为例\n```bash\n$ pyenv install 3.5.2\n```\n安装完毕后，我们可以查看安装情况\n```bash\n$ pyenv versions\n```\n显示结果如下\n```\n* system (set by /home/tony/.pyenv/version)\n  3.5.2\n```\nsystem代表当前系统安装的python版本，3.5.2代表pyenv安装的python版本。\n\n### 切换python版本\n```bash\n$ pyenv global 3.5.2\n```\n查看切换结果\n```bash\n  system\n* 3.5.2 (set by /home/tony/.pyenv/version)\n```\n切换回系统默认版本\n```bash\n$ pyenv global system\n```\n卸载某一版本python\n```bash\n$ pyenv uninstall x.x.x\n```\n\n## 安装virtualenv虚拟环境\n利用Homebrew安装\n```bash\n$ brew install pyenv-virtualenv\n```\n\n### 安装指定python版本的虚拟环境\n```bash\n$ pyenv virtualenv 3.5.2 env\n```\n该命令会创建名为`env`的虚拟环境，这个环境的真实目录位于：`~/.pyenv/versions/`\n我们依然可以通过`pyenv versions`查看当前的虚拟环境安装情况\n```bash\n* system (set by /home/tony/.pyenv/version)\n  3.5.2\n  env\n```\n### 切换到虚拟环境\n在切换到虚拟环境之前，我们还需要执行以下指令\n```bash\n$ eval  “ $（ pyenv init  - ） ”\n$ eval  “ $（ pyenv virtualenv-init  - ） ”\n```\n通过一下命令切换到虚拟环境\n```bash\n$ pyenv activate env\n```\n我们可以通过`python`命令查看版本号\n如果要退出虚拟环境，执行以下指令：\n```bash\npyenv deactivate\n```\n如果需要删除虚拟环境，可以执行以下指令：\n```bash\n$ pyenv uninstall env\n```\n在实际应用过程中，多加利用这两个工具，可以让你的电脑整洁如新！\n***\n#### 补充\n在最新系统Mojave 10.14中，执行`pyenv install 3.x.x`可能会出现以下错误：\n```bash\n$ zipimport.ZipImportError: can't decompress data; zlib not available\n```\n这个问题可能是macOS更新后，xcode没有跟进导致的，可以执行以下代码解决\n```bash\n$ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n$ pyenv install 3.6.6\n```\n**参考博客：**[[Pluviophile's Blog\n-Mojave使用pyenv安装python-zlib错误](https://lisupy.github.io/2018/10/01/2018-10-01-Mojave使用pyenv安装python/)","source":"_posts/Environment/pyenv_and_virtualenv.md","raw":"---\ntitle: macOS中Python多版本管理与虚拟环境\ndate: 2019-03-10 22:25:37\nsummary: 通过pyenv版本管理和virtualenv虚拟环境进行python管理\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190310-1.jpg\ncategories: 分享\ntags:\n  - macOS\n  - Python\n  - pyenv\n  - virtualenv\n---\n## 多版本管理的优点\n+ 当我们频繁开发和调试python程序时，会导致系统目录特别凌乱。\n+ 不同开发用途可能会用到不同版本的python，不同的应用程序也可能需要不同版本的第三方库，这样在管理时会比较麻烦\n因此我们引入**pyenv**版本管理和**virtualenv**虚拟环境。\n\n## 安装pyenv版本管理\n利用Homebrew进行安装\n```bash\n$ brew install pyenv\n```\n\n### 查看可安装的版本列表\n```bash\n$ pyenv install --list\n```\n我们可以看到有不同版本的python，例如python3.5.x和python3.6.x\n\n### 安装python 3.5.2\n这里以安装python 3.5.2为例\n```bash\n$ pyenv install 3.5.2\n```\n安装完毕后，我们可以查看安装情况\n```bash\n$ pyenv versions\n```\n显示结果如下\n```\n* system (set by /home/tony/.pyenv/version)\n  3.5.2\n```\nsystem代表当前系统安装的python版本，3.5.2代表pyenv安装的python版本。\n\n### 切换python版本\n```bash\n$ pyenv global 3.5.2\n```\n查看切换结果\n```bash\n  system\n* 3.5.2 (set by /home/tony/.pyenv/version)\n```\n切换回系统默认版本\n```bash\n$ pyenv global system\n```\n卸载某一版本python\n```bash\n$ pyenv uninstall x.x.x\n```\n\n## 安装virtualenv虚拟环境\n利用Homebrew安装\n```bash\n$ brew install pyenv-virtualenv\n```\n\n### 安装指定python版本的虚拟环境\n```bash\n$ pyenv virtualenv 3.5.2 env\n```\n该命令会创建名为`env`的虚拟环境，这个环境的真实目录位于：`~/.pyenv/versions/`\n我们依然可以通过`pyenv versions`查看当前的虚拟环境安装情况\n```bash\n* system (set by /home/tony/.pyenv/version)\n  3.5.2\n  env\n```\n### 切换到虚拟环境\n在切换到虚拟环境之前，我们还需要执行以下指令\n```bash\n$ eval  “ $（ pyenv init  - ） ”\n$ eval  “ $（ pyenv virtualenv-init  - ） ”\n```\n通过一下命令切换到虚拟环境\n```bash\n$ pyenv activate env\n```\n我们可以通过`python`命令查看版本号\n如果要退出虚拟环境，执行以下指令：\n```bash\npyenv deactivate\n```\n如果需要删除虚拟环境，可以执行以下指令：\n```bash\n$ pyenv uninstall env\n```\n在实际应用过程中，多加利用这两个工具，可以让你的电脑整洁如新！\n***\n#### 补充\n在最新系统Mojave 10.14中，执行`pyenv install 3.x.x`可能会出现以下错误：\n```bash\n$ zipimport.ZipImportError: can't decompress data; zlib not available\n```\n这个问题可能是macOS更新后，xcode没有跟进导致的，可以执行以下代码解决\n```bash\n$ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n$ pyenv install 3.6.6\n```\n**参考博客：**[[Pluviophile's Blog\n-Mojave使用pyenv安装python-zlib错误](https://lisupy.github.io/2018/10/01/2018-10-01-Mojave使用pyenv安装python/)","slug":"Environment/pyenv_and_virtualenv","published":1,"updated":"2019-07-14T03:25:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgk000ametfw4lswn24","content":"<h2 id=\"多版本管理的优点\"><a href=\"#多版本管理的优点\" class=\"headerlink\" title=\"多版本管理的优点\"></a>多版本管理的优点</h2><ul>\n<li>当我们频繁开发和调试python程序时，会导致系统目录特别凌乱。</li>\n<li>不同开发用途可能会用到不同版本的python，不同的应用程序也可能需要不同版本的第三方库，这样在管理时会比较麻烦<br>因此我们引入<strong>pyenv</strong>版本管理和<strong>virtualenv</strong>虚拟环境。</li>\n</ul>\n<h2 id=\"安装pyenv版本管理\"><a href=\"#安装pyenv版本管理\" class=\"headerlink\" title=\"安装pyenv版本管理\"></a>安装pyenv版本管理</h2><p>利用Homebrew进行安装</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> pyenv</code></pre>\n<h3 id=\"查看可安装的版本列表\"><a href=\"#查看可安装的版本列表\" class=\"headerlink\" title=\"查看可安装的版本列表\"></a>查看可安装的版本列表</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv <span class=\"token function\">install</span> --list</code></pre>\n<p>我们可以看到有不同版本的python，例如python3.5.x和python3.6.x</p>\n<h3 id=\"安装python-3-5-2\"><a href=\"#安装python-3-5-2\" class=\"headerlink\" title=\"安装python 3.5.2\"></a>安装python 3.5.2</h3><p>这里以安装python 3.5.2为例</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv <span class=\"token function\">install</span> 3.5.2</code></pre>\n<p>安装完毕后，我们可以查看安装情况</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv versions</code></pre>\n<p>显示结果如下</p>\n<pre><code>* system (set by /home/tony/.pyenv/version)\n  3.5.2</code></pre><p>system代表当前系统安装的python版本，3.5.2代表pyenv安装的python版本。</p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv global 3.5.2</code></pre>\n<p>查看切换结果</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">  system\n* 3.5.2 <span class=\"token punctuation\">(</span>set by /home/tony/.pyenv/version<span class=\"token punctuation\">)</span></code></pre>\n<p>切换回系统默认版本</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv global system</code></pre>\n<p>卸载某一版本python</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv uninstall x.x.x</code></pre>\n<h2 id=\"安装virtualenv虚拟环境\"><a href=\"#安装virtualenv虚拟环境\" class=\"headerlink\" title=\"安装virtualenv虚拟环境\"></a>安装virtualenv虚拟环境</h2><p>利用Homebrew安装</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> pyenv-virtualenv</code></pre>\n<h3 id=\"安装指定python版本的虚拟环境\"><a href=\"#安装指定python版本的虚拟环境\" class=\"headerlink\" title=\"安装指定python版本的虚拟环境\"></a>安装指定python版本的虚拟环境</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv virtualenv 3.5.2 <span class=\"token function\">env</span></code></pre>\n<p>该命令会创建名为<code>env</code>的虚拟环境，这个环境的真实目录位于：<code>~/.pyenv/versions/</code><br>我们依然可以通过<code>pyenv versions</code>查看当前的虚拟环境安装情况</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">* system <span class=\"token punctuation\">(</span>set by /home/tony/.pyenv/version<span class=\"token punctuation\">)</span>\n  3.5.2\n  <span class=\"token function\">env</span></code></pre>\n<h3 id=\"切换到虚拟环境\"><a href=\"#切换到虚拟环境\" class=\"headerlink\" title=\"切换到虚拟环境\"></a>切换到虚拟环境</h3><p>在切换到虚拟环境之前，我们还需要执行以下指令</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">eval</span>  “ $（ pyenv init  - ） ”\n$ <span class=\"token function\">eval</span>  “ $（ pyenv virtualenv-init  - ） ”</code></pre>\n<p>通过一下命令切换到虚拟环境</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv activate <span class=\"token function\">env</span></code></pre>\n<p>我们可以通过<code>python</code>命令查看版本号<br>如果要退出虚拟环境，执行以下指令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">pyenv deactivate</code></pre>\n<p>如果需要删除虚拟环境，可以执行以下指令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ pyenv uninstall <span class=\"token function\">env</span></code></pre>\n<p>在实际应用过程中，多加利用这两个工具，可以让你的电脑整洁如新！</p>\n<hr>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p>在最新系统Mojave 10.14中，执行<code>pyenv install 3.x.x</code>可能会出现以下错误：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ zipimport.ZipImportError: can't decompress data<span class=\"token punctuation\">;</span> zlib not available</code></pre>\n<p>这个问题可能是macOS更新后，xcode没有跟进导致的，可以执行以下代码解决</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n$ pyenv <span class=\"token function\">install</span> 3.6.6</code></pre>\n<p><strong>参考博客：</strong>[<a href=\"https://lisupy.github.io/2018/10/01/2018-10-01-Mojave使用pyenv安装python/\" target=\"_blank\" rel=\"noopener\">Pluviophile’s Blog<br>-Mojave使用pyenv安装python-zlib错误</a></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"多版本管理的优点\"><a href=\"#多版本管理的优点\" class=\"headerlink\" title=\"多版本管理的优点\"></a>多版本管理的优点</h2><ul>\n<li>当我们频繁开发和调试python程序时，会导致系统目录特别凌乱。</li>\n<li>不同开发用途可能会用到不同版本的python，不同的应用程序也可能需要不同版本的第三方库，这样在管理时会比较麻烦<br>因此我们引入<strong>pyenv</strong>版本管理和<strong>virtualenv</strong>虚拟环境。</li>\n</ul>\n<h2 id=\"安装pyenv版本管理\"><a href=\"#安装pyenv版本管理\" class=\"headerlink\" title=\"安装pyenv版本管理\"></a>安装pyenv版本管理</h2><p>利用Homebrew进行安装</p>\n<pre><code class=\"bash\">$ brew install pyenv</code></pre>\n<h3 id=\"查看可安装的版本列表\"><a href=\"#查看可安装的版本列表\" class=\"headerlink\" title=\"查看可安装的版本列表\"></a>查看可安装的版本列表</h3><pre><code class=\"bash\">$ pyenv install --list</code></pre>\n<p>我们可以看到有不同版本的python，例如python3.5.x和python3.6.x</p>\n<h3 id=\"安装python-3-5-2\"><a href=\"#安装python-3-5-2\" class=\"headerlink\" title=\"安装python 3.5.2\"></a>安装python 3.5.2</h3><p>这里以安装python 3.5.2为例</p>\n<pre><code class=\"bash\">$ pyenv install 3.5.2</code></pre>\n<p>安装完毕后，我们可以查看安装情况</p>\n<pre><code class=\"bash\">$ pyenv versions</code></pre>\n<p>显示结果如下</p>\n<pre><code>* system (set by /home/tony/.pyenv/version)\n  3.5.2</code></pre><p>system代表当前系统安装的python版本，3.5.2代表pyenv安装的python版本。</p>\n<h3 id=\"切换python版本\"><a href=\"#切换python版本\" class=\"headerlink\" title=\"切换python版本\"></a>切换python版本</h3><pre><code class=\"bash\">$ pyenv global 3.5.2</code></pre>\n<p>查看切换结果</p>\n<pre><code class=\"bash\">  system\n* 3.5.2 (set by /home/tony/.pyenv/version)</code></pre>\n<p>切换回系统默认版本</p>\n<pre><code class=\"bash\">$ pyenv global system</code></pre>\n<p>卸载某一版本python</p>\n<pre><code class=\"bash\">$ pyenv uninstall x.x.x</code></pre>\n<h2 id=\"安装virtualenv虚拟环境\"><a href=\"#安装virtualenv虚拟环境\" class=\"headerlink\" title=\"安装virtualenv虚拟环境\"></a>安装virtualenv虚拟环境</h2><p>利用Homebrew安装</p>\n<pre><code class=\"bash\">$ brew install pyenv-virtualenv</code></pre>\n<h3 id=\"安装指定python版本的虚拟环境\"><a href=\"#安装指定python版本的虚拟环境\" class=\"headerlink\" title=\"安装指定python版本的虚拟环境\"></a>安装指定python版本的虚拟环境</h3><pre><code class=\"bash\">$ pyenv virtualenv 3.5.2 env</code></pre>\n<p>该命令会创建名为<code>env</code>的虚拟环境，这个环境的真实目录位于：<code>~/.pyenv/versions/</code><br>我们依然可以通过<code>pyenv versions</code>查看当前的虚拟环境安装情况</p>\n<pre><code class=\"bash\">* system (set by /home/tony/.pyenv/version)\n  3.5.2\n  env</code></pre>\n<h3 id=\"切换到虚拟环境\"><a href=\"#切换到虚拟环境\" class=\"headerlink\" title=\"切换到虚拟环境\"></a>切换到虚拟环境</h3><p>在切换到虚拟环境之前，我们还需要执行以下指令</p>\n<pre><code class=\"bash\">$ eval  “ $（ pyenv init  - ） ”\n$ eval  “ $（ pyenv virtualenv-init  - ） ”</code></pre>\n<p>通过一下命令切换到虚拟环境</p>\n<pre><code class=\"bash\">$ pyenv activate env</code></pre>\n<p>我们可以通过<code>python</code>命令查看版本号<br>如果要退出虚拟环境，执行以下指令：</p>\n<pre><code class=\"bash\">pyenv deactivate</code></pre>\n<p>如果需要删除虚拟环境，可以执行以下指令：</p>\n<pre><code class=\"bash\">$ pyenv uninstall env</code></pre>\n<p>在实际应用过程中，多加利用这两个工具，可以让你的电脑整洁如新！</p>\n<hr>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p>在最新系统Mojave 10.14中，执行<code>pyenv install 3.x.x</code>可能会出现以下错误：</p>\n<pre><code class=\"bash\">$ zipimport.ZipImportError: can&#39;t decompress data; zlib not available</code></pre>\n<p>这个问题可能是macOS更新后，xcode没有跟进导致的，可以执行以下代码解决</p>\n<pre><code class=\"bash\">$ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n$ pyenv install 3.6.6</code></pre>\n<p><strong>参考博客：</strong>[<a href=\"https://lisupy.github.io/2018/10/01/2018-10-01-Mojave使用pyenv安装python/\" target=\"_blank\" rel=\"noopener\">Pluviophile’s Blog<br>-Mojave使用pyenv安装python-zlib错误</a></p>\n"},{"title":"Mac终端oh-my-zsh配置","date":"2019-10-10T07:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20191010-1.jpg","summary":"Mac终端oh-my-zsh配置","_content":"\n## bash到zsh\n在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新之后，macOS的默认shell也从`bash`变成了`zsh`。\n\n*PS：新版本macOS为我们带来了随航功能，可以将iPad变成mac的另一块屏幕，不过需要注意：随航功能只适用于能够使用Apple pencil的iPad以及2016年之后发布的mac产品，笔者手里的2015款 MacBook Pro只能看着眼馋了。*\n\n## oh-my-zsh\nzsh本身功能强大，但是对于普通用户来说不太友好，但是伟大的程序猿无处不在，国外一名程序猿就开发了一款能够让大家快速上手`zsh`的项目：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)，借助该项目，只需要极为简单的安装配置，就可以享用`zsh`了\n\n### 安装zsh\nmacOS Catalina中默认安装了`zsh`，如果你使用的macOS的其他版本并且想使用`zsh`的话，可以利用`homebrew`安装\n1. 查看已安装的shell\n```bash\ncat /etc/shells\n\n    /bin/bash\n    /bin/csh\n    /bin/dash\n    /bin/ksh\n    /bin/sh\n    /bin/tcsh\n```\n\n2. 使用homebrew安装zsh\n```bash\nbrew install zsh\n```\n3. 切换为zsh\n```bash\nchsh -s /bin/zsh\n```\n4. 重启终端即可使用zsh\n\n### 安装 oh-my-zsh\n打开终端执行以下命令：\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n在执行该命令时，可能会遇到以下错误：\n```bash\nxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\nError: git clone of oh-my-zsh repo failed\n```\n可以执行以下命令之后，再执行一次安装命令(时间可能有点久T_T))：\n```bash\nxcode-select --install\n```\n当看到`oh my zsh`的标志，就代表安装成功了\n\n## zsh配置\n安装好oh-my-zsh，我们可以在`.zshrc`文件中进行自定义配置\n```bash\nvim ~/.zshrc\n```\n大家可以根据自己的使用习惯和喜好自行更改\n### 主题配置\n刚刚安装好的zsh可能是这样的：\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20191010-2.jpg)\n\n*ps：这里的终端配色使用了`Solarized`主题，可以参见本人另一篇博客：[macOS终端、vim美化(Solarized主题)](https://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/)*\n\n如果大家想换一个主题呢，可以前往oh-my-zsh的[官方Wiki](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)查看主题的样式和呈现效果，然后将`.zshrc`文件中`ZSH_THEME`的值修改为对应的主题即可，我这里选择的`af-magic`:\n```bash\nZSH_THEME=\"af-magic\"\n```\n效果如下：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20191010-3.jpg)\n\n### 补充\n从bash转换到zsh后可能导致原来配置的一些工作环境无法正常使用，这是因为`bash`的环境变量配置在了`.bash_profile`中，当使用`zsh`时，要在`.zshrc`中配置环境变量，直接将`.bash_profile`中的环境变量拷贝到`.zshrc`即可。另外zsh可以配合很多插件来提高工作效率，留给大家去探索啦！\n\n#### 参考博客：\n1. [让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南](https://sspai.com/post/55176)\n2. [Mac 终端 oh-my-zsh 配置](https://www.jianshu.com/p/64344229778a)\n3. [(Mac)在bash和zsh配置环境变量path的几种方法](https://www.jianshu.com/p/020f3d02f538)\n\n\n\n\n\n\n\n","source":"_posts/Environment/zsh_for_mac.md","raw":"---\ntitle: Mac终端oh-my-zsh配置\ndate: 2019-10-10 15:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20191010-1.jpg\nsummary: Mac终端oh-my-zsh配置\ncategories: 分享\ntags:\n  - macOS\n  - 终端美化\n---\n\n## bash到zsh\n在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新之后，macOS的默认shell也从`bash`变成了`zsh`。\n\n*PS：新版本macOS为我们带来了随航功能，可以将iPad变成mac的另一块屏幕，不过需要注意：随航功能只适用于能够使用Apple pencil的iPad以及2016年之后发布的mac产品，笔者手里的2015款 MacBook Pro只能看着眼馋了。*\n\n## oh-my-zsh\nzsh本身功能强大，但是对于普通用户来说不太友好，但是伟大的程序猿无处不在，国外一名程序猿就开发了一款能够让大家快速上手`zsh`的项目：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)，借助该项目，只需要极为简单的安装配置，就可以享用`zsh`了\n\n### 安装zsh\nmacOS Catalina中默认安装了`zsh`，如果你使用的macOS的其他版本并且想使用`zsh`的话，可以利用`homebrew`安装\n1. 查看已安装的shell\n```bash\ncat /etc/shells\n\n    /bin/bash\n    /bin/csh\n    /bin/dash\n    /bin/ksh\n    /bin/sh\n    /bin/tcsh\n```\n\n2. 使用homebrew安装zsh\n```bash\nbrew install zsh\n```\n3. 切换为zsh\n```bash\nchsh -s /bin/zsh\n```\n4. 重启终端即可使用zsh\n\n### 安装 oh-my-zsh\n打开终端执行以下命令：\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n在执行该命令时，可能会遇到以下错误：\n```bash\nxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\nError: git clone of oh-my-zsh repo failed\n```\n可以执行以下命令之后，再执行一次安装命令(时间可能有点久T_T))：\n```bash\nxcode-select --install\n```\n当看到`oh my zsh`的标志，就代表安装成功了\n\n## zsh配置\n安装好oh-my-zsh，我们可以在`.zshrc`文件中进行自定义配置\n```bash\nvim ~/.zshrc\n```\n大家可以根据自己的使用习惯和喜好自行更改\n### 主题配置\n刚刚安装好的zsh可能是这样的：\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20191010-2.jpg)\n\n*ps：这里的终端配色使用了`Solarized`主题，可以参见本人另一篇博客：[macOS终端、vim美化(Solarized主题)](https://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/)*\n\n如果大家想换一个主题呢，可以前往oh-my-zsh的[官方Wiki](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)查看主题的样式和呈现效果，然后将`.zshrc`文件中`ZSH_THEME`的值修改为对应的主题即可，我这里选择的`af-magic`:\n```bash\nZSH_THEME=\"af-magic\"\n```\n效果如下：\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20191010-3.jpg)\n\n### 补充\n从bash转换到zsh后可能导致原来配置的一些工作环境无法正常使用，这是因为`bash`的环境变量配置在了`.bash_profile`中，当使用`zsh`时，要在`.zshrc`中配置环境变量，直接将`.bash_profile`中的环境变量拷贝到`.zshrc`即可。另外zsh可以配合很多插件来提高工作效率，留给大家去探索啦！\n\n#### 参考博客：\n1. [让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南](https://sspai.com/post/55176)\n2. [Mac 终端 oh-my-zsh 配置](https://www.jianshu.com/p/64344229778a)\n3. [(Mac)在bash和zsh配置环境变量path的几种方法](https://www.jianshu.com/p/020f3d02f538)\n\n\n\n\n\n\n\n","slug":"Environment/zsh_for_mac","published":1,"updated":"2019-10-18T02:27:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgo000dmetfqemqv8n5","content":"<h2 id=\"bash到zsh\"><a href=\"#bash到zsh\" class=\"headerlink\" title=\"bash到zsh\"></a>bash到zsh</h2><p>在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新之后，macOS的默认shell也从<code>bash</code>变成了<code>zsh</code>。</p>\n<p><em>PS：新版本macOS为我们带来了随航功能，可以将iPad变成mac的另一块屏幕，不过需要注意：随航功能只适用于能够使用Apple pencil的iPad以及2016年之后发布的mac产品，笔者手里的2015款 MacBook Pro只能看着眼馋了。</em></p>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h2><p>zsh本身功能强大，但是对于普通用户来说不太友好，但是伟大的程序猿无处不在，国外一名程序猿就开发了一款能够让大家快速上手<code>zsh</code>的项目：<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a>，借助该项目，只需要极为简单的安装配置，就可以享用<code>zsh</code>了</p>\n<h3 id=\"安装zsh\"><a href=\"#安装zsh\" class=\"headerlink\" title=\"安装zsh\"></a>安装zsh</h3><p>macOS Catalina中默认安装了<code>zsh</code>，如果你使用的macOS的其他版本并且想使用<code>zsh</code>的话，可以利用<code>homebrew</code>安装</p>\n<ol>\n<li><p>查看已安装的shell</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/shells\n\n /bin/bash\n /bin/csh\n /bin/dash\n /bin/ksh\n /bin/sh\n /bin/tcsh</code></pre>\n</li>\n<li><p>使用homebrew安装zsh</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> zsh</code></pre>\n</li>\n<li><p>切换为zsh</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">chsh -s /bin/zsh</code></pre>\n</li>\n<li><p>重启终端即可使用zsh</p>\n</li>\n</ol>\n<h3 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h3><p>打开终端执行以下命令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">sh -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<p>在执行该命令时，可能会遇到以下错误：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">xcrun: error: invalid active developer path <span class=\"token punctuation\">(</span>/Library/Developer/CommandLineTools<span class=\"token punctuation\">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\nError: <span class=\"token function\">git</span> clone of oh-my-zsh repo failed</code></pre>\n<p>可以执行以下命令之后，再执行一次安装命令(时间可能有点久T_T))：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">xcode-select --install</code></pre>\n<p>当看到<code>oh my zsh</code>的标志，就代表安装成功了</p>\n<h2 id=\"zsh配置\"><a href=\"#zsh配置\" class=\"headerlink\" title=\"zsh配置\"></a>zsh配置</h2><p>安装好oh-my-zsh，我们可以在<code>.zshrc</code>文件中进行自定义配置</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">vim ~/.zshrc</code></pre>\n<p>大家可以根据自己的使用习惯和喜好自行更改</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>刚刚安装好的zsh可能是这样的：</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20191010-2.jpg\" alt></p>\n<p><em>ps：这里的终端配色使用了<code>Solarized</code>主题，可以参见本人另一篇博客：<a href=\"https://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/\">macOS终端、vim美化(Solarized主题)</a></em></p>\n<p>如果大家想换一个主题呢，可以前往oh-my-zsh的<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">官方Wiki</a>查看主题的样式和呈现效果，然后将<code>.zshrc</code>文件中<code>ZSH_THEME</code>的值修改为对应的主题即可，我这里选择的<code>af-magic</code>:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">ZSH_THEME<span class=\"token operator\">=</span><span class=\"token string\">\"af-magic\"</span></code></pre>\n<p>效果如下：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20191010-3.jpg\" alt></p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>从bash转换到zsh后可能导致原来配置的一些工作环境无法正常使用，这是因为<code>bash</code>的环境变量配置在了<code>.bash_profile</code>中，当使用<code>zsh</code>时，要在<code>.zshrc</code>中配置环境变量，直接将<code>.bash_profile</code>中的环境变量拷贝到<code>.zshrc</code>即可。另外zsh可以配合很多插件来提高工作效率，留给大家去探索啦！</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><ol>\n<li><a href=\"https://sspai.com/post/55176\" target=\"_blank\" rel=\"noopener\">让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南</a></li>\n<li><a href=\"https://www.jianshu.com/p/64344229778a\" target=\"_blank\" rel=\"noopener\">Mac 终端 oh-my-zsh 配置</a></li>\n<li><a href=\"https://www.jianshu.com/p/020f3d02f538\" target=\"_blank\" rel=\"noopener\">(Mac)在bash和zsh配置环境变量path的几种方法</a></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"bash到zsh\"><a href=\"#bash到zsh\" class=\"headerlink\" title=\"bash到zsh\"></a>bash到zsh</h2><p>在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新之后，macOS的默认shell也从<code>bash</code>变成了<code>zsh</code>。</p>\n<p><em>PS：新版本macOS为我们带来了随航功能，可以将iPad变成mac的另一块屏幕，不过需要注意：随航功能只适用于能够使用Apple pencil的iPad以及2016年之后发布的mac产品，笔者手里的2015款 MacBook Pro只能看着眼馋了。</em></p>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h2><p>zsh本身功能强大，但是对于普通用户来说不太友好，但是伟大的程序猿无处不在，国外一名程序猿就开发了一款能够让大家快速上手<code>zsh</code>的项目：<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a>，借助该项目，只需要极为简单的安装配置，就可以享用<code>zsh</code>了</p>\n<h3 id=\"安装zsh\"><a href=\"#安装zsh\" class=\"headerlink\" title=\"安装zsh\"></a>安装zsh</h3><p>macOS Catalina中默认安装了<code>zsh</code>，如果你使用的macOS的其他版本并且想使用<code>zsh</code>的话，可以利用<code>homebrew</code>安装</p>\n<ol>\n<li><p>查看已安装的shell</p>\n<pre><code class=\"bash\">cat /etc/shells\n\n /bin/bash\n /bin/csh\n /bin/dash\n /bin/ksh\n /bin/sh\n /bin/tcsh</code></pre>\n</li>\n<li><p>使用homebrew安装zsh</p>\n<pre><code class=\"bash\">brew install zsh</code></pre>\n</li>\n<li><p>切换为zsh</p>\n<pre><code class=\"bash\">chsh -s /bin/zsh</code></pre>\n</li>\n<li><p>重启终端即可使用zsh</p>\n</li>\n</ol>\n<h3 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h3><p>打开终端执行以下命令：</p>\n<pre><code class=\"bash\">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></pre>\n<p>在执行该命令时，可能会遇到以下错误：</p>\n<pre><code class=\"bash\">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\nError: git clone of oh-my-zsh repo failed</code></pre>\n<p>可以执行以下命令之后，再执行一次安装命令(时间可能有点久T_T))：</p>\n<pre><code class=\"bash\">xcode-select --install</code></pre>\n<p>当看到<code>oh my zsh</code>的标志，就代表安装成功了</p>\n<h2 id=\"zsh配置\"><a href=\"#zsh配置\" class=\"headerlink\" title=\"zsh配置\"></a>zsh配置</h2><p>安装好oh-my-zsh，我们可以在<code>.zshrc</code>文件中进行自定义配置</p>\n<pre><code class=\"bash\">vim ~/.zshrc</code></pre>\n<p>大家可以根据自己的使用习惯和喜好自行更改</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>刚刚安装好的zsh可能是这样的：</p>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20191010-2.jpg\" alt></p>\n<p><em>ps：这里的终端配色使用了<code>Solarized</code>主题，可以参见本人另一篇博客：<a href=\"https://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/\">macOS终端、vim美化(Solarized主题)</a></em></p>\n<p>如果大家想换一个主题呢，可以前往oh-my-zsh的<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">官方Wiki</a>查看主题的样式和呈现效果，然后将<code>.zshrc</code>文件中<code>ZSH_THEME</code>的值修改为对应的主题即可，我这里选择的<code>af-magic</code>:</p>\n<pre><code class=\"bash\">ZSH_THEME=&quot;af-magic&quot;</code></pre>\n<p>效果如下：<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20191010-3.jpg\" alt></p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>从bash转换到zsh后可能导致原来配置的一些工作环境无法正常使用，这是因为<code>bash</code>的环境变量配置在了<code>.bash_profile</code>中，当使用<code>zsh</code>时，要在<code>.zshrc</code>中配置环境变量，直接将<code>.bash_profile</code>中的环境变量拷贝到<code>.zshrc</code>即可。另外zsh可以配合很多插件来提高工作效率，留给大家去探索啦！</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><ol>\n<li><a href=\"https://sspai.com/post/55176\" target=\"_blank\" rel=\"noopener\">让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南</a></li>\n<li><a href=\"https://www.jianshu.com/p/64344229778a\" target=\"_blank\" rel=\"noopener\">Mac 终端 oh-my-zsh 配置</a></li>\n<li><a href=\"https://www.jianshu.com/p/020f3d02f538\" target=\"_blank\" rel=\"noopener\">(Mac)在bash和zsh配置环境变量path的几种方法</a></li>\n</ol>\n"},{"title":"LeetCode刷题：118.Pascal's Triangle","date":"2019-02-24T05:03:00.000Z","_content":"#### [118\\. Pascal's Triangle](https://leetcode-cn.com/problems/pascals-triangle/)\nGiven a non-negative integer *numRows*, generate the first *numRows* of Pascal's triangle.\n![In Pascal's triangle, each number is the sum of the two numbers directly above it.](http://upload-images.jianshu.io/upload_images/14484228-f1bcb06c89999105.gif?imageMogr2/auto-orient/strip)\n\n**Example:**\n\n**Input:** `5`\n\n**Output:**\n```\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n```\n##### 解题思路：\n根据杨辉三角的特点创建容器，并将每行开头和结尾赋值为1，当行数大于2时，根据杨辉三角的运算规则进行运算\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<vector<int>> res(numRows, vector<int>());\n        for (int i = 0; i < numRows; ++i)\n        {\n            res[i].resize(i + 1);  //确定每行数字的个数\n            //每行开头和结尾都为1\n            res[i][0] = 1;\n            res[i][i] = 1;\n        }\n        if (numRows > 2)\n        {\n            for (int i = 2; i < numRows; ++i) \n            {\n                for (int j = 1; j < i; ++j) \n                    res[i][j] = res[i-1][j] + res[i-1][j-1];\n            }\n        }\n\t    return res;\n    }\n};\n```","source":"_posts/LeetCode/118_pascals_triangle.md","raw":"---\ntitle: LeetCode刷题：118.Pascal's Triangle\ndate: 2019-02-24 13:03:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [118\\. Pascal's Triangle](https://leetcode-cn.com/problems/pascals-triangle/)\nGiven a non-negative integer *numRows*, generate the first *numRows* of Pascal's triangle.\n![In Pascal's triangle, each number is the sum of the two numbers directly above it.](http://upload-images.jianshu.io/upload_images/14484228-f1bcb06c89999105.gif?imageMogr2/auto-orient/strip)\n\n**Example:**\n\n**Input:** `5`\n\n**Output:**\n```\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n```\n##### 解题思路：\n根据杨辉三角的特点创建容器，并将每行开头和结尾赋值为1，当行数大于2时，根据杨辉三角的运算规则进行运算\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<vector<int>> res(numRows, vector<int>());\n        for (int i = 0; i < numRows; ++i)\n        {\n            res[i].resize(i + 1);  //确定每行数字的个数\n            //每行开头和结尾都为1\n            res[i][0] = 1;\n            res[i][i] = 1;\n        }\n        if (numRows > 2)\n        {\n            for (int i = 2; i < numRows; ++i) \n            {\n                for (int j = 1; j < i; ++j) \n                    res[i][j] = res[i-1][j] + res[i-1][j-1];\n            }\n        }\n\t    return res;\n    }\n};\n```","slug":"LeetCode/118_pascals_triangle","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgr000emetfbb79e0jm","content":"<h4 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118. Pascal’s Triangle\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\" target=\"_blank\" rel=\"noopener\">118. Pascal’s Triangle</a></h4><p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.<br><img src=\"http://upload-images.jianshu.io/upload_images/14484228-f1bcb06c89999105.gif?imageMogr2/auto-orient/strip\" alt=\"In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.\"></p>\n<p><strong>Example:</strong></p>\n<p><strong>Input:</strong> <code>5</code></p>\n<p><strong>Output:</strong></p>\n<pre><code>[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>根据杨辉三角的特点创建容器，并将每行开头和结尾赋值为1，当行数大于2时，根据杨辉三角的运算规则进行运算</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>numRows<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numRows<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//确定每行数字的个数</span>\n            <span class=\"token comment\" spellcheck=\"true\">//每行开头和结尾都为1</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numRows <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numRows<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> \n                    res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118. Pascal’s Triangle\"></a><a href=\"https://leetcode-cn.com/problems/pascals-triangle/\" target=\"_blank\" rel=\"noopener\">118. Pascal’s Triangle</a></h4><p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.<br><img src=\"http://upload-images.jianshu.io/upload_images/14484228-f1bcb06c89999105.gif?imageMogr2/auto-orient/strip\" alt=\"In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.\"></p>\n<p><strong>Example:</strong></p>\n<p><strong>Input:</strong> <code>5</code></p>\n<p><strong>Output:</strong></p>\n<pre><code>[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>根据杨辉三角的特点创建容器，并将每行开头和结尾赋值为1，当行数大于2时，根据杨辉三角的运算规则进行运算</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; res(numRows, vector&lt;int&gt;());\n        for (int i = 0; i &lt; numRows; ++i)\n        {\n            res[i].resize(i + 1);  //确定每行数字的个数\n            //每行开头和结尾都为1\n            res[i][0] = 1;\n            res[i][i] = 1;\n        }\n        if (numRows &gt; 2)\n        {\n            for (int i = 2; i &lt; numRows; ++i) \n            {\n                for (int j = 1; j &lt; i; ++j) \n                    res[i][j] = res[i-1][j] + res[i-1][j-1];\n            }\n        }\n        return res;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：136.Single Number","date":"2019-02-24T05:04:00.000Z","_content":"#### [136\\. Single Number](https://leetcode-cn.com/problems/single-number/)\nGiven a **non-empty** array of integers, every element appears *twice* except for one. Find that single one.\n\n**Note:**\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n**Example 1:**\n>**Input:** `[2,2,1]`\n>\n>**Output:** `1\n\n**Example 2:**\n>**Input:** `[4,1,2,1,2]`\n>\n>**Output:** `4`\n##### 解题思路：\n题目要求算法的时间复杂度为O(n),空间复杂度为O(1)；\n将容器的所有的数字进行异或运算，由于相同两个数字异或结果为0，所以所有元素异或的结果便为所寻单独的数字。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int result = 0;\n        for(auto ibeg = nums.begin(); ibeg != nums.end(); ++ibeg)\n        {\n            result ^= *ibeg;  //所有数字进行异或运算 \n        }\n        return result;\n    }\n};\n```","source":"_posts/LeetCode/136_single_number.md","raw":"---\ntitle: LeetCode刷题：136.Single Number\ndate: 2019-02-24 13:04:00\ncategories: LeetCode\ntags:\n  - 位运算\n---\n#### [136\\. Single Number](https://leetcode-cn.com/problems/single-number/)\nGiven a **non-empty** array of integers, every element appears *twice* except for one. Find that single one.\n\n**Note:**\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n**Example 1:**\n>**Input:** `[2,2,1]`\n>\n>**Output:** `1\n\n**Example 2:**\n>**Input:** `[4,1,2,1,2]`\n>\n>**Output:** `4`\n##### 解题思路：\n题目要求算法的时间复杂度为O(n),空间复杂度为O(1)；\n将容器的所有的数字进行异或运算，由于相同两个数字异或结果为0，所以所有元素异或的结果便为所寻单独的数字。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int result = 0;\n        for(auto ibeg = nums.begin(); ibeg != nums.end(); ++ibeg)\n        {\n            result ^= *ibeg;  //所有数字进行异或运算 \n        }\n        return result;\n    }\n};\n```","slug":"LeetCode/136_single_number","published":1,"updated":"2019-04-01T11:34:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgt000imetfwnoqh6kn","content":"<h4 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136. Single Number\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">136. Single Number</a></h4><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>\n<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[2,2,1]</code></p>\n<p><strong>Output:</strong> `1</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[4,1,2,1,2]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>题目要求算法的时间复杂度为O(n),空间复杂度为O(1)；<br>将容器的所有的数字进行异或运算，由于相同两个数字异或结果为0，所以所有元素异或的结果便为所寻单独的数字。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ibeg <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ibeg <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ibeg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ibeg<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//所有数字进行异或运算 </span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136. Single Number\"></a><a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">136. Single Number</a></h4><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>\n<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[2,2,1]</code></p>\n<p><strong>Output:</strong> `1</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[4,1,2,1,2]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>题目要求算法的时间复杂度为O(n),空间复杂度为O(1)；<br>将容器的所有的数字进行异或运算，由于相同两个数字异或结果为0，所以所有元素异或的结果便为所寻单独的数字。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int result = 0;\n        for(auto ibeg = nums.begin(); ibeg != nums.end(); ++ibeg)\n        {\n            result ^= *ibeg;  //所有数字进行异或运算 \n        }\n        return result;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：182.Duplicate Emails","date":"2019-02-24T05:05:00.000Z","_content":"#### [182\\. Duplicate Emails](https://leetcode-cn.com/problems/duplicate-emails/)\n\nSQL架构\n```sql\nCreate table If Not Exists Person (Id int, Email varchar(255))\nTruncate table Person\ninsert into Person (Id, Email) values ('1', 'a@b.com')\ninsert into Person (Id, Email) values ('2', 'c@d.com')\ninsert into Person (Id, Email) values ('3', 'a@b.com')\n```\nWrite a SQL query to find all duplicate emails in a table named `Person`.\n\n**Example:**\n\n| Id | Email   |\n|----|---------|\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n\nFor example, your query should return the following for the above table:\n\n| Email   |\n|---------|\n| a@b.com |\n\n**Note**: All emails are in lowercase.\n##### 解题思路：\n使用 GROUP BY 和 HAVING 条件：向 GROUP BY 添加条件的一种更常用的方法是使用 HAVING 子句，该子句更为简单高效。\nGROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。\n##### 解答：\n```sql\nselect Email from Person\ngroup by Email having count(Email) > 1;\n```","source":"_posts/LeetCode/182_duplicate_emails.md","raw":"---\ntitle: LeetCode刷题：182.Duplicate Emails\ndate: 2019-02-24 13:05:00\ncategories: LeetCode\ntags:\n  - 数据库\n---\n#### [182\\. Duplicate Emails](https://leetcode-cn.com/problems/duplicate-emails/)\n\nSQL架构\n```sql\nCreate table If Not Exists Person (Id int, Email varchar(255))\nTruncate table Person\ninsert into Person (Id, Email) values ('1', 'a@b.com')\ninsert into Person (Id, Email) values ('2', 'c@d.com')\ninsert into Person (Id, Email) values ('3', 'a@b.com')\n```\nWrite a SQL query to find all duplicate emails in a table named `Person`.\n\n**Example:**\n\n| Id | Email   |\n|----|---------|\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n\nFor example, your query should return the following for the above table:\n\n| Email   |\n|---------|\n| a@b.com |\n\n**Note**: All emails are in lowercase.\n##### 解题思路：\n使用 GROUP BY 和 HAVING 条件：向 GROUP BY 添加条件的一种更常用的方法是使用 HAVING 子句，该子句更为简单高效。\nGROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。\n##### 解答：\n```sql\nselect Email from Person\ngroup by Email having count(Email) > 1;\n```","slug":"LeetCode/182_duplicate_emails","published":1,"updated":"2019-04-01T11:38:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgu000lmetfxjdi6fi5","content":"<h4 id=\"182-Duplicate-Emails\"><a href=\"#182-Duplicate-Emails\" class=\"headerlink\" title=\"182. Duplicate Emails\"></a><a href=\"https://leetcode-cn.com/problems/duplicate-emails/\" target=\"_blank\" rel=\"noopener\">182. Duplicate Emails</a></h4><p>SQL架构</p>\n<pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Person <span class=\"token punctuation\">(</span>Id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Email <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Person\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Person <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> Email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a@b.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Person <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> Email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c@d.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Person <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> Email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a@b.com'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>\n<p><strong>Example:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Email</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a href=\"mailto:c@d.com\" target=\"_blank\" rel=\"noopener\">c@d.com</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n</tbody></table>\n<p>For example, your query should return the following for the above table:</p>\n<table>\n<thead>\n<tr>\n<th>Email</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n</tbody></table>\n<p><strong>Note</strong>: All emails are in lowercase.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>使用 GROUP BY 和 HAVING 条件：向 GROUP BY 添加条件的一种更常用的方法是使用 HAVING 子句，该子句更为简单高效。<br>GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> Email <span class=\"token keyword\">from</span> Person\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> Email <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>Email<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"182-Duplicate-Emails\"><a href=\"#182-Duplicate-Emails\" class=\"headerlink\" title=\"182. Duplicate Emails\"></a><a href=\"https://leetcode-cn.com/problems/duplicate-emails/\" target=\"_blank\" rel=\"noopener\">182. Duplicate Emails</a></h4><p>SQL架构</p>\n<pre><code class=\"sql\">Create table If Not Exists Person (Id int, Email varchar(255))\nTruncate table Person\ninsert into Person (Id, Email) values (&#39;1&#39;, &#39;a@b.com&#39;)\ninsert into Person (Id, Email) values (&#39;2&#39;, &#39;c@d.com&#39;)\ninsert into Person (Id, Email) values (&#39;3&#39;, &#39;a@b.com&#39;)</code></pre>\n<p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>\n<p><strong>Example:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Email</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a href=\"mailto:c@d.com\" target=\"_blank\" rel=\"noopener\">c@d.com</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n</tbody></table>\n<p>For example, your query should return the following for the above table:</p>\n<table>\n<thead>\n<tr>\n<th>Email</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"mailto:a@b.com\" target=\"_blank\" rel=\"noopener\">a@b.com</a></td>\n</tr>\n</tbody></table>\n<p><strong>Note</strong>: All emails are in lowercase.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>使用 GROUP BY 和 HAVING 条件：向 GROUP BY 添加条件的一种更常用的方法是使用 HAVING 子句，该子句更为简单高效。<br>GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"sql\">select Email from Person\ngroup by Email having count(Email) &gt; 1;</code></pre>\n"},{"title":"LeetCode刷题：1.Two Sum","date":"2019-02-24T05:01:00.000Z","_content":"#### [1\\. Two Sum](https://leetcode-cn.com/problems/two-sum/)\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target.\nYou may assume that each input would have **exactly** one solution, and you may not use the same element twice.\n\n**Example:**\n\n>Given nums = [2, 7, 11, 15], target = 9,\n>\n>Because nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n##### 解题思路：\n对数组进行遍历，将符合条件的数组元素返回；\n另有高效率**遍历哈希表法**，待研究。\n##### 解答：\n```cpp\n//暴力法：遍历整个数组，耗时较长（72ms）\nclass Solution {\npublic:\n\tvector<int> twoSum(vector<int>& nums, int target) \n\t{\n\t\tvector<int> result;\n        int size = nums.size();\n\t\tfor (int i = 0; i < size; i++)\n\t\t{\n            int complement = target - nums[i];\n\t\t\tfor (int j = i + 1; j < size; j++)\n\t\t\t{\n\t\t\t\tif (nums[j] == complement)\n\t\t\t\t{\n\t\t\t\t\tresult.push_back(i);\n\t\t\t\t\tresult.push_back(j);\n\t\t\t\t\treturn result;\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n};\n```\n","source":"_posts/LeetCode/1_two_sum.md","raw":"---\ntitle: LeetCode刷题：1.Two Sum\ndate: 2019-02-24 13:01:00\ncategories: LeetCode\ntags:\n  - 数组\n  - 哈希表\n---\n#### [1\\. Two Sum](https://leetcode-cn.com/problems/two-sum/)\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target.\nYou may assume that each input would have **exactly** one solution, and you may not use the same element twice.\n\n**Example:**\n\n>Given nums = [2, 7, 11, 15], target = 9,\n>\n>Because nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n##### 解题思路：\n对数组进行遍历，将符合条件的数组元素返回；\n另有高效率**遍历哈希表法**，待研究。\n##### 解答：\n```cpp\n//暴力法：遍历整个数组，耗时较长（72ms）\nclass Solution {\npublic:\n\tvector<int> twoSum(vector<int>& nums, int target) \n\t{\n\t\tvector<int> result;\n        int size = nums.size();\n\t\tfor (int i = 0; i < size; i++)\n\t\t{\n            int complement = target - nums[i];\n\t\t\tfor (int j = i + 1; j < size; j++)\n\t\t\t{\n\t\t\t\tif (nums[j] == complement)\n\t\t\t\t{\n\t\t\t\t\tresult.push_back(i);\n\t\t\t\t\tresult.push_back(j);\n\t\t\t\t\treturn result;\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n};\n```\n","slug":"LeetCode/1_two_sum","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgw000qmetfjddezmw5","content":"<h4 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1. Two Sum\"></a><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></h4><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.<br>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>对数组进行遍历，将符合条件的数组元素返回；<br>另有高效率<strong>遍历哈希表法</strong>，待研究。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//暴力法：遍历整个数组，耗时较长（72ms）</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> complement <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> complement<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>    \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1. Two Sum\"></a><a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></h4><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.<br>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>对数组进行遍历，将符合条件的数组元素返回；<br>另有高效率<strong>遍历哈希表法</strong>，待研究。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//暴力法：遍历整个数组，耗时较长（72ms）\nclass Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) \n    {\n        vector&lt;int&gt; result;\n        int size = nums.size();\n        for (int i = 0; i &lt; size; i++)\n        {\n            int complement = target - nums[i];\n            for (int j = i + 1; j &lt; size; j++)\n            {\n                if (nums[j] == complement)\n                {\n                    result.push_back(i);\n                    result.push_back(j);\n                    return result;\n                }    \n            }\n        }\n        return result;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：201.Bitwise AND of Numbers Range","date":"2019-02-24T05:07:00.000Z","_content":"#### [201\\. Bitwise AND of Numbers Range](https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/)\nGiven a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\n\n**Example 1:**\n>**Input:** `[5,7]`\n>\n>**Output:** `4`\n\n**Example 2:**\n>**Input:** `[0,1]`\n>\n>**Output:** `0`\n\n##### 解题思路：\n通过观察可以知道5的二进制为**1**01，6的二进制为**1**10，7的二进制为**1**11，输出4的二进制为**1**00，可以发现，只要找到二进制的左边公共部分即可。\n可以先建立一个32位都是1的mask，然后每次左移一位，比较m和n是否相同，不同再继续左移一位，直至相同，然后把m和mask相与即得最终结果。\n##### 解答：\n```cpp\n//方法1\nclass Solution {\npublic:\n\tint rangeBitwiseAnd(int m, int n) {\n\t\tunsigned int mask = UINT_MAX;\n\t\twhile ((m & mask) != (n & mask)) {\n\t\t\tmask <<= 1;\n\t\t}\n\t\treturn mask & m;\n\t}\n};\n//方法2\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        int cnt = 0;\n        while(m!= n){\n            m>>=1;\n            n>>=1;\n            ++cnt;\n        }\n        return m<<cnt;\n    }\n};\n```","source":"_posts/LeetCode/201_bitwise_and_of_numbers_range.md","raw":"---\ntitle: LeetCode刷题：201.Bitwise AND of Numbers Range\ndate: 2019-02-24 13:07:00\ncategories: LeetCode\ntags:\n  - 位运算\n---\n#### [201\\. Bitwise AND of Numbers Range](https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/)\nGiven a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\n\n**Example 1:**\n>**Input:** `[5,7]`\n>\n>**Output:** `4`\n\n**Example 2:**\n>**Input:** `[0,1]`\n>\n>**Output:** `0`\n\n##### 解题思路：\n通过观察可以知道5的二进制为**1**01，6的二进制为**1**10，7的二进制为**1**11，输出4的二进制为**1**00，可以发现，只要找到二进制的左边公共部分即可。\n可以先建立一个32位都是1的mask，然后每次左移一位，比较m和n是否相同，不同再继续左移一位，直至相同，然后把m和mask相与即得最终结果。\n##### 解答：\n```cpp\n//方法1\nclass Solution {\npublic:\n\tint rangeBitwiseAnd(int m, int n) {\n\t\tunsigned int mask = UINT_MAX;\n\t\twhile ((m & mask) != (n & mask)) {\n\t\t\tmask <<= 1;\n\t\t}\n\t\treturn mask & m;\n\t}\n};\n//方法2\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        int cnt = 0;\n        while(m!= n){\n            m>>=1;\n            n>>=1;\n            ++cnt;\n        }\n        return m<<cnt;\n    }\n};\n```","slug":"LeetCode/201_bitwise_and_of_numbers_range","published":1,"updated":"2019-04-01T11:43:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgx000smetfnta83ywo","content":"<h4 id=\"201-Bitwise-AND-of-Numbers-Range\"><a href=\"#201-Bitwise-AND-of-Numbers-Range\" class=\"headerlink\" title=\"201. Bitwise AND of Numbers Range\"></a><a href=\"https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/\" target=\"_blank\" rel=\"noopener\">201. Bitwise AND of Numbers Range</a></h4><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[5,7]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,1]</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过观察可以知道5的二进制为<strong>1</strong>01，6的二进制为<strong>1</strong>10，7的二进制为<strong>1</strong>11，输出4的二进制为<strong>1</strong>00，可以发现，只要找到二进制的左边公共部分即可。<br>可以先建立一个32位都是1的mask，然后每次左移一位，比较m和n是否相同，不同再继续左移一位，直至相同，然后把m和mask相与即得最终结果。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//方法1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rangeBitwiseAnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> UINT_MAX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mask <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> mask <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法2</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rangeBitwiseAnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">!=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            n<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> m<span class=\"token operator\">&lt;&lt;</span>cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"201-Bitwise-AND-of-Numbers-Range\"><a href=\"#201-Bitwise-AND-of-Numbers-Range\" class=\"headerlink\" title=\"201. Bitwise AND of Numbers Range\"></a><a href=\"https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/\" target=\"_blank\" rel=\"noopener\">201. Bitwise AND of Numbers Range</a></h4><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[5,7]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,1]</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过观察可以知道5的二进制为<strong>1</strong>01，6的二进制为<strong>1</strong>10，7的二进制为<strong>1</strong>11，输出4的二进制为<strong>1</strong>00，可以发现，只要找到二进制的左边公共部分即可。<br>可以先建立一个32位都是1的mask，然后每次左移一位，比较m和n是否相同，不同再继续左移一位，直至相同，然后把m和mask相与即得最终结果。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//方法1\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        unsigned int mask = UINT_MAX;\n        while ((m &amp; mask) != (n &amp; mask)) {\n            mask &lt;&lt;= 1;\n        }\n        return mask &amp; m;\n    }\n};\n//方法2\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        int cnt = 0;\n        while(m!= n){\n            m&gt;&gt;=1;\n            n&gt;&gt;=1;\n            ++cnt;\n        }\n        return m&lt;&lt;cnt;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：231.Power of Two","date":"2019-02-24T05:08:00.000Z","_content":"#### [231\\. Power of Two](https://leetcode-cn.com/problems/power-of-two/)\nGiven an integer, write a function to determine if it is a power of two.\n\n**Example 1:**\n>**Input:** `1`\n>\n>**Output:** `true `\n>\n>**Explanation:** 2<sup>0</sup> = 1\n\n**Example 2:**\n>**Input:** `16`\n>\n>**Output:** `true`\n>\n>**Explanation:** 2<sup>4</sup> = 16\n\n**Example 3:**\n>**Input:** `218`\n>\n>**Output:** `false`\n\n##### 解题思路：\n通过观察可知，如果一个数字为2的幂，那么这个数字中的二进制数中的最高位必为1，其它都为0，那么令其减1，最高位变为0，其它位变为1。例如2<sup>3</sup>=8,其二进制形式为1000，那么8 - 1 = 7，7的二进制形式为0111，1000 & 0111 = 0；我们可以通过这个性质来判断该数字是否为2的幂。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return (n > 0) && (! (n & (n - 1) ) );\n    }\n};\n```","source":"_posts/LeetCode/231_power_of_two.md","raw":"---\ntitle: LeetCode刷题：231.Power of Two\ndate: 2019-02-24 13:08:00\ncategories: LeetCode\ntags:\n  - 位运算\n  - 数学\n---\n#### [231\\. Power of Two](https://leetcode-cn.com/problems/power-of-two/)\nGiven an integer, write a function to determine if it is a power of two.\n\n**Example 1:**\n>**Input:** `1`\n>\n>**Output:** `true `\n>\n>**Explanation:** 2<sup>0</sup> = 1\n\n**Example 2:**\n>**Input:** `16`\n>\n>**Output:** `true`\n>\n>**Explanation:** 2<sup>4</sup> = 16\n\n**Example 3:**\n>**Input:** `218`\n>\n>**Output:** `false`\n\n##### 解题思路：\n通过观察可知，如果一个数字为2的幂，那么这个数字中的二进制数中的最高位必为1，其它都为0，那么令其减1，最高位变为0，其它位变为1。例如2<sup>3</sup>=8,其二进制形式为1000，那么8 - 1 = 7，7的二进制形式为0111，1000 & 0111 = 0；我们可以通过这个性质来判断该数字是否为2的幂。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return (n > 0) && (! (n & (n - 1) ) );\n    }\n};\n```","slug":"LeetCode/231_power_of_two","published":1,"updated":"2019-06-06T08:31:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurgz000wmetfauzyh17k","content":"<h4 id=\"231-Power-of-Two\"><a href=\"#231-Power-of-Two\" class=\"headerlink\" title=\"231. Power of Two\"></a><a href=\"https://leetcode-cn.com/problems/power-of-two/\" target=\"_blank\" rel=\"noopener\">231. Power of Two</a></h4><p>Given an integer, write a function to determine if it is a power of two.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>1</code></p>\n<p><strong>Output:</strong> <code>true</code></p>\n<p><strong>Explanation:</strong> 2<sup>0</sup> = 1</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>16</code></p>\n<p><strong>Output:</strong> <code>true</code></p>\n<p><strong>Explanation:</strong> 2<sup>4</sup> = 16</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>218</code></p>\n<p><strong>Output:</strong> <code>false</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过观察可知，如果一个数字为2的幂，那么这个数字中的二进制数中的最高位必为1，其它都为0，那么令其减1，最高位变为0，其它位变为1。例如2<sup>3</sup>=8,其二进制形式为1000，那么8 - 1 = 7，7的二进制形式为0111，1000 &amp; 0111 = 0；我们可以通过这个性质来判断该数字是否为2的幂。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"231-Power-of-Two\"><a href=\"#231-Power-of-Two\" class=\"headerlink\" title=\"231. Power of Two\"></a><a href=\"https://leetcode-cn.com/problems/power-of-two/\" target=\"_blank\" rel=\"noopener\">231. Power of Two</a></h4><p>Given an integer, write a function to determine if it is a power of two.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>1</code></p>\n<p><strong>Output:</strong> <code>true</code></p>\n<p><strong>Explanation:</strong> 2<sup>0</sup> = 1</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>16</code></p>\n<p><strong>Output:</strong> <code>true</code></p>\n<p><strong>Explanation:</strong> 2<sup>4</sup> = 16</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>218</code></p>\n<p><strong>Output:</strong> <code>false</code></p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过观察可知，如果一个数字为2的幂，那么这个数字中的二进制数中的最高位必为1，其它都为0，那么令其减1，最高位变为0，其它位变为1。例如2<sup>3</sup>=8,其二进制形式为1000，那么8 - 1 = 7，7的二进制形式为0111，1000 &amp; 0111 = 0；我们可以通过这个性质来判断该数字是否为2的幂。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return (n &gt; 0) &amp;&amp; (! (n &amp; (n - 1) ) );\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：268.Missing Number","date":"2019-02-24T05:09:00.000Z","_content":"#### [268\\. Missing Number](https://leetcode-cn.com/problems/missing-number/)\nGiven an array containing *n* distinct numbers taken from `0, 1, 2, ..., n`, find the one that is missing from the array.\n\n**Example 1:**\n>**Input:** `[3,0,1]`\n>\n>**Output:** `2`\n\n**Example 2:**\n>**Input:** `[9,6,4,2,3,5,7,0,1]`\n>\n>**Output:** `8`\n\n**Note**:\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\n##### 解题思路：\n要求时间复杂度为O(n)；\n+ 思路1： 采用和[136\\. Single Number](https://leetcode-cn.com/problems/single-number/)类似的思路，将容器中所有的数字和有序数列`1,2,3……,n`异或，如果容器中存在数字`x`，那么和有序数列中对应的`x`异或结果为零，最终得到的结果便为缺失的数字。\n+ 思路2：采用求和相减，若容器长度为`n`，利用求和公式计算`s1 = n * (n+1) / 2`，减去容器中数字的求和`s2`，则可得缺失的数字。\n##### 解答：\n```cpp\n//方法1：\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int result = 0;\n        int len = nums.size();\n        for(int i = 0; i < len; ++i)\n        {\n            result ^= (i+1) ^ nums[i];\n        }\n        return result;\n    }\n};\n//方法2：\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        int s1 = n * (n + 1) / 2;\n        int s2 = 0;\n        for(int i : nums)\n        {\n            s2 += i;\n        }\n        return s1 - s2;\n    }\n};\n```","source":"_posts/LeetCode/268_missing_number.md","raw":"---\ntitle: LeetCode刷题：268.Missing Number\ndate: 2019-02-24 13:09:00\ncategories: LeetCode\ntags:\n  - 位运算\n  - 数组\n  - 数学\n---\n#### [268\\. Missing Number](https://leetcode-cn.com/problems/missing-number/)\nGiven an array containing *n* distinct numbers taken from `0, 1, 2, ..., n`, find the one that is missing from the array.\n\n**Example 1:**\n>**Input:** `[3,0,1]`\n>\n>**Output:** `2`\n\n**Example 2:**\n>**Input:** `[9,6,4,2,3,5,7,0,1]`\n>\n>**Output:** `8`\n\n**Note**:\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\n##### 解题思路：\n要求时间复杂度为O(n)；\n+ 思路1： 采用和[136\\. Single Number](https://leetcode-cn.com/problems/single-number/)类似的思路，将容器中所有的数字和有序数列`1,2,3……,n`异或，如果容器中存在数字`x`，那么和有序数列中对应的`x`异或结果为零，最终得到的结果便为缺失的数字。\n+ 思路2：采用求和相减，若容器长度为`n`，利用求和公式计算`s1 = n * (n+1) / 2`，减去容器中数字的求和`s2`，则可得缺失的数字。\n##### 解答：\n```cpp\n//方法1：\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int result = 0;\n        int len = nums.size();\n        for(int i = 0; i < len; ++i)\n        {\n            result ^= (i+1) ^ nums[i];\n        }\n        return result;\n    }\n};\n//方法2：\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        int s1 = n * (n + 1) / 2;\n        int s2 = 0;\n        for(int i : nums)\n        {\n            s2 += i;\n        }\n        return s1 - s2;\n    }\n};\n```","slug":"LeetCode/268_missing_number","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurh1000zmetfgg0yov1d","content":"<h4 id=\"268-Missing-Number\"><a href=\"#268-Missing-Number\" class=\"headerlink\" title=\"268. Missing Number\"></a><a href=\"https://leetcode-cn.com/problems/missing-number/\" target=\"_blank\" rel=\"noopener\">268. Missing Number</a></h4><p>Given an array containing <em>n</em> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[3,0,1]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[9,6,4,2,3,5,7,0,1]</code></p>\n<p><strong>Output:</strong> <code>8</code></p>\n</blockquote>\n<p><strong>Note</strong>:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>要求时间复杂度为O(n)；</p>\n<ul>\n<li>思路1： 采用和<a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">136. Single Number</a>类似的思路，将容器中所有的数字和有序数列<code>1,2,3……,n</code>异或，如果容器中存在数字<code>x</code>，那么和有序数列中对应的<code>x</code>异或结果为零，最终得到的结果便为缺失的数字。</li>\n<li>思路2：采用求和相减，若容器长度为<code>n</code>，利用求和公式计算<code>s1 = n * (n+1) / 2</code>，减去容器中数字的求和<code>s2</code>，则可得缺失的数字。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//方法1：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">missingNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          result <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法2：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">missingNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> s1 <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> s2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          s2 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> s1 <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"268-Missing-Number\"><a href=\"#268-Missing-Number\" class=\"headerlink\" title=\"268. Missing Number\"></a><a href=\"https://leetcode-cn.com/problems/missing-number/\" target=\"_blank\" rel=\"noopener\">268. Missing Number</a></h4><p>Given an array containing <em>n</em> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[3,0,1]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[9,6,4,2,3,5,7,0,1]</code></p>\n<p><strong>Output:</strong> <code>8</code></p>\n</blockquote>\n<p><strong>Note</strong>:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>要求时间复杂度为O(n)；</p>\n<ul>\n<li>思路1： 采用和<a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">136. Single Number</a>类似的思路，将容器中所有的数字和有序数列<code>1,2,3……,n</code>异或，如果容器中存在数字<code>x</code>，那么和有序数列中对应的<code>x</code>异或结果为零，最终得到的结果便为缺失的数字。</li>\n<li>思路2：采用求和相减，若容器长度为<code>n</code>，利用求和公式计算<code>s1 = n * (n+1) / 2</code>，减去容器中数字的求和<code>s2</code>，则可得缺失的数字。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//方法1：\nclass Solution {\npublic:\n  int missingNumber(vector&lt;int&gt;&amp; nums) {\n      int result = 0;\n      int len = nums.size();\n      for(int i = 0; i &lt; len; ++i)\n      {\n          result ^= (i+1) ^ nums[i];\n      }\n      return result;\n  }\n};\n//方法2：\nclass Solution {\npublic:\n  int missingNumber(vector&lt;int&gt;&amp; nums) {\n      int n = nums.size();\n      int s1 = n * (n + 1) / 2;\n      int s2 = 0;\n      for(int i : nums)\n      {\n          s2 += i;\n      }\n      return s1 - s2;\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：191.Number of 1 Bits","date":"2019-02-24T05:06:00.000Z","_content":"### [191\\. Number of 1 Bits](https://leetcode-cn.com/problems/number-of-1-bits/)\nWrite a function that takes an unsigned integer and return the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n**Example 1:**\n>**Input:** `00000000000000000000000000001011`\n>\n>**Output:** `3`\n>\n>**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n\n**Example 2:**\n>**Input:** `00000000000000000000000010000000`\n>\n>**Output:** `1`\n>\n>**Explanation:** The input binary string **00000000000000000000000010000000** has a total of one '1' bit.\n\n**Example 3:**\n>**Input:** `11111111111111111111111111111101`\n>\n>**Output:** `31`\n>\n>**Explanation:** The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.\n\n**Note:**\n*   Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3** above the input represents the signed integer `-3`.\n\n**Follow up**:\nIf this function is called many times, how would you optimize it?\n##### 解题思路：\n+ 思路1：除2取余法，末尾为1，除2取余后为1，末尾为0，除2取余后为0\n+ 思路2：与1相与，直接判定末位是否为1\n+ 思路3：直接去掉二进制中位置最靠后的1。假设`n=1100`，则`n-1=1011`，那么`n&(n-1)=1000`,位置最靠后的1被去掉。\n##### 解答：\n```cpp\n//方法1\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            cnt += n % 2;\n            n >>= 1;\n        }\n        return cnt;\n    }\n};\n//方法2\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            cnt += n & 1;\n            n >>= 1;\n        }\n        return cnt;\n    }\n};\n//方法3\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            n = n & (n-1);\n            cnt++;\n        }\n        return cnt;\n    }\n};\n```","source":"_posts/LeetCode/191_number_of_1_bits.md","raw":"---\ntitle: LeetCode刷题：191.Number of 1 Bits\ndate: 2019-02-24 13:06:00\ncategories: LeetCode\ntags:\n  - 位运算\n---\n### [191\\. Number of 1 Bits](https://leetcode-cn.com/problems/number-of-1-bits/)\nWrite a function that takes an unsigned integer and return the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n**Example 1:**\n>**Input:** `00000000000000000000000000001011`\n>\n>**Output:** `3`\n>\n>**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n\n**Example 2:**\n>**Input:** `00000000000000000000000010000000`\n>\n>**Output:** `1`\n>\n>**Explanation:** The input binary string **00000000000000000000000010000000** has a total of one '1' bit.\n\n**Example 3:**\n>**Input:** `11111111111111111111111111111101`\n>\n>**Output:** `31`\n>\n>**Explanation:** The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.\n\n**Note:**\n*   Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3** above the input represents the signed integer `-3`.\n\n**Follow up**:\nIf this function is called many times, how would you optimize it?\n##### 解题思路：\n+ 思路1：除2取余法，末尾为1，除2取余后为1，末尾为0，除2取余后为0\n+ 思路2：与1相与，直接判定末位是否为1\n+ 思路3：直接去掉二进制中位置最靠后的1。假设`n=1100`，则`n-1=1011`，那么`n&(n-1)=1000`,位置最靠后的1被去掉。\n##### 解答：\n```cpp\n//方法1\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            cnt += n % 2;\n            n >>= 1;\n        }\n        return cnt;\n    }\n};\n//方法2\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            cnt += n & 1;\n            n >>= 1;\n        }\n        return cnt;\n    }\n};\n//方法3\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            n = n & (n-1);\n            cnt++;\n        }\n        return cnt;\n    }\n};\n```","slug":"LeetCode/191_number_of_1_bits","published":1,"updated":"2019-04-01T10:35:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurh40013metfjnxge9nw","content":"<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191. Number of 1 Bits\"></a><a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\" target=\"_blank\" rel=\"noopener\">191. Number of 1 Bits</a></h3><p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\" rel=\"noopener\">Hamming weight</a>).</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>00000000000000000000000000001011</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three ‘1’ bits.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>00000000000000000000000010000000</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one ‘1’ bit.</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>11111111111111111111111111111101</code></p>\n<p><strong>Output:</strong> <code>31</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one ‘1’ bits.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>\n<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\" rel=\"noopener\">2’s complement notation</a>. Therefore, in <strong>Example 3</strong> above the input represents the signed integer <code>-3</code>.</li>\n</ul>\n<p><strong>Follow up</strong>:<br>If this function is called many times, how would you optimize it?</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1：除2取余法，末尾为1，除2取余后为1，末尾为0，除2取余后为0</li>\n<li>思路2：与1相与，直接判定末位是否为1</li>\n<li>思路3：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//方法1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">hammingWeight</span><span class=\"token punctuation\">(</span>uint32_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n          n <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法2</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">hammingWeight</span><span class=\"token punctuation\">(</span>uint32_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          n <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法3</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">hammingWeight</span><span class=\"token punctuation\">(</span>uint32_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          n <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191. Number of 1 Bits\"></a><a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\" target=\"_blank\" rel=\"noopener\">191. Number of 1 Bits</a></h3><p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\" rel=\"noopener\">Hamming weight</a>).</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>00000000000000000000000000001011</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three ‘1’ bits.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>00000000000000000000000010000000</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one ‘1’ bit.</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>11111111111111111111111111111101</code></p>\n<p><strong>Output:</strong> <code>31</code></p>\n<p><strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one ‘1’ bits.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>\n<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\" rel=\"noopener\">2’s complement notation</a>. Therefore, in <strong>Example 3</strong> above the input represents the signed integer <code>-3</code>.</li>\n</ul>\n<p><strong>Follow up</strong>:<br>If this function is called many times, how would you optimize it?</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1：除2取余法，末尾为1，除2取余后为1，末尾为0，除2取余后为0</li>\n<li>思路2：与1相与，直接判定末位是否为1</li>\n<li>思路3：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//方法1\nclass Solution {\npublic:\n  int hammingWeight(uint32_t n) {\n      int cnt = 0;\n      while(n != 0)\n      {\n          cnt += n % 2;\n          n &gt;&gt;= 1;\n      }\n      return cnt;\n  }\n};\n//方法2\nclass Solution {\npublic:\n  int hammingWeight(uint32_t n) {\n      int cnt = 0;\n      while(n != 0)\n      {\n          cnt += n &amp; 1;\n          n &gt;&gt;= 1;\n      }\n      return cnt;\n  }\n};\n//方法3\nclass Solution {\npublic:\n  int hammingWeight(uint32_t n) {\n      int cnt = 0;\n      while(n != 0)\n      {\n          n = n &amp; (n-1);\n          cnt++;\n      }\n      return cnt;\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：344.Reverse String","date":"2019-02-24T05:10:00.000Z","_content":"#### [344\\. Reverse String](https://leetcode-cn.com/problems/reverse-string/)\nWrite a function that takes a string as input and returns the string reversed.\n\n**Example 1:**\n>**Input:** \"hello\"\n>\n>**Output:** \"olleh\"\n\n**Example 2:**\n>**Input:** \"A man, a plan, a canal: Panama\"\n>\n>**Output:** \"amanaP :lanac a ,nalp a ,nam A\"\n##### 解题思路：\n+ 思路1： 通过`s.length()`获取`s`的字符长度，然后通过下标访问`s`，将`s`中的字符从尾到头拼接到`result`上，得到返回结果。\n+ 思路2： 利用`reverse`函数，`reverse(beg, end)`会将区间`(beg, end)`之间的元素全部逆转。\n##### 解答：\n```cpp\n// code 1: \n// 4ms\nclass Solution {\npublic:\n    string reverseString(string s) {\n        string result = \"\";\n        auto len = s.length();\n        while(len > 0)\n        {\n            result += s[len - 1];\n            --len;\n        }\n        return result;\n    }\n};\n// code 2:\n// 4ms\nclass Solution {\npublic:\n    string reverseString(string s) {\n        reverse(s.begin(),s.end());\n        return s;\n    }\n};\n```","source":"_posts/LeetCode/344_reverse_string.md","raw":"---\ntitle: LeetCode刷题：344.Reverse String\ndate: 2019-02-24 13:10:00\ncategories: LeetCode\ntags:\n  - 字符串\n---\n#### [344\\. Reverse String](https://leetcode-cn.com/problems/reverse-string/)\nWrite a function that takes a string as input and returns the string reversed.\n\n**Example 1:**\n>**Input:** \"hello\"\n>\n>**Output:** \"olleh\"\n\n**Example 2:**\n>**Input:** \"A man, a plan, a canal: Panama\"\n>\n>**Output:** \"amanaP :lanac a ,nalp a ,nam A\"\n##### 解题思路：\n+ 思路1： 通过`s.length()`获取`s`的字符长度，然后通过下标访问`s`，将`s`中的字符从尾到头拼接到`result`上，得到返回结果。\n+ 思路2： 利用`reverse`函数，`reverse(beg, end)`会将区间`(beg, end)`之间的元素全部逆转。\n##### 解答：\n```cpp\n// code 1: \n// 4ms\nclass Solution {\npublic:\n    string reverseString(string s) {\n        string result = \"\";\n        auto len = s.length();\n        while(len > 0)\n        {\n            result += s[len - 1];\n            --len;\n        }\n        return result;\n    }\n};\n// code 2:\n// 4ms\nclass Solution {\npublic:\n    string reverseString(string s) {\n        reverse(s.begin(),s.end());\n        return s;\n    }\n};\n```","slug":"LeetCode/344_reverse_string","published":1,"updated":"2019-04-01T11:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurh60016metfx4hma3b0","content":"<h4 id=\"344-Reverse-String\"><a href=\"#344-Reverse-String\" class=\"headerlink\" title=\"344. Reverse String\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\" target=\"_blank\" rel=\"noopener\">344. Reverse String</a></h4><p>Write a function that takes a string as input and returns the string reversed.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “hello”</p>\n<p><strong>Output:</strong> “olleh”</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “A man, a plan, a canal: Panama”</p>\n<p><strong>Output:</strong> “amanaP :lanac a ,nalp a ,nam A”</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1： 通过<code>s.length()</code>获取<code>s</code>的字符长度，然后通过下标访问<code>s</code>，将<code>s</code>中的字符从尾到头拼接到<code>result</code>上，得到返回结果。</li>\n<li>思路2： 利用<code>reverse</code>函数，<code>reverse(beg, end)</code>会将区间<code>(beg, end)</code>之间的元素全部逆转。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// code 1: </span>\n<span class=\"token comment\" spellcheck=\"true\">// 4ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  string <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      string result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">auto</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token operator\">--</span>len<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// code 2:</span>\n<span class=\"token comment\" spellcheck=\"true\">// 4ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  string <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"344-Reverse-String\"><a href=\"#344-Reverse-String\" class=\"headerlink\" title=\"344. Reverse String\"></a><a href=\"https://leetcode-cn.com/problems/reverse-string/\" target=\"_blank\" rel=\"noopener\">344. Reverse String</a></h4><p>Write a function that takes a string as input and returns the string reversed.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “hello”</p>\n<p><strong>Output:</strong> “olleh”</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “A man, a plan, a canal: Panama”</p>\n<p><strong>Output:</strong> “amanaP :lanac a ,nalp a ,nam A”</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1： 通过<code>s.length()</code>获取<code>s</code>的字符长度，然后通过下标访问<code>s</code>，将<code>s</code>中的字符从尾到头拼接到<code>result</code>上，得到返回结果。</li>\n<li>思路2： 利用<code>reverse</code>函数，<code>reverse(beg, end)</code>会将区间<code>(beg, end)</code>之间的元素全部逆转。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">// code 1: \n// 4ms\nclass Solution {\npublic:\n  string reverseString(string s) {\n      string result = &quot;&quot;;\n      auto len = s.length();\n      while(len &gt; 0)\n      {\n          result += s[len - 1];\n          --len;\n      }\n      return result;\n  }\n};\n// code 2:\n// 4ms\nclass Solution {\npublic:\n  string reverseString(string s) {\n      reverse(s.begin(),s.end());\n      return s;\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：476.Number Complement","date":"2019-02-24T05:12:00.000Z","_content":"#### [476\\. Number Complement](https://leetcode-cn.com/problems/number-complement/)\nGiven a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\n\n**Note:**\n1.  The given integer is guaranteed to fit within the range of a 32-bit signed integer.\n2.  You could assume no leading zero bit in the integer’s binary representation.\n\n**Example 1:**\n>**Input:** `5`\n>\n>**Output:** `2`\n>\n>**Explanation:** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010\\. So you need to output 2.\n\n**Example 2:**\n>**Input:** `1`\n>\n>**Output:** `0`\n>\n>**Explanation:** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0\\. So you need to output 0.\n##### 解题思路：\n题例中`5`的二进制为`101`，补数为`010`,补数可以通过`101 ^ 111`获得，所以首先获取与num相同二进制位数的`111`，通过判断`num`左移1位是否为空可以获得其位数，进而获取`mask`。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int findComplement(int num) {\n        int mask = 2, tmp = num;\n        while(tmp >>= 1)\n        {\n            mask <<= 1;  \n        }\n        return num ^ (mask-1);\n    }\n};\n```","source":"_posts/LeetCode/476_number_complement.md","raw":"---\ntitle: LeetCode刷题：476.Number Complement\ndate: 2019-02-24 13:12:00\ncategories: LeetCode\ntags:\n  - 位运算\n---\n#### [476\\. Number Complement](https://leetcode-cn.com/problems/number-complement/)\nGiven a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\n\n**Note:**\n1.  The given integer is guaranteed to fit within the range of a 32-bit signed integer.\n2.  You could assume no leading zero bit in the integer’s binary representation.\n\n**Example 1:**\n>**Input:** `5`\n>\n>**Output:** `2`\n>\n>**Explanation:** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010\\. So you need to output 2.\n\n**Example 2:**\n>**Input:** `1`\n>\n>**Output:** `0`\n>\n>**Explanation:** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0\\. So you need to output 0.\n##### 解题思路：\n题例中`5`的二进制为`101`，补数为`010`,补数可以通过`101 ^ 111`获得，所以首先获取与num相同二进制位数的`111`，通过判断`num`左移1位是否为空可以获得其位数，进而获取`mask`。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int findComplement(int num) {\n        int mask = 2, tmp = num;\n        while(tmp >>= 1)\n        {\n            mask <<= 1;  \n        }\n        return num ^ (mask-1);\n    }\n};\n```","slug":"LeetCode/476_number_complement","published":1,"updated":"2019-04-01T11:43:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurh80018metfhid5ja44","content":"<h4 id=\"476-Number-Complement\"><a href=\"#476-Number-Complement\" class=\"headerlink\" title=\"476. Number Complement\"></a><a href=\"https://leetcode-cn.com/problems/number-complement/\" target=\"_blank\" rel=\"noopener\">476. Number Complement</a></h4><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ol>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>5</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>1</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n<p><strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>题例中<code>5</code>的二进制为<code>101</code>，补数为<code>010</code>,补数可以通过<code>101 ^ 111</code>获得，所以首先获取与num相同二进制位数的<code>111</code>，通过判断<code>num</code>左移1位是否为空可以获得其位数，进而获取<code>mask</code>。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findComplement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tmp <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            mask <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>mask<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"476-Number-Complement\"><a href=\"#476-Number-Complement\" class=\"headerlink\" title=\"476. Number Complement\"></a><a href=\"https://leetcode-cn.com/problems/number-complement/\" target=\"_blank\" rel=\"noopener\">476. Number Complement</a></h4><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ol>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>5</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>1</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n<p><strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>题例中<code>5</code>的二进制为<code>101</code>，补数为<code>010</code>,补数可以通过<code>101 ^ 111</code>获得，所以首先获取与num相同二进制位数的<code>111</code>，通过判断<code>num</code>左移1位是否为空可以获得其位数，进而获取<code>mask</code>。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    int findComplement(int num) {\n        int mask = 2, tmp = num;\n        while(tmp &gt;&gt;= 1)\n        {\n            mask &lt;&lt;= 1;  \n        }\n        return num ^ (mask-1);\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：461.Hamming Distance","date":"2019-02-24T05:11:00.000Z","_content":"#### [461\\. Hamming Distance](https://leetcode-cn.com/problems/hamming-distance/)\nThe [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers `x` and `y`, calculate the Hamming distance.\n\n**Note:**\n0 ≤ `x`, `y` < 2<sup>31</sup>.\n\n**Example:**\n```\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.\n```\n##### 解题思路：\nn = x ^ y，两数对应位置若不相同，则n的相应位置置1\n利用n = n & (n - 1)获取n中1的个数\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int n = x ^ y, count = 0;\n        while(n){\n            count ++;\n            n = n & (n - 1);\n        }\n        return count;\n    }\n};\n```","source":"_posts/LeetCode/461_hamming_distance.md","raw":"---\ntitle: LeetCode刷题：461.Hamming Distance\ndate: 2019-02-24 13:11:00\ncategories: LeetCode\ntags:\n  - 位运算\n---\n#### [461\\. Hamming Distance](https://leetcode-cn.com/problems/hamming-distance/)\nThe [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers `x` and `y`, calculate the Hamming distance.\n\n**Note:**\n0 ≤ `x`, `y` < 2<sup>31</sup>.\n\n**Example:**\n```\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.\n```\n##### 解题思路：\nn = x ^ y，两数对应位置若不相同，则n的相应位置置1\n利用n = n & (n - 1)获取n中1的个数\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int n = x ^ y, count = 0;\n        while(n){\n            count ++;\n            n = n & (n - 1);\n        }\n        return count;\n    }\n};\n```","slug":"LeetCode/461_hamming_distance","published":1,"updated":"2019-04-01T11:40:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhc001bmetfi71xbzdl","content":"<h4 id=\"461-Hamming-Distance\"><a href=\"#461-Hamming-Distance\" class=\"headerlink\" title=\"461. Hamming Distance\"></a><a href=\"https://leetcode-cn.com/problems/hamming-distance/\" target=\"_blank\" rel=\"noopener\">461. Hamming Distance</a></h4><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\" rel=\"noopener\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.<br>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\n<p><strong>Note:</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>n = x ^ y，两数对应位置若不相同，则n的相应位置置1<br>利用n = n &amp; (n - 1)获取n中1的个数</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"461-Hamming-Distance\"><a href=\"#461-Hamming-Distance\" class=\"headerlink\" title=\"461. Hamming Distance\"></a><a href=\"https://leetcode-cn.com/problems/hamming-distance/\" target=\"_blank\" rel=\"noopener\">461. Hamming Distance</a></h4><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\" rel=\"noopener\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.<br>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\n<p><strong>Note:</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>n = x ^ y，两数对应位置若不相同，则n的相应位置置1<br>利用n = n &amp; (n - 1)获取n中1的个数</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int n = x ^ y, count = 0;\n        while(n){\n            count ++;\n            n = n &amp; (n - 1);\n        }\n        return count;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：509.Fibonacci Number","date":"2019-02-24T05:13:00.000Z","_content":"#### [509\\. Fibonacci Number](https://leetcode-cn.com/problems/fibonacci-number/)\nThe **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n```\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), for N > 1.\n```\nGiven `N`, calculate `F(N)`.\n\n**Example 1:**\n>**Input:** `2`\n>\n>**Output:** `1`\n>\n>**Explanation:** `F(2) = F(1) + F(0) = 1 + 0 = 1.`\n\n**Example 2:**\n>**Input:** `3`\n>\n>**Output:** `2`\n>\n>**Explanation:** `F(3) = F(2) + F(1) = 1 + 1 = 2.`\n\n**Example 3:**\n>**Input:** `4`\n>\n>**Output:** `3`\n>\n>**Explanation:** `F(4) = F(3) + F(2) = 2 + 1 = 3.`\n\n**Note:**\n0 ≤ `N` ≤ 30.\n##### 解题思路：\n+ 思路1：采用递归的方法\n+ 思路2：采用数组，将斐波那契数存入到数组中。\n##### 解答：\n```cpp\n//方法1：\n//效率较低，运行时间20ms\nint fibonacci(int n)\n{\n    if(n == 0)\n        return 0;\n    else if(n == 1)\n        return 1;\n    return fibonacci(n-1) + fibonacci(n-2); \n}\nclass Solution {\npublic:\n    int fib(int N) {\n        return fibonacci(N);     \n    }\n};\n//方法2：\n//运行时间0ms\nclass Solution {\npublic:\n    int fib(int N) {\n        int *p = new int[N+1];//开辟大小为N+1的数组\n        p[0] = 0;\n        p[1] = 1;\n        for(int i = 2; i < N+1; ++i)\n        {\n            p[i] = p[i-1] + p[i-2];\n        }\n        return p[N];\n    }\n};\n```","source":"_posts/LeetCode/509_fibonacci_number.md","raw":"---\ntitle: LeetCode刷题：509.Fibonacci Number\ndate: 2019-02-24 13:13:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [509\\. Fibonacci Number](https://leetcode-cn.com/problems/fibonacci-number/)\nThe **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n```\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), for N > 1.\n```\nGiven `N`, calculate `F(N)`.\n\n**Example 1:**\n>**Input:** `2`\n>\n>**Output:** `1`\n>\n>**Explanation:** `F(2) = F(1) + F(0) = 1 + 0 = 1.`\n\n**Example 2:**\n>**Input:** `3`\n>\n>**Output:** `2`\n>\n>**Explanation:** `F(3) = F(2) + F(1) = 1 + 1 = 2.`\n\n**Example 3:**\n>**Input:** `4`\n>\n>**Output:** `3`\n>\n>**Explanation:** `F(4) = F(3) + F(2) = 2 + 1 = 3.`\n\n**Note:**\n0 ≤ `N` ≤ 30.\n##### 解题思路：\n+ 思路1：采用递归的方法\n+ 思路2：采用数组，将斐波那契数存入到数组中。\n##### 解答：\n```cpp\n//方法1：\n//效率较低，运行时间20ms\nint fibonacci(int n)\n{\n    if(n == 0)\n        return 0;\n    else if(n == 1)\n        return 1;\n    return fibonacci(n-1) + fibonacci(n-2); \n}\nclass Solution {\npublic:\n    int fib(int N) {\n        return fibonacci(N);     \n    }\n};\n//方法2：\n//运行时间0ms\nclass Solution {\npublic:\n    int fib(int N) {\n        int *p = new int[N+1];//开辟大小为N+1的数组\n        p[0] = 0;\n        p[1] = 1;\n        for(int i = 2; i < N+1; ++i)\n        {\n            p[i] = p[i-1] + p[i-2];\n        }\n        return p[N];\n    }\n};\n```","slug":"LeetCode/509_fibonacci_number","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhe001dmetf1dcy7bn0","content":"<h4 id=\"509-Fibonacci-Number\"><a href=\"#509-Fibonacci-Number\" class=\"headerlink\" title=\"509. Fibonacci Number\"></a><a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">509. Fibonacci Number</a></h4><p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<pre><code>F(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), for N &gt; 1.</code></pre><p>Given <code>N</code>, calculate <code>F(N)</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>2</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong> <code>F(2) = F(1) + F(0) = 1 + 0 = 1.</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>3</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong> <code>F(3) = F(2) + F(1) = 1 + 1 = 2.</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>4</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> <code>F(4) = F(3) + F(2) = 2 + 1 = 3.</code></p>\n</blockquote>\n<p><strong>Note:</strong><br>0 ≤ <code>N</code> ≤ 30.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1：采用递归的方法</li>\n<li>思路2：采用数组，将斐波那契数存入到数组中。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//方法1：</span>\n<span class=\"token comment\" spellcheck=\"true\">//效率较低，运行时间20ms</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法2：</span>\n<span class=\"token comment\" spellcheck=\"true\">//运行时间0ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//开辟大小为N+1的数组</span>\n      p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"509-Fibonacci-Number\"><a href=\"#509-Fibonacci-Number\" class=\"headerlink\" title=\"509. Fibonacci Number\"></a><a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">509. Fibonacci Number</a></h4><p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<pre><code>F(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), for N &gt; 1.</code></pre><p>Given <code>N</code>, calculate <code>F(N)</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>2</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong> <code>F(2) = F(1) + F(0) = 1 + 0 = 1.</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>3</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong> <code>F(3) = F(2) + F(1) = 1 + 1 = 2.</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>4</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> <code>F(4) = F(3) + F(2) = 2 + 1 = 3.</code></p>\n</blockquote>\n<p><strong>Note:</strong><br>0 ≤ <code>N</code> ≤ 30.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1：采用递归的方法</li>\n<li>思路2：采用数组，将斐波那契数存入到数组中。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//方法1：\n//效率较低，运行时间20ms\nint fibonacci(int n)\n{\n  if(n == 0)\n      return 0;\n  else if(n == 1)\n      return 1;\n  return fibonacci(n-1) + fibonacci(n-2); \n}\nclass Solution {\npublic:\n  int fib(int N) {\n      return fibonacci(N);     \n  }\n};\n//方法2：\n//运行时间0ms\nclass Solution {\npublic:\n  int fib(int N) {\n      int *p = new int[N+1];//开辟大小为N+1的数组\n      p[0] = 0;\n      p[1] = 1;\n      for(int i = 2; i &lt; N+1; ++i)\n      {\n          p[i] = p[i-1] + p[i-2];\n      }\n      return p[N];\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：561.Array Partition I","date":"2019-02-24T05:14:00.000Z","_content":"#### [561\\. Array Partition I](https://leetcode-cn.com/problems/array-partition-i/)\nGiven an array of **2n** integers, your task is to group these integers into **n** pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.\n\n**Example:**\n>**Input:** `[1,4,3,2]`\n>\n>**Output:** `4`\n>\n>**Explanation:** `n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).`\n\n**Note:**\n1.  **n** is a positive integer, which is in the range of [1, 10000].\n2.  All the integers in the array will be in the range of [-10000, 10000].\n##### 解题思路：\n为得到最大的和，所以要保证第2大的数字和第1大的数字进行组合，第4大的数字和第3大的数字进行组合，以此类推。可以看出，我们将数组进行排序后，取`2n+1`项进行相加，即可得结果。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        int len = nums.size();\n        sort(nums.begin(), nums.end());\n        int result = 0;\n        for(int i = 0; i < len; ++i)\n        {\n            result += nums[i];\n            ++i;\n        }\n        return result;\n    }\n};\n```","source":"_posts/LeetCode/561_array_partition_i.md","raw":"---\ntitle: LeetCode刷题：561.Array Partition I\ndate: 2019-02-24 13:14:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [561\\. Array Partition I](https://leetcode-cn.com/problems/array-partition-i/)\nGiven an array of **2n** integers, your task is to group these integers into **n** pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.\n\n**Example:**\n>**Input:** `[1,4,3,2]`\n>\n>**Output:** `4`\n>\n>**Explanation:** `n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).`\n\n**Note:**\n1.  **n** is a positive integer, which is in the range of [1, 10000].\n2.  All the integers in the array will be in the range of [-10000, 10000].\n##### 解题思路：\n为得到最大的和，所以要保证第2大的数字和第1大的数字进行组合，第4大的数字和第3大的数字进行组合，以此类推。可以看出，我们将数组进行排序后，取`2n+1`项进行相加，即可得结果。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        int len = nums.size();\n        sort(nums.begin(), nums.end());\n        int result = 0;\n        for(int i = 0; i < len; ++i)\n        {\n            result += nums[i];\n            ++i;\n        }\n        return result;\n    }\n};\n```","slug":"LeetCode/561_array_partition_i","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhg001gmetfec9cg3z8","content":"<h4 id=\"561-Array-Partition-I\"><a href=\"#561-Array-Partition-I\" class=\"headerlink\" title=\"561. Array Partition I\"></a><a href=\"https://leetcode-cn.com/problems/array-partition-i/\" target=\"_blank\" rel=\"noopener\">561. Array Partition I</a></h4><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), …, (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[1,4,3,2]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n<p><strong>Explanation:</strong> <code>n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li>\n<li>All the integers in the array will be in the range of [-10000, 10000].<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>为得到最大的和，所以要保证第2大的数字和第1大的数字进行组合，第4大的数字和第3大的数字进行组合，以此类推。可以看出，我们将数组进行排序后，取<code>2n+1</code>项进行相加，即可得结果。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">arrayPairSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"561-Array-Partition-I\"><a href=\"#561-Array-Partition-I\" class=\"headerlink\" title=\"561. Array Partition I\"></a><a href=\"https://leetcode-cn.com/problems/array-partition-i/\" target=\"_blank\" rel=\"noopener\">561. Array Partition I</a></h4><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), …, (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[1,4,3,2]</code></p>\n<p><strong>Output:</strong> <code>4</code></p>\n<p><strong>Explanation:</strong> <code>n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li>\n<li>All the integers in the array will be in the range of [-10000, 10000].<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>为得到最大的和，所以要保证第2大的数字和第1大的数字进行组合，第4大的数字和第3大的数字进行组合，以此类推。可以看出，我们将数组进行排序后，取<code>2n+1</code>项进行相加，即可得结果。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nint arrayPairSum(vector&lt;int&gt;&amp; nums) {\n    int len = nums.size();\n    sort(nums.begin(), nums.end());\n    int result = 0;\n    for(int i = 0; i &lt; len; ++i)\n    {\n        result += nums[i];\n        ++i;\n    }\n    return result;\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：595.Big Countries","date":"2019-02-24T05:15:00.000Z","_content":"#### [595\\. Big Countries](https://leetcode-cn.com/problems/big-countries/)\n\nSQL架构\n```sql\nCreate table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp int)\nTruncate table World\ninsert into World (name, continent, area, population, gdp) values ('Afghanistan', 'Asia', '652230', '25500100', '20343000000')\ninsert into World (name, continent, area, population, gdp) values ('Albania', 'Europe', '28748', '2831741', '12960000000')\ninsert into World (name, continent, area, population, gdp) values ('Algeria', 'Africa', '2381741', '37100000', '188681000000')\ninsert into World (name, continent, area, population, gdp) values ('Andorra', 'Europe', '468', '78115', '3712000000')\ninsert into World (name, continent, area, population, gdp) values ('Angola', 'Africa', '1246700', '20609294', '100990000000')\n```\nThere is a table `World`\n\n\n\n| name            | continent  | area       | population   | gdp           |\n|-----------------|------------|------------|--------------|---------------|\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n\nA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\nWrite a SQL solution to output big countries' name, population and area.\nFor example, according to the above table, we should output:\n\n\n| name         | population  | area         |\n|--------------|-------------|--------------|\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n\n##### 解题思路：\n利用人口和面积进行筛选\n##### 解答：\n```sql\nselect name, population, area from World where area > 3000000 or population > 25000000;\n```","source":"_posts/LeetCode/595_big_countries.md","raw":"---\ntitle: LeetCode刷题：595.Big Countries\ndate: 2019-02-24 13:15:00\ncategories: LeetCode\ntags:\n  - 数据库\n---\n#### [595\\. Big Countries](https://leetcode-cn.com/problems/big-countries/)\n\nSQL架构\n```sql\nCreate table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp int)\nTruncate table World\ninsert into World (name, continent, area, population, gdp) values ('Afghanistan', 'Asia', '652230', '25500100', '20343000000')\ninsert into World (name, continent, area, population, gdp) values ('Albania', 'Europe', '28748', '2831741', '12960000000')\ninsert into World (name, continent, area, population, gdp) values ('Algeria', 'Africa', '2381741', '37100000', '188681000000')\ninsert into World (name, continent, area, population, gdp) values ('Andorra', 'Europe', '468', '78115', '3712000000')\ninsert into World (name, continent, area, population, gdp) values ('Angola', 'Africa', '1246700', '20609294', '100990000000')\n```\nThere is a table `World`\n\n\n\n| name            | continent  | area       | population   | gdp           |\n|-----------------|------------|------------|--------------|---------------|\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n\nA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\nWrite a SQL solution to output big countries' name, population and area.\nFor example, according to the above table, we should output:\n\n\n| name         | population  | area         |\n|--------------|-------------|--------------|\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n\n##### 解题思路：\n利用人口和面积进行筛选\n##### 解答：\n```sql\nselect name, population, area from World where area > 3000000 or population > 25000000;\n```","slug":"LeetCode/595_big_countries","published":1,"updated":"2019-04-01T11:40:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhh001jmetfstauvdbg","content":"<h4 id=\"595-Big-Countries\"><a href=\"#595-Big-Countries\" class=\"headerlink\" title=\"595. Big Countries\"></a><a href=\"https://leetcode-cn.com/problems/big-countries/\" target=\"_blank\" rel=\"noopener\">595. Big Countries</a></h4><p>SQL架构</p>\n<pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> World <span class=\"token punctuation\">(</span>name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> continent <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> area <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> population <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> gdp <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> World\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Afghanistan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Asia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'652230'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25500100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20343000000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Albania'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Europe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'28748'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2831741'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'12960000000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Algeria'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Africa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2381741'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'37100000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'188681000000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Andorra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Europe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'468'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'78115'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3712000000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Angola'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Africa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1246700'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20609294'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100990000000'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>There is a table <code>World</code></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>continent</th>\n<th>area</th>\n<th>population</th>\n<th>gdp</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Afghanistan</td>\n<td>Asia</td>\n<td>652230</td>\n<td>25500100</td>\n<td>20343000</td>\n</tr>\n<tr>\n<td>Albania</td>\n<td>Europe</td>\n<td>28748</td>\n<td>2831741</td>\n<td>12960000</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>Africa</td>\n<td>2381741</td>\n<td>37100000</td>\n<td>188681000</td>\n</tr>\n<tr>\n<td>Andorra</td>\n<td>Europe</td>\n<td>468</td>\n<td>78115</td>\n<td>3712000</td>\n</tr>\n<tr>\n<td>Angola</td>\n<td>Africa</td>\n<td>1246700</td>\n<td>20609294</td>\n<td>100990000</td>\n</tr>\n</tbody></table>\n<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.<br>Write a SQL solution to output big countries’ name, population and area.<br>For example, according to the above table, we should output:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>population</th>\n<th>area</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Afghanistan</td>\n<td>25500100</td>\n<td>652230</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>37100000</td>\n<td>2381741</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用人口和面积进行筛选</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> area <span class=\"token keyword\">from</span> World <span class=\"token keyword\">where</span> area <span class=\"token operator\">></span> <span class=\"token number\">3000000</span> <span class=\"token operator\">or</span> population <span class=\"token operator\">></span> <span class=\"token number\">25000000</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"595-Big-Countries\"><a href=\"#595-Big-Countries\" class=\"headerlink\" title=\"595. Big Countries\"></a><a href=\"https://leetcode-cn.com/problems/big-countries/\" target=\"_blank\" rel=\"noopener\">595. Big Countries</a></h4><p>SQL架构</p>\n<pre><code class=\"sql\">Create table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp int)\nTruncate table World\ninsert into World (name, continent, area, population, gdp) values (&#39;Afghanistan&#39;, &#39;Asia&#39;, &#39;652230&#39;, &#39;25500100&#39;, &#39;20343000000&#39;)\ninsert into World (name, continent, area, population, gdp) values (&#39;Albania&#39;, &#39;Europe&#39;, &#39;28748&#39;, &#39;2831741&#39;, &#39;12960000000&#39;)\ninsert into World (name, continent, area, population, gdp) values (&#39;Algeria&#39;, &#39;Africa&#39;, &#39;2381741&#39;, &#39;37100000&#39;, &#39;188681000000&#39;)\ninsert into World (name, continent, area, population, gdp) values (&#39;Andorra&#39;, &#39;Europe&#39;, &#39;468&#39;, &#39;78115&#39;, &#39;3712000000&#39;)\ninsert into World (name, continent, area, population, gdp) values (&#39;Angola&#39;, &#39;Africa&#39;, &#39;1246700&#39;, &#39;20609294&#39;, &#39;100990000000&#39;)</code></pre>\n<p>There is a table <code>World</code></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>continent</th>\n<th>area</th>\n<th>population</th>\n<th>gdp</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Afghanistan</td>\n<td>Asia</td>\n<td>652230</td>\n<td>25500100</td>\n<td>20343000</td>\n</tr>\n<tr>\n<td>Albania</td>\n<td>Europe</td>\n<td>28748</td>\n<td>2831741</td>\n<td>12960000</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>Africa</td>\n<td>2381741</td>\n<td>37100000</td>\n<td>188681000</td>\n</tr>\n<tr>\n<td>Andorra</td>\n<td>Europe</td>\n<td>468</td>\n<td>78115</td>\n<td>3712000</td>\n</tr>\n<tr>\n<td>Angola</td>\n<td>Africa</td>\n<td>1246700</td>\n<td>20609294</td>\n<td>100990000</td>\n</tr>\n</tbody></table>\n<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.<br>Write a SQL solution to output big countries’ name, population and area.<br>For example, according to the above table, we should output:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>population</th>\n<th>area</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Afghanistan</td>\n<td>25500100</td>\n<td>652230</td>\n</tr>\n<tr>\n<td>Algeria</td>\n<td>37100000</td>\n<td>2381741</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用人口和面积进行筛选</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"sql\">select name, population, area from World where area &gt; 3000000 or population &gt; 25000000;</code></pre>\n"},{"title":"LeetCode刷题：620.Not Boring Movies","date":"2019-02-24T05:16:00.000Z","_content":"#### [620\\. Not Boring Movies](https://leetcode-cn.com/problems/not-boring-movies/)\nSQL架构\n```sql\nCreate table If Not Exists cinema (id int, movie varchar(255), description varchar(255), rating float(2, 1))\nTruncate table cinema\ninsert into cinema (id, movie, description, rating) values ('1', 'War', 'great 3D', '8.9')\ninsert into cinema (id, movie, description, rating) values ('2', 'Science', 'fiction', '8.5')\ninsert into cinema (id, movie, description, rating) values ('3', 'irish', 'boring', '6.2')\ninsert into cinema (id, movie, description, rating) values ('4', 'Ice song', 'Fantacy', '8.6')\ninsert into cinema (id, movie, description, rating) values ('5', 'House card', 'Interesting', '9.1')\n```\nX city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.\nPlease write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.\nFor example, table `cinema`:\n\n\n|   id    | movie     |  description |  rating   |\n|---------|-----------|--------------|-----------|\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n\n\nFor the example above, the output should be:\n\n\n|   id    | movie     |  description |  rating   |\n|---------|-----------|--------------|-----------|\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n\n\n##### 解题思路：\n通过`description`和`id`进行筛选，然后通过`rating`进行倒序排序（`DESC`）\n##### 解答：\n```sql\nSELECT id, movie, description, rating\nFROM cinema\nWHERE id % 2 != 0 and description != 'boring'\nORDER BY rating DESC\n```","source":"_posts/LeetCode/620_not_boring_movies.md","raw":"---\ntitle: LeetCode刷题：620.Not Boring Movies\ndate: 2019-02-24 13:16:00\ncategories: LeetCode\ntags:\n  - 数据库\n---\n#### [620\\. Not Boring Movies](https://leetcode-cn.com/problems/not-boring-movies/)\nSQL架构\n```sql\nCreate table If Not Exists cinema (id int, movie varchar(255), description varchar(255), rating float(2, 1))\nTruncate table cinema\ninsert into cinema (id, movie, description, rating) values ('1', 'War', 'great 3D', '8.9')\ninsert into cinema (id, movie, description, rating) values ('2', 'Science', 'fiction', '8.5')\ninsert into cinema (id, movie, description, rating) values ('3', 'irish', 'boring', '6.2')\ninsert into cinema (id, movie, description, rating) values ('4', 'Ice song', 'Fantacy', '8.6')\ninsert into cinema (id, movie, description, rating) values ('5', 'House card', 'Interesting', '9.1')\n```\nX city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.\nPlease write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.\nFor example, table `cinema`:\n\n\n|   id    | movie     |  description |  rating   |\n|---------|-----------|--------------|-----------|\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n\n\nFor the example above, the output should be:\n\n\n|   id    | movie     |  description |  rating   |\n|---------|-----------|--------------|-----------|\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n\n\n##### 解题思路：\n通过`description`和`id`进行筛选，然后通过`rating`进行倒序排序（`DESC`）\n##### 解答：\n```sql\nSELECT id, movie, description, rating\nFROM cinema\nWHERE id % 2 != 0 and description != 'boring'\nORDER BY rating DESC\n```","slug":"LeetCode/620_not_boring_movies","published":1,"updated":"2019-04-01T11:40:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhk001nmetf8f6309cy","content":"<h4 id=\"620-Not-Boring-Movies\"><a href=\"#620-Not-Boring-Movies\" class=\"headerlink\" title=\"620. Not Boring Movies\"></a><a href=\"https://leetcode-cn.com/problems/not-boring-movies/\" target=\"_blank\" rel=\"noopener\">620. Not Boring Movies</a></h4><p>SQL架构</p>\n<pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> cinema <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> movie <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> description <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rating <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> cinema\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'War'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'great 3D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.9'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Science'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fiction'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.5'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'irish'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6.2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ice song'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fantacy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.6'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'House card'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Interesting'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9.1'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.<br>For example, table <code>cinema</code>:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>movie</th>\n<th>description</th>\n<th>rating</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>War</td>\n<td>great 3D</td>\n<td>8.9</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Science</td>\n<td>fiction</td>\n<td>8.5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>irish</td>\n<td>boring</td>\n<td>6.2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Ice song</td>\n<td>Fantacy</td>\n<td>8.6</td>\n</tr>\n<tr>\n<td>5</td>\n<td>House card</td>\n<td>Interesting</td>\n<td>9.1</td>\n</tr>\n</tbody></table>\n<p>For the example above, the output should be:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>movie</th>\n<th>description</th>\n<th>rating</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>House card</td>\n<td>Interesting</td>\n<td>9.1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>War</td>\n<td>great 3D</td>\n<td>8.9</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过<code>description</code>和<code>id</code>进行筛选，然后通过<code>rating</code>进行倒序排序（<code>DESC</code>）</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating\n<span class=\"token keyword\">FROM</span> cinema\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> description <span class=\"token operator\">!=</span> <span class=\"token string\">'boring'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> rating <span class=\"token keyword\">DESC</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"620-Not-Boring-Movies\"><a href=\"#620-Not-Boring-Movies\" class=\"headerlink\" title=\"620. Not Boring Movies\"></a><a href=\"https://leetcode-cn.com/problems/not-boring-movies/\" target=\"_blank\" rel=\"noopener\">620. Not Boring Movies</a></h4><p>SQL架构</p>\n<pre><code class=\"sql\">Create table If Not Exists cinema (id int, movie varchar(255), description varchar(255), rating float(2, 1))\nTruncate table cinema\ninsert into cinema (id, movie, description, rating) values (&#39;1&#39;, &#39;War&#39;, &#39;great 3D&#39;, &#39;8.9&#39;)\ninsert into cinema (id, movie, description, rating) values (&#39;2&#39;, &#39;Science&#39;, &#39;fiction&#39;, &#39;8.5&#39;)\ninsert into cinema (id, movie, description, rating) values (&#39;3&#39;, &#39;irish&#39;, &#39;boring&#39;, &#39;6.2&#39;)\ninsert into cinema (id, movie, description, rating) values (&#39;4&#39;, &#39;Ice song&#39;, &#39;Fantacy&#39;, &#39;8.6&#39;)\ninsert into cinema (id, movie, description, rating) values (&#39;5&#39;, &#39;House card&#39;, &#39;Interesting&#39;, &#39;9.1&#39;)</code></pre>\n<p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.<br>For example, table <code>cinema</code>:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>movie</th>\n<th>description</th>\n<th>rating</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>War</td>\n<td>great 3D</td>\n<td>8.9</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Science</td>\n<td>fiction</td>\n<td>8.5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>irish</td>\n<td>boring</td>\n<td>6.2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Ice song</td>\n<td>Fantacy</td>\n<td>8.6</td>\n</tr>\n<tr>\n<td>5</td>\n<td>House card</td>\n<td>Interesting</td>\n<td>9.1</td>\n</tr>\n</tbody></table>\n<p>For the example above, the output should be:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>movie</th>\n<th>description</th>\n<th>rating</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>House card</td>\n<td>Interesting</td>\n<td>9.1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>War</td>\n<td>great 3D</td>\n<td>8.9</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>通过<code>description</code>和<code>id</code>进行筛选，然后通过<code>rating</code>进行倒序排序（<code>DESC</code>）</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"sql\">SELECT id, movie, description, rating\nFROM cinema\nWHERE id % 2 != 0 and description != &#39;boring&#39;\nORDER BY rating DESC</code></pre>\n"},{"title":"LeetCode刷题：657.Robot Return to Origin","date":"2019-02-24T05:18:00.000Z","_content":"#### [657\\. Robot Return to Origin](https://leetcode-cn.com/problems/robot-return-to-origin/)\nThere is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at (0, 0)** after it completes its moves.\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\n\n**Note**: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n**Example 1:**\n>**Input:** \"UD\"\n>\n>**Output:** true \n>\n>**Explanation**: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\n**Example 2:**\n>**Input:** \"LL\"\n>\n>**Output:** false\n>\n>**Explanation**: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n##### 解题思路：\n设置四个标志位，利用switch-case判断moves的值，相应标志位+1。\n当‘上’=‘下’并且‘左’=‘右’的时候，机器人回到原点。\n##### 解答：\n```cpp\n// code 1：\n// 8ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        vector<int> sign(4,0);\n        for(auto c : moves)\n        {\n            switch(c)\n            {\n                case 'U':\n                    sign[0]++;\n                    break;\n                case 'D':\n                    sign[1]++;\n                    break;\n                case 'L':\n                    sign[2]++;\n                    break;\n                case 'R':\n                    sign[3]++;\n                    break;\n            }\n        }\n        return sign[0] == sign[1] && sign[2] == sign[3];\n    }\n};\n// code 2：\n// 4ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int a = 0, b = 0, c = 0, d = 0;\n        for(int i=0;i<moves.size();i++){\n            a+=moves[i]=='R';\n            b+=moves[i]=='L';\n            c+=moves[i]=='U';\n            d+=moves[i]=='D';\n        }\n        return a == b && c == d;\n    }\n};\n\n```","source":"_posts/LeetCode/657_robot_return_to_origin.md","raw":"---\ntitle: LeetCode刷题：657.Robot Return to Origin\ndate: 2019-02-24 13:18:00\ncategories: LeetCode\ntags:\n  - 字符串\n---\n#### [657\\. Robot Return to Origin](https://leetcode-cn.com/problems/robot-return-to-origin/)\nThere is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at (0, 0)** after it completes its moves.\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\n\n**Note**: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n**Example 1:**\n>**Input:** \"UD\"\n>\n>**Output:** true \n>\n>**Explanation**: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\n**Example 2:**\n>**Input:** \"LL\"\n>\n>**Output:** false\n>\n>**Explanation**: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n##### 解题思路：\n设置四个标志位，利用switch-case判断moves的值，相应标志位+1。\n当‘上’=‘下’并且‘左’=‘右’的时候，机器人回到原点。\n##### 解答：\n```cpp\n// code 1：\n// 8ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        vector<int> sign(4,0);\n        for(auto c : moves)\n        {\n            switch(c)\n            {\n                case 'U':\n                    sign[0]++;\n                    break;\n                case 'D':\n                    sign[1]++;\n                    break;\n                case 'L':\n                    sign[2]++;\n                    break;\n                case 'R':\n                    sign[3]++;\n                    break;\n            }\n        }\n        return sign[0] == sign[1] && sign[2] == sign[3];\n    }\n};\n// code 2：\n// 4ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int a = 0, b = 0, c = 0, d = 0;\n        for(int i=0;i<moves.size();i++){\n            a+=moves[i]=='R';\n            b+=moves[i]=='L';\n            c+=moves[i]=='U';\n            d+=moves[i]=='D';\n        }\n        return a == b && c == d;\n    }\n};\n\n```","slug":"LeetCode/657_robot_return_to_origin","published":1,"updated":"2019-04-01T11:32:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhm001qmetfoo4kb4p2","content":"<h4 id=\"657-Robot-Return-to-Origin\"><a href=\"#657-Robot-Return-to-Origin\" class=\"headerlink\" title=\"657. Robot Return to Origin\"></a><a href=\"https://leetcode-cn.com/problems/robot-return-to-origin/\" target=\"_blank\" rel=\"noopener\">657. Robot Return to Origin</a></h4><p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.<br>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\n<p><strong>Note</strong>: The way that the robot is “facing” is irrelevant. “R” will always make the robot move to the right once, “L” will always make it move left, etc. Also, assume that the magnitude of the robot’s movement is the same for each move.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “UD”</p>\n<p><strong>Output:</strong> true </p>\n<p><strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “LL”</p>\n<p><strong>Output:</strong> false</p>\n<p><strong>Explanation</strong>: The robot moves left twice. It ends up two “moves” to the left of the origin. We return false because it is not at the origin at the end of its moves.</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>设置四个标志位，利用switch-case判断moves的值，相应标志位+1。<br>当‘上’=‘下’并且‘左’=‘右’的时候，机器人回到原点。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// code 1：</span>\n<span class=\"token comment\" spellcheck=\"true\">// 8ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">judgeCircle</span><span class=\"token punctuation\">(</span>string moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> moves<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'U'</span><span class=\"token operator\">:</span>\n                    sign<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'D'</span><span class=\"token operator\">:</span>\n                    sign<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'L'</span><span class=\"token operator\">:</span>\n                    sign<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'R'</span><span class=\"token operator\">:</span>\n                    sign<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sign<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> sign<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> sign<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> sign<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// code 2：</span>\n<span class=\"token comment\" spellcheck=\"true\">// 4ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">judgeCircle</span><span class=\"token punctuation\">(</span>string moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>moves<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            a<span class=\"token operator\">+</span><span class=\"token operator\">=</span>moves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">+</span><span class=\"token operator\">=</span>moves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">;</span>\n            c<span class=\"token operator\">+</span><span class=\"token operator\">=</span>moves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'U'</span><span class=\"token punctuation\">;</span>\n            d<span class=\"token operator\">+</span><span class=\"token operator\">=</span>moves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"657-Robot-Return-to-Origin\"><a href=\"#657-Robot-Return-to-Origin\" class=\"headerlink\" title=\"657. Robot Return to Origin\"></a><a href=\"https://leetcode-cn.com/problems/robot-return-to-origin/\" target=\"_blank\" rel=\"noopener\">657. Robot Return to Origin</a></h4><p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.<br>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\n<p><strong>Note</strong>: The way that the robot is “facing” is irrelevant. “R” will always make the robot move to the right once, “L” will always make it move left, etc. Also, assume that the magnitude of the robot’s movement is the same for each move.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “UD”</p>\n<p><strong>Output:</strong> true </p>\n<p><strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “LL”</p>\n<p><strong>Output:</strong> false</p>\n<p><strong>Explanation</strong>: The robot moves left twice. It ends up two “moves” to the left of the origin. We return false because it is not at the origin at the end of its moves.</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>设置四个标志位，利用switch-case判断moves的值，相应标志位+1。<br>当‘上’=‘下’并且‘左’=‘右’的时候，机器人回到原点。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">// code 1：\n// 8ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        vector&lt;int&gt; sign(4,0);\n        for(auto c : moves)\n        {\n            switch(c)\n            {\n                case &#39;U&#39;:\n                    sign[0]++;\n                    break;\n                case &#39;D&#39;:\n                    sign[1]++;\n                    break;\n                case &#39;L&#39;:\n                    sign[2]++;\n                    break;\n                case &#39;R&#39;:\n                    sign[3]++;\n                    break;\n            }\n        }\n        return sign[0] == sign[1] &amp;&amp; sign[2] == sign[3];\n    }\n};\n// code 2：\n// 4ms\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int a = 0, b = 0, c = 0, d = 0;\n        for(int i=0;i&lt;moves.size();i++){\n            a+=moves[i]==&#39;R&#39;;\n            b+=moves[i]==&#39;L&#39;;\n            c+=moves[i]==&#39;U&#39;;\n            d+=moves[i]==&#39;D&#39;;\n        }\n        return a == b &amp;&amp; c == d;\n    }\n};\n</code></pre>\n"},{"title":"LeetCode刷题：627.Swap Salary","date":"2019-02-24T05:17:00.000Z","_content":"#### [627\\. Swap Salary](https://leetcode-cn.com/problems/swap-salary/)\nSQL架构\n```sql\ncreate table if not exists salary(id int, name varchar(100), sex char(1), salary int)\nTruncate table salary\ninsert into salary (id, name, sex, salary) values ('1', 'A', 'm', '2500')\ninsert into salary (id, name, sex, salary) values ('2', 'B', 'f', '1500')\ninsert into salary (id, name, sex, salary) values ('3', 'C', 'm', '5500')\ninsert into salary (id, name, sex, salary) values ('4', 'D', 'f', '500')\n```\nGiven a table `salary`, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.For example:\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n\nAfter running your query, the above salary table should have the following rows:\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n\n##### 解题思路：\n利用SQL中的case-when多条件判断语句，类似C++中的switch-case语句\n##### 解答：\n```sql\nUPDATE salary\nSET sex = (CASE sex WHEN 'm' THEN 'f'\n                    WHEN 'f' THEN 'm'\n           END)\n```","source":"_posts/LeetCode/627_swap_salary.md","raw":"---\ntitle: LeetCode刷题：627.Swap Salary\ndate: 2019-02-24 13:17:00\ncategories: LeetCode\ntags:\n  - 数据库\n---\n#### [627\\. Swap Salary](https://leetcode-cn.com/problems/swap-salary/)\nSQL架构\n```sql\ncreate table if not exists salary(id int, name varchar(100), sex char(1), salary int)\nTruncate table salary\ninsert into salary (id, name, sex, salary) values ('1', 'A', 'm', '2500')\ninsert into salary (id, name, sex, salary) values ('2', 'B', 'f', '1500')\ninsert into salary (id, name, sex, salary) values ('3', 'C', 'm', '5500')\ninsert into salary (id, name, sex, salary) values ('4', 'D', 'f', '500')\n```\nGiven a table `salary`, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.For example:\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n\nAfter running your query, the above salary table should have the following rows:\n\n| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n\n##### 解题思路：\n利用SQL中的case-when多条件判断语句，类似C++中的switch-case语句\n##### 解答：\n```sql\nUPDATE salary\nSET sex = (CASE sex WHEN 'm' THEN 'f'\n                    WHEN 'f' THEN 'm'\n           END)\n```","slug":"LeetCode/627_swap_salary","published":1,"updated":"2019-04-01T11:40:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhn001tmetfpxhkjses","content":"<h4 id=\"627-Swap-Salary\"><a href=\"#627-Swap-Salary\" class=\"headerlink\" title=\"627. Swap Salary\"></a><a href=\"https://leetcode-cn.com/problems/swap-salary/\" target=\"_blank\" rel=\"noopener\">627. Swap Salary</a></h4><p>SQL架构</p>\n<pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> salary<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sex char<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> salary <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> salary\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> salary <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2500'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> salary <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1500'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> salary <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5500'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> salary <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'500'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.For example:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>A</td>\n<td>m</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>f</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>m</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>f</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<p>After running your query, the above salary table should have the following rows:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>A</td>\n<td>f</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>m</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>f</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>m</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用SQL中的case-when多条件判断语句，类似C++中的switch-case语句</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> salary\n<span class=\"token keyword\">SET</span> sex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CASE</span> sex <span class=\"token keyword\">WHEN</span> <span class=\"token string\">'m'</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'f'</span>\n                    <span class=\"token keyword\">WHEN</span> <span class=\"token string\">'f'</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'m'</span>\n           <span class=\"token keyword\">END</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"627-Swap-Salary\"><a href=\"#627-Swap-Salary\" class=\"headerlink\" title=\"627. Swap Salary\"></a><a href=\"https://leetcode-cn.com/problems/swap-salary/\" target=\"_blank\" rel=\"noopener\">627. Swap Salary</a></h4><p>SQL架构</p>\n<pre><code class=\"sql\">create table if not exists salary(id int, name varchar(100), sex char(1), salary int)\nTruncate table salary\ninsert into salary (id, name, sex, salary) values (&#39;1&#39;, &#39;A&#39;, &#39;m&#39;, &#39;2500&#39;)\ninsert into salary (id, name, sex, salary) values (&#39;2&#39;, &#39;B&#39;, &#39;f&#39;, &#39;1500&#39;)\ninsert into salary (id, name, sex, salary) values (&#39;3&#39;, &#39;C&#39;, &#39;m&#39;, &#39;5500&#39;)\ninsert into salary (id, name, sex, salary) values (&#39;4&#39;, &#39;D&#39;, &#39;f&#39;, &#39;500&#39;)</code></pre>\n<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.For example:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>A</td>\n<td>m</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>f</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>m</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>f</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<p>After running your query, the above salary table should have the following rows:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>A</td>\n<td>f</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>m</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>f</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>m</td>\n<td>500</td>\n</tr>\n</tbody></table>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用SQL中的case-when多条件判断语句，类似C++中的switch-case语句</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"sql\">UPDATE salary\nSET sex = (CASE sex WHEN &#39;m&#39; THEN &#39;f&#39;\n                    WHEN &#39;f&#39; THEN &#39;m&#39;\n           END)</code></pre>\n"},{"title":"LeetCode刷题：709.To Lower Case","date":"2019-02-24T05:19:00.000Z","_content":"#### [709\\. To Lower Case](https://leetcode-cn.com/problems/to-lower-case/)\nImplement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n**Example 1:**\n>**Input:** \"Hello\"\n>\n>**Output:** \"hello\"\n\n**Example 2:**\n>**Input:** \"here\"\n>\n>**Output:** \"here\"\n\n**Example 3:**\n>**Input:** \"LOVELY\"\n>\n>**Output:** \"lovely\"\n\n##### 解题思路：\n利用C++ tolower()函数；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    string toLowerCase(string str) {\n        for(auto &letter : str)\n        {\n            letter = tolower(letter);\n        }\n        return str;\n    }\n};\n```","source":"_posts/LeetCode/709_to_lower_case.md","raw":"---\ntitle: LeetCode刷题：709.To Lower Case\ndate: 2019-02-24 13:19:00\ncategories: LeetCode\ntags:\n  - 字符串\n---\n#### [709\\. To Lower Case](https://leetcode-cn.com/problems/to-lower-case/)\nImplement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n**Example 1:**\n>**Input:** \"Hello\"\n>\n>**Output:** \"hello\"\n\n**Example 2:**\n>**Input:** \"here\"\n>\n>**Output:** \"here\"\n\n**Example 3:**\n>**Input:** \"LOVELY\"\n>\n>**Output:** \"lovely\"\n\n##### 解题思路：\n利用C++ tolower()函数；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    string toLowerCase(string str) {\n        for(auto &letter : str)\n        {\n            letter = tolower(letter);\n        }\n        return str;\n    }\n};\n```","slug":"LeetCode/709_to_lower_case","published":1,"updated":"2019-04-01T11:32:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhp001wmetfuahu7irh","content":"<h4 id=\"709-To-Lower-Case\"><a href=\"#709-To-Lower-Case\" class=\"headerlink\" title=\"709. To Lower Case\"></a><a href=\"https://leetcode-cn.com/problems/to-lower-case/\" target=\"_blank\" rel=\"noopener\">709. To Lower Case</a></h4><p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “Hello”</p>\n<p><strong>Output:</strong> “hello”</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “here”</p>\n<p><strong>Output:</strong> “here”</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “LOVELY”</p>\n<p><strong>Output:</strong> “lovely”</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用C++ tolower()函数；</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>letter <span class=\"token operator\">:</span> str<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            letter <span class=\"token operator\">=</span> <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"709-To-Lower-Case\"><a href=\"#709-To-Lower-Case\" class=\"headerlink\" title=\"709. To Lower Case\"></a><a href=\"https://leetcode-cn.com/problems/to-lower-case/\" target=\"_blank\" rel=\"noopener\">709. To Lower Case</a></h4><p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “Hello”</p>\n<p><strong>Output:</strong> “hello”</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “here”</p>\n<p><strong>Output:</strong> “here”</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “LOVELY”</p>\n<p><strong>Output:</strong> “lovely”</p>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>利用C++ tolower()函数；</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    string toLowerCase(string str) {\n        for(auto &amp;letter : str)\n        {\n            letter = tolower(letter);\n        }\n        return str;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：78.Subsets","date":"2019-02-24T05:02:00.000Z","_content":"#### [78\\. Subsets](https://leetcode-cn.com/problems/subsets/)\nGiven a set of **distinct** integers, *nums*, return all possible subsets (the power set).\n**Note:** The solution set must not contain duplicate subsets.\n\n**Example:**\n\n**Input:** nums = [1,2,3]\n\n**Output:**\n```\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n##### 解题思路：\n```\n对集合的每一个元素进行迭代，迭代时，我们保留原来的子集，并在原来的子集后面加入新的元素，之后再加入集合\n迭代过程如下\n[] -> 1 -> [1]\n[] [1] -> 2 -> [2] [1,2]\n[] [1] [2] [1,2] -> 3 -> [3] [1,3] [2,3] [1,2,3]\n[] [1] [2] [1,2] [3] [1,3] [2,3] [1,2,3]\n```\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> tmp;\n        result.push_back(tmp);\n        int len = nums.size();\n        for(int i =0; i < len; ++i){\n            int resLen = result.size();\n            for(int j=0; j < resLen; ++j){\n                vector<int> tmp = result[j];\n                tmp.push_back(nums[i]);\n                result.push_back(tmp);\n            }\n        }\n        return result;\n    }\n};\n\n```","source":"_posts/LeetCode/78_subsets.md","raw":"---\ntitle: LeetCode刷题：78.Subsets\ndate: 2019-02-24 13:02:00\ncategories: LeetCode\ntags:\n  - 位运算\n  - 数组\n  - 回溯算法\n---\n#### [78\\. Subsets](https://leetcode-cn.com/problems/subsets/)\nGiven a set of **distinct** integers, *nums*, return all possible subsets (the power set).\n**Note:** The solution set must not contain duplicate subsets.\n\n**Example:**\n\n**Input:** nums = [1,2,3]\n\n**Output:**\n```\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n##### 解题思路：\n```\n对集合的每一个元素进行迭代，迭代时，我们保留原来的子集，并在原来的子集后面加入新的元素，之后再加入集合\n迭代过程如下\n[] -> 1 -> [1]\n[] [1] -> 2 -> [2] [1,2]\n[] [1] [2] [1,2] -> 3 -> [3] [1,3] [2,3] [1,2,3]\n[] [1] [2] [1,2] [3] [1,3] [2,3] [1,2,3]\n```\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> tmp;\n        result.push_back(tmp);\n        int len = nums.size();\n        for(int i =0; i < len; ++i){\n            int resLen = result.size();\n            for(int j=0; j < resLen; ++j){\n                vector<int> tmp = result[j];\n                tmp.push_back(nums[i]);\n                result.push_back(tmp);\n            }\n        }\n        return result;\n    }\n};\n\n```","slug":"LeetCode/78_subsets","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhq0020metfgb70xyo2","content":"<h4 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. Subsets</a></h4><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).<br><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n<p><strong>Example:</strong></p>\n<p><strong>Input:</strong> nums = [1,2,3]</p>\n<p><strong>Output:</strong></p>\n<pre><code>[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><pre><code>对集合的每一个元素进行迭代，迭代时，我们保留原来的子集，并在原来的子集后面加入新的元素，之后再加入集合\n迭代过程如下\n[] -&gt; 1 -&gt; [1]\n[] [1] -&gt; 2 -&gt; [2] [1,2]\n[] [1] [2] [1,2] -&gt; 3 -&gt; [3] [1,3] [2,3] [1,2,3]\n[] [1] [2] [1,2] [3] [1,3] [2,3] [1,2,3]</code></pre><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> result<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> resLen <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> resLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. Subsets</a></h4><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).<br><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n<p><strong>Example:</strong></p>\n<p><strong>Input:</strong> nums = [1,2,3]</p>\n<p><strong>Output:</strong></p>\n<pre><code>[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]</code></pre><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><pre><code>对集合的每一个元素进行迭代，迭代时，我们保留原来的子集，并在原来的子集后面加入新的元素，之后再加入集合\n迭代过程如下\n[] -&gt; 1 -&gt; [1]\n[] [1] -&gt; 2 -&gt; [2] [1,2]\n[] [1] [2] [1,2] -&gt; 3 -&gt; [3] [1,3] [2,3] [1,2,3]\n[] [1] [2] [1,2] [3] [1,3] [2,3] [1,2,3]</code></pre><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        vector&lt;int&gt; tmp;\n        result.push_back(tmp);\n        int len = nums.size();\n        for(int i =0; i &lt; len; ++i){\n            int resLen = result.size();\n            for(int j=0; j &lt; resLen; ++j){\n                vector&lt;int&gt; tmp = result[j];\n                tmp.push_back(nums[i]);\n                result.push_back(tmp);\n            }\n        }\n        return result;\n    }\n};\n</code></pre>\n"},{"title":"LeetCode刷题：7.Reverse Integer","date":"2019-02-27T13:49:00.000Z","_content":"#### [7\\. Reverse Integer](https://leetcode-cn.com/problems/reverse-integer/)\nGiven a 32-bit signed integer, reverse digits of an integer.\n**Example 1:**\n\n>**Input:** `123`\n>\n>**Output:** `321`\n\n**Example 2:**\n>**Input:** `-123`\n>\n>**Output:** `-321`\n\n**Example 3:**\n>**Input:** `120`\n>\n>**Output:** `21`\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n##### 解题思路：\n初始化一个`long long`类型的变量`ans`用于保存反转后的整数，每次执行以下操作：\n1. `ans = ans * 10 + x % 10;`\n2. `x /= 10;`\n\n最后判断`ans`是否溢出，溢出则返回0，否则返回`ans`\n*在第一次尝试时，忽略了反转后的数字可能出现溢出的情况，定义int类型的ans会导致溢出，所以将ans定义为 long long类型*\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int reverse(int x) {\n        //INT_MAX : 2147483647 \n        //INT_MIN : -2147483648\n        long long ans = 0;\n\t    while (x != 0) {\n            ans = ans * 10 + x % 10;\n            x /= 10;\n        }\n\t    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\n    }\n};\n```\n","source":"_posts/LeetCode/7_reverse_integer.md","raw":"---\ntitle: LeetCode刷题：7.Reverse Integer\ndate: 2019-02-27 21:49:00\ncategories: LeetCode\ntags:\n  - 数学\n---\n#### [7\\. Reverse Integer](https://leetcode-cn.com/problems/reverse-integer/)\nGiven a 32-bit signed integer, reverse digits of an integer.\n**Example 1:**\n\n>**Input:** `123`\n>\n>**Output:** `321`\n\n**Example 2:**\n>**Input:** `-123`\n>\n>**Output:** `-321`\n\n**Example 3:**\n>**Input:** `120`\n>\n>**Output:** `21`\n\n**Note:**\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n##### 解题思路：\n初始化一个`long long`类型的变量`ans`用于保存反转后的整数，每次执行以下操作：\n1. `ans = ans * 10 + x % 10;`\n2. `x /= 10;`\n\n最后判断`ans`是否溢出，溢出则返回0，否则返回`ans`\n*在第一次尝试时，忽略了反转后的数字可能出现溢出的情况，定义int类型的ans会导致溢出，所以将ans定义为 long long类型*\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int reverse(int x) {\n        //INT_MAX : 2147483647 \n        //INT_MIN : -2147483648\n        long long ans = 0;\n\t    while (x != 0) {\n            ans = ans * 10 + x % 10;\n            x /= 10;\n        }\n\t    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\n    }\n};\n```\n","slug":"LeetCode/7_reverse_integer","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhr0023metff8c30cs8","content":"<h4 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7. Reverse Integer\"></a><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. Reverse Integer</a></h4><p>Given a 32-bit signed integer, reverse digits of an integer.<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>123</code></p>\n<p><strong>Output:</strong> <code>321</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>-123</code></p>\n<p><strong>Output:</strong> <code>-321</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>120</code></p>\n<p><strong>Output:</strong> <code>21</code></p>\n</blockquote>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>初始化一个<code>long long</code>类型的变量<code>ans</code>用于保存反转后的整数，每次执行以下操作：</p>\n<ol>\n<li><code>ans = ans * 10 + x % 10;</code></li>\n<li><code>x /= 10;</code></li>\n</ol>\n<p>最后判断<code>ans</code>是否溢出，溢出则返回0，否则返回<code>ans</code><br><em>在第一次尝试时，忽略了反转后的数字可能出现溢出的情况，定义int类型的ans会导致溢出，所以将ans定义为 long long类型</em></p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//INT_MAX : 2147483647 </span>\n        <span class=\"token comment\" spellcheck=\"true\">//INT_MIN : -2147483648</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">></span> INT_MAX <span class=\"token operator\">||</span> ans <span class=\"token operator\">&lt;</span> INT_MIN<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7. Reverse Integer\"></a><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. Reverse Integer</a></h4><p>Given a 32-bit signed integer, reverse digits of an integer.<br><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>123</code></p>\n<p><strong>Output:</strong> <code>321</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>-123</code></p>\n<p><strong>Output:</strong> <code>-321</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>120</code></p>\n<p><strong>Output:</strong> <code>21</code></p>\n</blockquote>\n<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>初始化一个<code>long long</code>类型的变量<code>ans</code>用于保存反转后的整数，每次执行以下操作：</p>\n<ol>\n<li><code>ans = ans * 10 + x % 10;</code></li>\n<li><code>x /= 10;</code></li>\n</ol>\n<p>最后判断<code>ans</code>是否溢出，溢出则返回0，否则返回<code>ans</code><br><em>在第一次尝试时，忽略了反转后的数字可能出现溢出的情况，定义int类型的ans会导致溢出，所以将ans定义为 long long类型</em></p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    int reverse(int x) {\n        //INT_MAX : 2147483647 \n        //INT_MIN : -2147483648\n        long long ans = 0;\n        while (x != 0) {\n            ans = ans * 10 + x % 10;\n            x /= 10;\n        }\n        return (ans &gt; INT_MAX || ans &lt; INT_MIN) ? 0 : ans;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：771.Jewels and Stones","date":"2019-02-24T05:20:00.000Z","_content":"#### [771\\. Jewels and Stones](https://leetcode-cn.com/problems/jewels-and-stones/)\nYou're given strings `J`representing the types of stones that are jewels, and `S` representing the stones you have.  Each character in `S` is a type of stone you have.  You want to know how many of the stones you have are also jewels.\nThe letters in `J` are guaranteed distinct, and all characters in `J` and `S` are letters. Letters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.\n\n**Example 1:**\n>**Input:**J = \"aA\", S = \"aAAbbbb\"\n>\n>**Output:** 3\n\n**Example 2:**\n>**Input:** J = \"z\", S = \"ZZ\"\n>\n>**Output:** 0\n\n**Note:**\n*   `S` and `J` will consist of letters and have length at most 50.\n*   The characters in `J` are distinct.\n\n##### 解题思路：\n+ 思路1： 遍历J和S，两者相等，计数+1；\n+ 思路2： 创建临时数组a[256]，先以J中元素的ASCII值作为a的索引并作标记。后以S中元素的ASCII值作为a的索引，判断该位置是否为零，如果不为零，则计数+1；\n+ 思路3： 和2类似，不过将大小写字母分开，减少了数组的长度。\n##### 解答：\n```cpp\n//code 1：\n//运行时间大于4ms；\nclass Solution {\npublic:\n\tint numJewelsInStones(string J, string S) {\n\t\tint num = 0;\n\t\tfor (int i = 0; i < J.length(); i++)\n\t\t{\n\t\t\tfor (int j = 0; j< S.length(); j++)\n\t\t\t\tif (J[i] == S[j])\n\t\t\t\t\tnum += 1;\n\t\t}\n\t\treturn num;\n\t}\n};\n//code 2:\n//运行时间4ms；\nclass Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n        char a[256]={0}; \n        for(int i=0;i<J.length();++i)\n            a[J[i]]++; //相应字母的ASCII值作为索引；\n        int ans=0; \n        for(int i=0;i<S.length();++i)\n            if(a[S[i]]) \n                ans++;\n        return ans;     \n    }\n};\n// code  3:\n//运行时间0ms；\nclass Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n        int a_upper[26] = {0} , a_lower[26] = {0};      \n        for(auto ch : J)\n        {\n            int x;            \n            if(isupper(ch))\n            {\n                x = ch - 'A';\n                a_upper[x] = 1;\n            }\n            else\n            {\n                x = ch - 'a';\n                a_lower[x] = 1;\n            }\n        } \n        int num = 0;\n        for(auto ch : S)\n        {\n            int x;\n            if(isupper(ch))\n            {\n                x = ch - 'A';\n                if(a_upper[x])  ++num;\n            }\n            else\n            {\n                x = ch - 'a';\n                if(a_lower[x])  ++num;\n            } \n        } \n        return num;\n    }\n};\n```","source":"_posts/LeetCode/771_jewels_and_stones.md","raw":"---\ntitle: LeetCode刷题：771.Jewels and Stones\ndate: 2019-02-24 13:20:00\ncategories: LeetCode\ntags:\n  - 哈希表\n---\n#### [771\\. Jewels and Stones](https://leetcode-cn.com/problems/jewels-and-stones/)\nYou're given strings `J`representing the types of stones that are jewels, and `S` representing the stones you have.  Each character in `S` is a type of stone you have.  You want to know how many of the stones you have are also jewels.\nThe letters in `J` are guaranteed distinct, and all characters in `J` and `S` are letters. Letters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.\n\n**Example 1:**\n>**Input:**J = \"aA\", S = \"aAAbbbb\"\n>\n>**Output:** 3\n\n**Example 2:**\n>**Input:** J = \"z\", S = \"ZZ\"\n>\n>**Output:** 0\n\n**Note:**\n*   `S` and `J` will consist of letters and have length at most 50.\n*   The characters in `J` are distinct.\n\n##### 解题思路：\n+ 思路1： 遍历J和S，两者相等，计数+1；\n+ 思路2： 创建临时数组a[256]，先以J中元素的ASCII值作为a的索引并作标记。后以S中元素的ASCII值作为a的索引，判断该位置是否为零，如果不为零，则计数+1；\n+ 思路3： 和2类似，不过将大小写字母分开，减少了数组的长度。\n##### 解答：\n```cpp\n//code 1：\n//运行时间大于4ms；\nclass Solution {\npublic:\n\tint numJewelsInStones(string J, string S) {\n\t\tint num = 0;\n\t\tfor (int i = 0; i < J.length(); i++)\n\t\t{\n\t\t\tfor (int j = 0; j< S.length(); j++)\n\t\t\t\tif (J[i] == S[j])\n\t\t\t\t\tnum += 1;\n\t\t}\n\t\treturn num;\n\t}\n};\n//code 2:\n//运行时间4ms；\nclass Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n        char a[256]={0}; \n        for(int i=0;i<J.length();++i)\n            a[J[i]]++; //相应字母的ASCII值作为索引；\n        int ans=0; \n        for(int i=0;i<S.length();++i)\n            if(a[S[i]]) \n                ans++;\n        return ans;     \n    }\n};\n// code  3:\n//运行时间0ms；\nclass Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n        int a_upper[26] = {0} , a_lower[26] = {0};      \n        for(auto ch : J)\n        {\n            int x;            \n            if(isupper(ch))\n            {\n                x = ch - 'A';\n                a_upper[x] = 1;\n            }\n            else\n            {\n                x = ch - 'a';\n                a_lower[x] = 1;\n            }\n        } \n        int num = 0;\n        for(auto ch : S)\n        {\n            int x;\n            if(isupper(ch))\n            {\n                x = ch - 'A';\n                if(a_upper[x])  ++num;\n            }\n            else\n            {\n                x = ch - 'a';\n                if(a_lower[x])  ++num;\n            } \n        } \n        return num;\n    }\n};\n```","slug":"LeetCode/771_jewels_and_stones","published":1,"updated":"2019-04-01T11:34:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhs0025metfne4a09ck","content":"<h4 id=\"771-Jewels-and-Stones\"><a href=\"#771-Jewels-and-Stones\" class=\"headerlink\" title=\"771. Jewels and Stones\"></a><a href=\"https://leetcode-cn.com/problems/jewels-and-stones/\" target=\"_blank\" rel=\"noopener\">771. Jewels and Stones</a></h4><p>You’re given strings <code>J</code>representing the types of stones that are jewels, and <code>S</code> representing the stones you have.  Each character in <code>S</code> is a type of stone you have.  You want to know how many of the stones you have are also jewels.<br>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong>J = “aA”, S = “aAAbbbb”</p>\n<p><strong>Output:</strong> 3</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> J = “z”, S = “ZZ”</p>\n<p><strong>Output:</strong> 0</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\n<li>The characters in <code>J</code> are distinct.</li>\n</ul>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1： 遍历J和S，两者相等，计数+1；</li>\n<li>思路2： 创建临时数组a[256]，先以J中元素的ASCII值作为a的索引并作标记。后以S中元素的ASCII值作为a的索引，判断该位置是否为零，如果不为零，则计数+1；</li>\n<li>思路3： 和2类似，不过将大小写字母分开，减少了数组的长度。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//code 1：</span>\n<span class=\"token comment\" spellcheck=\"true\">//运行时间大于4ms；</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">numJewelsInStones</span><span class=\"token punctuation\">(</span>string J<span class=\"token punctuation\">,</span> string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> J<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>J<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                  num <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//code 2:</span>\n<span class=\"token comment\" spellcheck=\"true\">//运行时间4ms；</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">numJewelsInStones</span><span class=\"token punctuation\">(</span>string J<span class=\"token punctuation\">,</span> string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>J<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n          a<span class=\"token punctuation\">[</span>J<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//相应字母的ASCII值作为索引；</span>\n      <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n              ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>     \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// code  3:</span>\n<span class=\"token comment\" spellcheck=\"true\">//运行时间0ms；</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">numJewelsInStones</span><span class=\"token punctuation\">(</span>string J<span class=\"token punctuation\">,</span> string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> a_upper<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> a_lower<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>      \n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ch <span class=\"token operator\">:</span> J<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>            \n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isupper</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n              x <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n              a_upper<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">{</span>\n              x <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n              a_lower<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> \n      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ch <span class=\"token operator\">:</span> S<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isupper</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n              x <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a_upper<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">{</span>\n              x <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a_lower<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span> \n      <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"771-Jewels-and-Stones\"><a href=\"#771-Jewels-and-Stones\" class=\"headerlink\" title=\"771. Jewels and Stones\"></a><a href=\"https://leetcode-cn.com/problems/jewels-and-stones/\" target=\"_blank\" rel=\"noopener\">771. Jewels and Stones</a></h4><p>You’re given strings <code>J</code>representing the types of stones that are jewels, and <code>S</code> representing the stones you have.  Each character in <code>S</code> is a type of stone you have.  You want to know how many of the stones you have are also jewels.<br>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong>J = “aA”, S = “aAAbbbb”</p>\n<p><strong>Output:</strong> 3</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> J = “z”, S = “ZZ”</p>\n<p><strong>Output:</strong> 0</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\n<li>The characters in <code>J</code> are distinct.</li>\n</ul>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>思路1： 遍历J和S，两者相等，计数+1；</li>\n<li>思路2： 创建临时数组a[256]，先以J中元素的ASCII值作为a的索引并作标记。后以S中元素的ASCII值作为a的索引，判断该位置是否为零，如果不为零，则计数+1；</li>\n<li>思路3： 和2类似，不过将大小写字母分开，减少了数组的长度。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">//code 1：\n//运行时间大于4ms；\nclass Solution {\npublic:\n  int numJewelsInStones(string J, string S) {\n      int num = 0;\n      for (int i = 0; i &lt; J.length(); i++)\n      {\n          for (int j = 0; j&lt; S.length(); j++)\n              if (J[i] == S[j])\n                  num += 1;\n      }\n      return num;\n  }\n};\n//code 2:\n//运行时间4ms；\nclass Solution {\npublic:\n  int numJewelsInStones(string J, string S) {\n      char a[256]={0}; \n      for(int i=0;i&lt;J.length();++i)\n          a[J[i]]++; //相应字母的ASCII值作为索引；\n      int ans=0; \n      for(int i=0;i&lt;S.length();++i)\n          if(a[S[i]]) \n              ans++;\n      return ans;     \n  }\n};\n// code  3:\n//运行时间0ms；\nclass Solution {\npublic:\n  int numJewelsInStones(string J, string S) {\n      int a_upper[26] = {0} , a_lower[26] = {0};      \n      for(auto ch : J)\n      {\n          int x;            \n          if(isupper(ch))\n          {\n              x = ch - &#39;A&#39;;\n              a_upper[x] = 1;\n          }\n          else\n          {\n              x = ch - &#39;a&#39;;\n              a_lower[x] = 1;\n          }\n      } \n      int num = 0;\n      for(auto ch : S)\n      {\n          int x;\n          if(isupper(ch))\n          {\n              x = ch - &#39;A&#39;;\n              if(a_upper[x])  ++num;\n          }\n          else\n          {\n              x = ch - &#39;a&#39;;\n              if(a_lower[x])  ++num;\n          } \n      } \n      return num;\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：804.Unique Morse Code Words","date":"2019-02-24T05:21:00.000Z","_content":"#### [804\\. Unique Morse Code Words](https://leetcode-cn.com/problems/unique-morse-code-words/)\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `\"a\"` maps to `\".-\"`, `\"b\"`maps to `\"-...\"`, `\"c\"` maps to `\"-.-.\"`, and so on.\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n```\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n```\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\nReturn the number of different transformations among all words we have.\n\n**Example:**\n>**Input:** `words = [\"gin\", \"zen\", \"gig\", \"msg\"]`\n>\n>**Output:** `2`\n>\n>**Explanation:** \nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\n\n**Note:**\n*   The length of `words` will be at most `100`.\n*   Each `words[i]` will have length in range `[1, 12]`.\n*   `words[i]` will only consist of lowercase letters.\n##### 解题思路：\n将words中word的字母逐个转换为morsecode，并存入临时string，之后将其插入到无序容器`unordered_set<string> result;`中，然后获取不同元素的数量。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int uniqueMorseRepresentations(vector<string>& words) {\n        unordered_set<string> result;\n        //vector<string>morseWords;\n        vector<string> morseCode{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\n        for(auto word = words.begin(); word != words.end(); ++word)\n        {\n            string tmp = \"\";\n            for(auto letter : *word)\n            {\n                tmp += morseCode[letter - 'a'];\n            }\n            result.insert(tmp);\n        }\n        return result.size();\n    }\n};\n```","source":"_posts/LeetCode/804_unique_morse_code_words.md","raw":"---\ntitle: LeetCode刷题：804.Unique Morse Code Words\ndate: 2019-02-24 13:21:00\ncategories: LeetCode\ntags:\n  - 字符串\n---\n#### [804\\. Unique Morse Code Words](https://leetcode-cn.com/problems/unique-morse-code-words/)\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `\"a\"` maps to `\".-\"`, `\"b\"`maps to `\"-...\"`, `\"c\"` maps to `\"-.-.\"`, and so on.\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n```\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n```\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\nReturn the number of different transformations among all words we have.\n\n**Example:**\n>**Input:** `words = [\"gin\", \"zen\", \"gig\", \"msg\"]`\n>\n>**Output:** `2`\n>\n>**Explanation:** \nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\n\n**Note:**\n*   The length of `words` will be at most `100`.\n*   Each `words[i]` will have length in range `[1, 12]`.\n*   `words[i]` will only consist of lowercase letters.\n##### 解题思路：\n将words中word的字母逐个转换为morsecode，并存入临时string，之后将其插入到无序容器`unordered_set<string> result;`中，然后获取不同元素的数量。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int uniqueMorseRepresentations(vector<string>& words) {\n        unordered_set<string> result;\n        //vector<string>morseWords;\n        vector<string> morseCode{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\n        for(auto word = words.begin(); word != words.end(); ++word)\n        {\n            string tmp = \"\";\n            for(auto letter : *word)\n            {\n                tmp += morseCode[letter - 'a'];\n            }\n            result.insert(tmp);\n        }\n        return result.size();\n    }\n};\n```","slug":"LeetCode/804_unique_morse_code_words","published":1,"updated":"2019-04-01T11:32:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhu0028metf2hx66gxn","content":"<h4 id=\"804-Unique-Morse-Code-Words\"><a href=\"#804-Unique-Morse-Code-Words\" class=\"headerlink\" title=\"804. Unique Morse Code Words\"></a><a href=\"https://leetcode-cn.com/problems/unique-morse-code-words/\" target=\"_blank\" rel=\"noopener\">804. Unique Morse Code Words</a></h4><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code>maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.<br>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n<pre><code>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</code></pre><p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-..–…”, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.<br>Return the number of different transformations among all words we have.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong><br>The transformation of each word is:<br>“gin” -&gt; “–…-.”<br>“zen” -&gt; “–…-.”<br>“gig” -&gt; “–…–.”<br>“msg” -&gt; “–…–.”<br>There are 2 different transformations, “–…-.” and “–…–.”.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>The length of <code>words</code> will be at most <code>100</code>.</li>\n<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\n<li><code>words[i]</code> will only consist of lowercase letters.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>将words中word的字母逐个转换为morsecode，并存入临时string，之后将其插入到无序容器<code>unordered_set&lt;string&gt; result;</code>中，然后获取不同元素的数量。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">uniqueMorseRepresentations</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    unordered_set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//vector&lt;string>morseWords;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> morseCode<span class=\"token punctuation\">{</span><span class=\"token string\">\".-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-...\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-.-.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-..\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"..-.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"--.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"....\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".---\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-.-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".-..\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".--.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"--.-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".-.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"..-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"...-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".--\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-..-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-.--\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"--..\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> word <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> word <span class=\"token operator\">!=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>word<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        string tmp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> letter <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>word<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            tmp <span class=\"token operator\">+</span><span class=\"token operator\">=</span> morseCode<span class=\"token punctuation\">[</span>letter <span class=\"token operator\">-</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"804-Unique-Morse-Code-Words\"><a href=\"#804-Unique-Morse-Code-Words\" class=\"headerlink\" title=\"804. Unique Morse Code Words\"></a><a href=\"https://leetcode-cn.com/problems/unique-morse-code-words/\" target=\"_blank\" rel=\"noopener\">804. Unique Morse Code Words</a></h4><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code>maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.<br>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n<pre><code>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</code></pre><p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-..–…”, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.<br>Return the number of different transformations among all words we have.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n<p><strong>Explanation:</strong><br>The transformation of each word is:<br>“gin” -&gt; “–…-.”<br>“zen” -&gt; “–…-.”<br>“gig” -&gt; “–…–.”<br>“msg” -&gt; “–…–.”<br>There are 2 different transformations, “–…-.” and “–…–.”.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>The length of <code>words</code> will be at most <code>100</code>.</li>\n<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\n<li><code>words[i]</code> will only consist of lowercase letters.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>将words中word的字母逐个转换为morsecode，并存入临时string，之后将其插入到无序容器<code>unordered_set&lt;string&gt; result;</code>中，然后获取不同元素的数量。<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nint uniqueMorseRepresentations(vector&lt;string&gt;&amp; words) {\n    unordered_set&lt;string&gt; result;\n    //vector&lt;string&gt;morseWords;\n    vector&lt;string&gt; morseCode{&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;};\n    for(auto word = words.begin(); word != words.end(); ++word)\n    {\n        string tmp = &quot;&quot;;\n        for(auto letter : *word)\n        {\n            tmp += morseCode[letter - &#39;a&#39;];\n        }\n        result.insert(tmp);\n    }\n    return result.size();\n}\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：807.Max Increase to Keep City Skyline","date":"2019-02-24T05:22:00.000Z","_content":"#### [807\\. Max Increase to Keep City Skyline](https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/)\nIn a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. \nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.\nWhat is the maximum total sum that the height of the buildings can be increased?\n\n**Example:**\n>**Input:** `grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]`\n>\n>**Output:** `35`\n>\n>**Explanation:** \n```\nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n```\n**Notes:**\n*   `1 < grid.length = grid[0].length <= 50`.\n*   All heights `grid[i][j]` are in the range `[0, 100]`.\n*   All buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.\n##### 解题思路：\n* 遍历`grid`获取skyline数值存入到`col`和`row`中；\n* 遍历`grid`，利用`col`和`row`中最小的skyline值来计算最大增量，最后得出结果；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n\tint len = grid.size();\n    int result = 0;\n\tvector<int> col(len, 0), row(len, 0);\n\tfor (int i = 0; i < len; ++i) {\n\t\tfor (int j = 0; j < len; ++j) {\n\t\t\trow[i] = max(row[i], grid[i][j]);\n\t\t\tcol[j] = max(col[j], grid[i][j]);\n\t\t}\n\t}\n\tfor (int i = 0; i < len; ++i)\n\t\tfor (int j = 0; j < len; ++j)\n\t\t\tresult += min(row[i], col[j]) - grid[i][j];\n\treturn result;\n}\n};\n```","source":"_posts/LeetCode/807_max_increase_to_keep_city_skyline.md","raw":"---\ntitle: LeetCode刷题：807.Max Increase to Keep City Skyline\ndate: 2019-02-24 13:22:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [807\\. Max Increase to Keep City Skyline](https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/)\nIn a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. \nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.\nWhat is the maximum total sum that the height of the buildings can be increased?\n\n**Example:**\n>**Input:** `grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]`\n>\n>**Output:** `35`\n>\n>**Explanation:** \n```\nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n```\n**Notes:**\n*   `1 < grid.length = grid[0].length <= 50`.\n*   All heights `grid[i][j]` are in the range `[0, 100]`.\n*   All buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.\n##### 解题思路：\n* 遍历`grid`获取skyline数值存入到`col`和`row`中；\n* 遍历`grid`，利用`col`和`row`中最小的skyline值来计算最大增量，最后得出结果；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n\tint len = grid.size();\n    int result = 0;\n\tvector<int> col(len, 0), row(len, 0);\n\tfor (int i = 0; i < len; ++i) {\n\t\tfor (int j = 0; j < len; ++j) {\n\t\t\trow[i] = max(row[i], grid[i][j]);\n\t\t\tcol[j] = max(col[j], grid[i][j]);\n\t\t}\n\t}\n\tfor (int i = 0; i < len; ++i)\n\t\tfor (int j = 0; j < len; ++j)\n\t\t\tresult += min(row[i], col[j]) - grid[i][j];\n\treturn result;\n}\n};\n```","slug":"LeetCode/807_max_increase_to_keep_city_skyline","published":1,"updated":"2019-04-01T11:52:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhv002ametfkp8yvhwp","content":"<h4 id=\"807-Max-Increase-to-Keep-City-Skyline\"><a href=\"#807-Max-Increase-to-Keep-City-Skyline\" class=\"headerlink\" title=\"807. Max Increase to Keep City Skyline\"></a><a href=\"https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/\" target=\"_blank\" rel=\"noopener\">807. Max Increase to Keep City Skyline</a></h4><p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well.<br>At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.<br>What is the maximum total sum that the height of the buildings can be increased?</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</code></p>\n<p><strong>Output:</strong> <code>35</code></p>\n<p><strong>Explanation:</strong> </p>\n<pre><code>The grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]</code></pre><p><strong>Notes:</strong></p>\n<ul>\n<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li>\n<li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li>\n<li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li>\n</ul>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>遍历<code>grid</code>获取skyline数值存入到<code>col</code>和<code>row</code>中；</li>\n<li>遍历<code>grid</code>，利用<code>col</code>和<code>row</code>中最小的skyline值来计算最大增量，最后得出结果；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">maxIncreaseKeepingSkyline</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">col</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">row</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n          result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"807-Max-Increase-to-Keep-City-Skyline\"><a href=\"#807-Max-Increase-to-Keep-City-Skyline\" class=\"headerlink\" title=\"807. Max Increase to Keep City Skyline\"></a><a href=\"https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/\" target=\"_blank\" rel=\"noopener\">807. Max Increase to Keep City Skyline</a></h4><p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well.<br>At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.<br>What is the maximum total sum that the height of the buildings can be increased?</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</code></p>\n<p><strong>Output:</strong> <code>35</code></p>\n<p><strong>Explanation:</strong> </p>\n<pre><code>The grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]</code></pre><p><strong>Notes:</strong></p>\n<ul>\n<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li>\n<li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li>\n<li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li>\n</ul>\n</blockquote>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>遍历<code>grid</code>获取skyline数值存入到<code>col</code>和<code>row</code>中；</li>\n<li>遍历<code>grid</code>，利用<code>col</code>和<code>row</code>中最小的skyline值来计算最大增量，最后得出结果；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n  int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n  int len = grid.size();\n  int result = 0;\n  vector&lt;int&gt; col(len, 0), row(len, 0);\n  for (int i = 0; i &lt; len; ++i) {\n      for (int j = 0; j &lt; len; ++j) {\n          row[i] = max(row[i], grid[i][j]);\n          col[j] = max(col[j], grid[i][j]);\n      }\n  }\n  for (int i = 0; i &lt; len; ++i)\n      for (int j = 0; j &lt; len; ++j)\n          result += min(row[i], col[j]) - grid[i][j];\n  return result;\n}\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：852.Peak Index in a Mountain Array","date":"2019-02-24T05:24:00.000Z","_content":"#### [852\\. Peak Index in a Mountain Array](https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/)\nLet's call an array `A` a *mountain* if the following properties hold:\n*   `A.length >= 3`\n*   There exists some `0 < i < A.length - 1` such that `A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]`\nGiven an array that is definitely a mountain, return any `i` such that `A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]`.\n\n**Example 1:**\n>**Input:** `[0,1,0]`\n>\n>**Output:** `1`\n\n**Example 2:**\n>**Input:** `[0,2,1,0]`\n>\n>**Output:** `1`\n\n**Note:**\n1.  `3 <= A.length <= 10000`\n2.  `0 <= A[i] <= 10^6`\n3.  A is a mountain, as defined above.\n##### 解题思路：\n指定临时变量`peak`和`peak_index`，`peak`与`A[i]`进行比较，若peak小于A[i]，则令`peak = A[i]; peak_index = i;`，遍历数组，直到`peak`取到最大值，`peak_index`为`peak`取最大时的i值\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int peakIndexInMountainArray(vector<int>& A) {\n        int peak = 0, peak_index = 0;\n        auto len = A.size() - 1;\n        for(int i = 0; i < len; ++i)\n        {\n            if(peak < A[i])\n            {\n                peak = A[i];\n                peak_index = i;\n            }\n        }\n        return peak_index;\n    }\n};\n```","source":"_posts/LeetCode/852_peak_index_in_a_mountain_array.md","raw":"---\ntitle: LeetCode刷题：852.Peak Index in a Mountain Array\ndate: 2019-02-24 13:24:00\ncategories: LeetCode\ntags:\n  - 二分查找\n---\n#### [852\\. Peak Index in a Mountain Array](https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/)\nLet's call an array `A` a *mountain* if the following properties hold:\n*   `A.length >= 3`\n*   There exists some `0 < i < A.length - 1` such that `A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]`\nGiven an array that is definitely a mountain, return any `i` such that `A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]`.\n\n**Example 1:**\n>**Input:** `[0,1,0]`\n>\n>**Output:** `1`\n\n**Example 2:**\n>**Input:** `[0,2,1,0]`\n>\n>**Output:** `1`\n\n**Note:**\n1.  `3 <= A.length <= 10000`\n2.  `0 <= A[i] <= 10^6`\n3.  A is a mountain, as defined above.\n##### 解题思路：\n指定临时变量`peak`和`peak_index`，`peak`与`A[i]`进行比较，若peak小于A[i]，则令`peak = A[i]; peak_index = i;`，遍历数组，直到`peak`取到最大值，`peak_index`为`peak`取最大时的i值\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int peakIndexInMountainArray(vector<int>& A) {\n        int peak = 0, peak_index = 0;\n        auto len = A.size() - 1;\n        for(int i = 0; i < len; ++i)\n        {\n            if(peak < A[i])\n            {\n                peak = A[i];\n                peak_index = i;\n            }\n        }\n        return peak_index;\n    }\n};\n```","slug":"LeetCode/852_peak_index_in_a_mountain_array","published":1,"updated":"2019-04-01T11:53:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhw002dmetf05bckupc","content":"<h4 id=\"852-Peak-Index-in-a-Mountain-Array\"><a href=\"#852-Peak-Index-in-a-Mountain-Array\" class=\"headerlink\" title=\"852. Peak Index in a Mountain Array\"></a><a href=\"https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/\" target=\"_blank\" rel=\"noopener\">852. Peak Index in a Mountain Array</a></h4><p>Let’s call an array <code>A</code> a <em>mountain</em> if the following properties hold:</p>\n<ul>\n<li><code>A.length &gt;= 3</code></li>\n<li>There exists some <code>0 &lt; i &lt; A.length - 1</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code><br>Given an array that is definitely a mountain, return any <code>i</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,1,0]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,2,1,0]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n<li>A is a mountain, as defined above.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>指定临时变量<code>peak</code>和<code>peak_index</code>，<code>peak</code>与<code>A[i]</code>进行比较，若peak小于A[i]，则令<code>peak = A[i]; peak_index = i;</code>，遍历数组，直到<code>peak</code>取到最大值，<code>peak_index</code>为<code>peak</code>取最大时的i值<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">peakIndexInMountainArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> peak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> peak_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peak <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            peak <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            peak_index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> peak_index<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"852-Peak-Index-in-a-Mountain-Array\"><a href=\"#852-Peak-Index-in-a-Mountain-Array\" class=\"headerlink\" title=\"852. Peak Index in a Mountain Array\"></a><a href=\"https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/\" target=\"_blank\" rel=\"noopener\">852. Peak Index in a Mountain Array</a></h4><p>Let’s call an array <code>A</code> a <em>mountain</em> if the following properties hold:</p>\n<ul>\n<li><code>A.length &gt;= 3</code></li>\n<li>There exists some <code>0 &lt; i &lt; A.length - 1</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code><br>Given an array that is definitely a mountain, return any <code>i</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,1,0]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[0,2,1,0]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n<li>A is a mountain, as defined above.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>指定临时变量<code>peak</code>和<code>peak_index</code>，<code>peak</code>与<code>A[i]</code>进行比较，若peak小于A[i]，则令<code>peak = A[i]; peak_index = i;</code>，遍历数组，直到<code>peak</code>取到最大值，<code>peak_index</code>为<code>peak</code>取最大时的i值<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nint peakIndexInMountainArray(vector&lt;int&gt;&amp; A) {\n    int peak = 0, peak_index = 0;\n    auto len = A.size() - 1;\n    for(int i = 0; i &lt; len; ++i)\n    {\n        if(peak &lt; A[i])\n        {\n            peak = A[i];\n            peak_index = i;\n        }\n    }\n    return peak_index;\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：832.Flipping an Image","date":"2019-02-24T05:23:00.000Z","_content":"#### [832\\. Flipping an Image](https://leetcode-cn.com/problems/flipping-an-image/)\nGiven a binary matrix `A`, we want to flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.  For example, flipping `[1, 1, 0]` horizontally results in `[0, 1, 1]`.\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`. For example, inverting `[0, 1, 1]` results in `[1, 0, 0]`.\n\n**Example 1:**\n>**Input:** [[1,1,0],[1,0,1],[0,0,0]]\n>\n>**Output:** [[1,0,0],[0,1,0],[1,1,1]]\n>\n>**Explanation:** First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\n**Example 2:**\n>**Input:** [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n>\n>**Output:** [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n>\n>**Explanation:** First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\n**Notes:**\n*   `1 <= A.length = A[0].length <= 20`\n*   `0 <= A[i][j] <= 1`\n\n##### 解题思路：\n+ 翻转：利用临时数组反转\n+ 反转：与1异或获得反转效果或者利用if-else判断，**不可按位取反**\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& A) {\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            int len = (*vint).size();\n            vector<int> tmp(len, 0);\n            for(int i = 0; i < len; i++)\n                tmp[i] = (*vint)[len - 1 - i];\n            for(auto &i : tmp)\n            {\n                i ^= 1;\n            }\n            *vint = tmp;\n        }\n        return A;\n    }\n};\n```","source":"_posts/LeetCode/832_flipping_an_image.md","raw":"---\ntitle: LeetCode刷题：832.Flipping an Image\ndate: 2019-02-24 13:23:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [832\\. Flipping an Image](https://leetcode-cn.com/problems/flipping-an-image/)\nGiven a binary matrix `A`, we want to flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.  For example, flipping `[1, 1, 0]` horizontally results in `[0, 1, 1]`.\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`. For example, inverting `[0, 1, 1]` results in `[1, 0, 0]`.\n\n**Example 1:**\n>**Input:** [[1,1,0],[1,0,1],[0,0,0]]\n>\n>**Output:** [[1,0,0],[0,1,0],[1,1,1]]\n>\n>**Explanation:** First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\n**Example 2:**\n>**Input:** [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n>\n>**Output:** [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n>\n>**Explanation:** First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\n**Notes:**\n*   `1 <= A.length = A[0].length <= 20`\n*   `0 <= A[i][j] <= 1`\n\n##### 解题思路：\n+ 翻转：利用临时数组反转\n+ 反转：与1异或获得反转效果或者利用if-else判断，**不可按位取反**\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& A) {\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            int len = (*vint).size();\n            vector<int> tmp(len, 0);\n            for(int i = 0; i < len; i++)\n                tmp[i] = (*vint)[len - 1 - i];\n            for(auto &i : tmp)\n            {\n                i ^= 1;\n            }\n            *vint = tmp;\n        }\n        return A;\n    }\n};\n```","slug":"LeetCode/832_flipping_an_image","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhx002fmetf6nkpb4to","content":"<h4 id=\"832-Flipping-an-Image\"><a href=\"#832-Flipping-an-Image\" class=\"headerlink\" title=\"832. Flipping an Image\"></a><a href=\"https://leetcode-cn.com/problems/flipping-an-image/\" target=\"_blank\" rel=\"noopener\">832. Flipping an Image</a></h4><p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.<br>To flip an image horizontally means that each row of the image is reversed.  For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.<br>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [[1,1,0],[1,0,1],[0,0,0]]</p>\n<p><strong>Output:</strong> [[1,0,0],[0,1,0],[1,1,1]]</p>\n<p><strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].<br>Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p>\n<p><strong>Output:</strong> [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n<p><strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].<br>Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n</blockquote>\n<p><strong>Notes:</strong></p>\n<ul>\n<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\n</ul>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>翻转：利用临时数组反转</li>\n<li>反转：与1异或获得反转效果或者利用if-else判断，<strong>不可按位取反</strong><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">flipAndInvertImage</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vint <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> vint <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>vint<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n              tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>i <span class=\"token operator\">:</span> tmp<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n              i <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">*</span>vint <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"832-Flipping-an-Image\"><a href=\"#832-Flipping-an-Image\" class=\"headerlink\" title=\"832. Flipping an Image\"></a><a href=\"https://leetcode-cn.com/problems/flipping-an-image/\" target=\"_blank\" rel=\"noopener\">832. Flipping an Image</a></h4><p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.<br>To flip an image horizontally means that each row of the image is reversed.  For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.<br>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [[1,1,0],[1,0,1],[0,0,0]]</p>\n<p><strong>Output:</strong> [[1,0,0],[0,1,0],[1,1,1]]</p>\n<p><strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].<br>Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p>\n<p><strong>Output:</strong> [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n<p><strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].<br>Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>\n</blockquote>\n<p><strong>Notes:</strong></p>\n<ul>\n<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\n</ul>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li>翻转：利用临时数组反转</li>\n<li>反转：与1异或获得反转效果或者利用if-else判断，<strong>不可按位取反</strong><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n  vector&lt;vector&lt;int&gt;&gt; flipAndInvertImage(vector&lt;vector&lt;int&gt;&gt;&amp; A) {\n      for(auto vint = A.begin(); vint != A.end(); ++vint)\n      {\n          int len = (*vint).size();\n          vector&lt;int&gt; tmp(len, 0);\n          for(int i = 0; i &lt; len; i++)\n              tmp[i] = (*vint)[len - 1 - i];\n          for(auto &amp;i : tmp)\n          {\n              i ^= 1;\n          }\n          *vint = tmp;\n      }\n      return A;\n  }\n};</code></pre>\n</li>\n</ul>\n"},{"title":"LeetCode刷题：867.Transpose Matrix","date":"2019-02-24T05:25:00.000Z","_content":"#### [867\\. Transpose Matrix](https://leetcode-cn.com/problems/transpose-matrix/)\nGiven a matrix `A`, return the transpose of `A`.\nThe transpose of a matrix is the matrix flipped over it's main diagonal, switching the row and column indices of the matrix.\n\n**Example 1:**\n>**Input:** `[[1,2,3],[4,5,6],[7,8,9]]`\n>\n>**Output:** `[[1,4,7],[2,5,8],[3,6,9]]`\n\n**Example 2:**\n>**Input:** `[[1,2,3],[4,5,6]]`\n>\n>**Output:** `[[1,4],[2,5],[3,6]]`\n\n**Note:**\n1.  `1 <= A.length <= 1000`\n2.  `1 <= A[0].length <= 1000`\n##### 解题思路：\nA为`m * n`的矩阵，所以A的转置为`n * m`的矩阵，故先创建`n * m`的矩阵`result`，通过遍历令`result[j][i] = A[i][j]`,最后返回`result`\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> transpose(vector<vector<int>>& A) {\n        int m = A.size();\n        int n = A[0].size();\n        /*\n         * A为m * n的矩阵，则A的转置为n * m的矩阵\n         * 所以定义result为n * m的矩阵\n         */\n        vector<vector<int>> result(n);\n        for(int i = 0; i < n; ++i)\n            result[i].resize(m);\n        for(int i = 0; i < m; ++i)\n        {  \n            for(int j = 0; j < n; ++j)\n            {\n                result[j][i] = A[i][j];\n            }\n        }\n        return result;\n    }\n};\n```","source":"_posts/LeetCode/867_transpose_matrix.md","raw":"---\ntitle: LeetCode刷题：867.Transpose Matrix\ndate: 2019-02-24 13:25:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [867\\. Transpose Matrix](https://leetcode-cn.com/problems/transpose-matrix/)\nGiven a matrix `A`, return the transpose of `A`.\nThe transpose of a matrix is the matrix flipped over it's main diagonal, switching the row and column indices of the matrix.\n\n**Example 1:**\n>**Input:** `[[1,2,3],[4,5,6],[7,8,9]]`\n>\n>**Output:** `[[1,4,7],[2,5,8],[3,6,9]]`\n\n**Example 2:**\n>**Input:** `[[1,2,3],[4,5,6]]`\n>\n>**Output:** `[[1,4],[2,5],[3,6]]`\n\n**Note:**\n1.  `1 <= A.length <= 1000`\n2.  `1 <= A[0].length <= 1000`\n##### 解题思路：\nA为`m * n`的矩阵，所以A的转置为`n * m`的矩阵，故先创建`n * m`的矩阵`result`，通过遍历令`result[j][i] = A[i][j]`,最后返回`result`\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> transpose(vector<vector<int>>& A) {\n        int m = A.size();\n        int n = A[0].size();\n        /*\n         * A为m * n的矩阵，则A的转置为n * m的矩阵\n         * 所以定义result为n * m的矩阵\n         */\n        vector<vector<int>> result(n);\n        for(int i = 0; i < n; ++i)\n            result[i].resize(m);\n        for(int i = 0; i < m; ++i)\n        {  \n            for(int j = 0; j < n; ++j)\n            {\n                result[j][i] = A[i][j];\n            }\n        }\n        return result;\n    }\n};\n```","slug":"LeetCode/867_transpose_matrix","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhy002imetffvyxcofd","content":"<h4 id=\"867-Transpose-Matrix\"><a href=\"#867-Transpose-Matrix\" class=\"headerlink\" title=\"867. Transpose Matrix\"></a><a href=\"https://leetcode-cn.com/problems/transpose-matrix/\" target=\"_blank\" rel=\"noopener\">867. Transpose Matrix</a></h4><p>Given a matrix <code>A</code>, return the transpose of <code>A</code>.<br>The transpose of a matrix is the matrix flipped over it’s main diagonal, switching the row and column indices of the matrix.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[[1,2,3],[4,5,6],[7,8,9]]</code></p>\n<p><strong>Output:</strong> <code>[[1,4,7],[2,5,8],[3,6,9]]</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[[1,2,3],[4,5,6]]</code></p>\n<p><strong>Output:</strong> <code>[[1,4],[2,5],[3,6]]</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n<li><code>1 &lt;= A[0].length &lt;= 1000</code><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>A为<code>m * n</code>的矩阵，所以A的转置为<code>n * m</code>的矩阵，故先创建<code>n * m</code>的矩阵<code>result</code>，通过遍历令<code>result[j][i] = A[i][j]</code>,最后返回<code>result</code><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*\n     * A为m * n的矩阵，则A的转置为n * m的矩阵\n     * 所以定义result为n * m的矩阵\n     */</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"867-Transpose-Matrix\"><a href=\"#867-Transpose-Matrix\" class=\"headerlink\" title=\"867. Transpose Matrix\"></a><a href=\"https://leetcode-cn.com/problems/transpose-matrix/\" target=\"_blank\" rel=\"noopener\">867. Transpose Matrix</a></h4><p>Given a matrix <code>A</code>, return the transpose of <code>A</code>.<br>The transpose of a matrix is the matrix flipped over it’s main diagonal, switching the row and column indices of the matrix.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[[1,2,3],[4,5,6],[7,8,9]]</code></p>\n<p><strong>Output:</strong> <code>[[1,4,7],[2,5,8],[3,6,9]]</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[[1,2,3],[4,5,6]]</code></p>\n<p><strong>Output:</strong> <code>[[1,4],[2,5],[3,6]]</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n<li><code>1 &lt;= A[0].length &lt;= 1000</code><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>A为<code>m * n</code>的矩阵，所以A的转置为<code>n * m</code>的矩阵，故先创建<code>n * m</code>的矩阵<code>result</code>，通过遍历令<code>result[j][i] = A[i][j]</code>,最后返回<code>result</code><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; transpose(vector&lt;vector&lt;int&gt;&gt;&amp; A) {\n    int m = A.size();\n    int n = A[0].size();\n    /*\n     * A为m * n的矩阵，则A的转置为n * m的矩阵\n     * 所以定义result为n * m的矩阵\n     */\n    vector&lt;vector&lt;int&gt;&gt; result(n);\n    for(int i = 0; i &lt; n; ++i)\n        result[i].resize(m);\n    for(int i = 0; i &lt; m; ++i)\n    {  \n        for(int j = 0; j &lt; n; ++j)\n        {\n            result[j][i] = A[i][j];\n        }\n    }\n    return result;\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：905.Sort Array By Parity","date":"2019-02-24T05:26:00.000Z","_content":"#### [905\\. Sort Array By Parity](https://leetcode-cn.com/problems/sort-array-by-parity/)\nGiven an array `A` of non-negative integers, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`.\nYou may return any answer array that satisfies this condition.\n\n**Example 1:**\n>**Input:** [3,1,2,4]\n\n>**Output:** [2,4,3,1],\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\n**Note:**\n1.  `1 <= A.length <= 5000`\n2.  `0 <= A[i] <= 5000`\n\n##### 解题思路：\n创建临时容器存放偶数和奇数，最后存入到结果容器并返回。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArrayByParity(vector<int>& A) {\n        vector<int> odd, even, result;\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            if((*vint) % 2 == 0)\n                even.push_back(*vint);\n            else\n                odd.push_back(*vint);\n        }\n        result.insert(result.end(), even.begin(), even.end());//将even插入result；\n        result.insert(result.end(), odd.begin(), odd.end());//将odd插入result；\n        return result;\n    }\n};\n```","source":"_posts/LeetCode/905_sort_array_by_parity.md","raw":"---\ntitle: LeetCode刷题：905.Sort Array By Parity\ndate: 2019-02-24 13:26:00\ncategories: LeetCode\ntags:\n  - 数组\n---\n#### [905\\. Sort Array By Parity](https://leetcode-cn.com/problems/sort-array-by-parity/)\nGiven an array `A` of non-negative integers, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`.\nYou may return any answer array that satisfies this condition.\n\n**Example 1:**\n>**Input:** [3,1,2,4]\n\n>**Output:** [2,4,3,1],\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\n**Note:**\n1.  `1 <= A.length <= 5000`\n2.  `0 <= A[i] <= 5000`\n\n##### 解题思路：\n创建临时容器存放偶数和奇数，最后存入到结果容器并返回。\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArrayByParity(vector<int>& A) {\n        vector<int> odd, even, result;\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            if((*vint) % 2 == 0)\n                even.push_back(*vint);\n            else\n                odd.push_back(*vint);\n        }\n        result.insert(result.end(), even.begin(), even.end());//将even插入result；\n        result.insert(result.end(), odd.begin(), odd.end());//将odd插入result；\n        return result;\n    }\n};\n```","slug":"LeetCode/905_sort_array_by_parity","published":1,"updated":"2019-04-01T10:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurhz002lmetfkcyx2p2s","content":"<h4 id=\"905-Sort-Array-By-Parity\"><a href=\"#905-Sort-Array-By-Parity\" class=\"headerlink\" title=\"905. Sort Array By Parity\"></a><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity/\" target=\"_blank\" rel=\"noopener\">905. Sort Array By Parity</a></h4><p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.<br>You may return any answer array that satisfies this condition.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [3,1,2,4]</p>\n</blockquote>\n<blockquote>\n<p><strong>Output:</strong> [2,4,3,1],<br>The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 5000</code></li>\n<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\n</ol>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>创建临时容器存放偶数和奇数，最后存入到结果容器并返回。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArrayByParity</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> odd<span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vint <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> vint <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>vint<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                even<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                odd<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将even插入result；</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将odd插入result；</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"905-Sort-Array-By-Parity\"><a href=\"#905-Sort-Array-By-Parity\" class=\"headerlink\" title=\"905. Sort Array By Parity\"></a><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity/\" target=\"_blank\" rel=\"noopener\">905. Sort Array By Parity</a></h4><p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.<br>You may return any answer array that satisfies this condition.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> [3,1,2,4]</p>\n</blockquote>\n<blockquote>\n<p><strong>Output:</strong> [2,4,3,1],<br>The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 5000</code></li>\n<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\n</ol>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>创建临时容器存放偶数和奇数，最后存入到结果容器并返回。</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; sortArrayByParity(vector&lt;int&gt;&amp; A) {\n        vector&lt;int&gt; odd, even, result;\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            if((*vint) % 2 == 0)\n                even.push_back(*vint);\n            else\n                odd.push_back(*vint);\n        }\n        result.insert(result.end(), even.begin(), even.end());//将even插入result；\n        result.insert(result.end(), odd.begin(), odd.end());//将odd插入result；\n        return result;\n    }\n};</code></pre>\n"},{"title":"LeetCode刷题：922.Sort Array By Parity II","date":"2019-02-24T05:27:00.000Z","_content":"#### [922\\. Sort Array By Parity II](https://leetcode-cn.com/problems/sort-array-by-parity-ii/)\nGiven an array `A` of non-negative integers, half of the integers in A are odd, and half of the integers are even.\nSort the array so that whenever `A[i]` is odd, `i` is odd; and whenever `A[i]` is even, `i` is even.\nYou may return any answer array that satisfies this condition.\n\n**Example 1:**\n>**Input:** `[4,2,5,7]`\n>\n>**Output:** `[4,5,2,7]`\n>\n>**Explanation:** `[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.`\n\n**Note:**\n1.  `2 <= A.length <= 20000`\n2.  `A.length % 2 == 0`\n3.  `0 <= A[i] <= 1000`\n##### 解题思路：\n1. 先将数组A按照奇偶分为两个数组odd和even，然后按照偶数、奇数的顺序依次插入到结果数组；\n2. 思路和1类似，利用vector的`top()`取出栈顶元素和`pop()`删除栈顶元素；\n##### 解答：\n```cpp\n// code 1:\n// 80ms\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) {\n        vector<int> odd, even, result;\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            if((*vint) % 2 == 0)\n                even.push_back(*vint);\n            else\n                odd.push_back(*vint);\n        }\n        size_t len = A.size();\n        auto e = even.begin();\n        auto o = odd.begin();\n        for(auto i = 0; i < len; ++i)\n        {\n            if(i % 2 == 0)\n            {\n                result.push_back(*e);\n                e++;\n            }                \n            else\n            {\n                result.push_back(*o);\n                o++;\n            }\n\n        }\n        return result;\n    }\n};\n// code 2：\n// 64ms\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) \n    {\n        stack<int> odd;\n        stack<int> even;\n        vector<int>::iterator iter;\n        int a=0;//奇偶标志位\n        for(iter=A.begin();iter!=A.end();iter++)\n        {\n            if(*iter%2==0)\n                even.push(*iter);\n            else\n                odd.push(*iter);\n        }\n        for(iter=A.begin();iter!=A.end();iter++)\n        {\n              //top()取出栈顶元素，pop()删除栈顶元素；\n              if(a==0)\n              {\n                *iter=even.top();\n                 even.pop();\n              }\n            else\n            {\n                *iter=odd.top();\n                 odd.pop();\n            }\n            a=1-a;//奇偶变换\n        }\n        return A;\n    }\n};\n```","source":"_posts/LeetCode/922_sort_array_by_parity_ii.md","raw":"---\ntitle: LeetCode刷题：922.Sort Array By Parity II\ndate: 2019-02-24 13:27:00\ncategories: LeetCode\ntags:\n  - 数组\n  - 排序\n---\n#### [922\\. Sort Array By Parity II](https://leetcode-cn.com/problems/sort-array-by-parity-ii/)\nGiven an array `A` of non-negative integers, half of the integers in A are odd, and half of the integers are even.\nSort the array so that whenever `A[i]` is odd, `i` is odd; and whenever `A[i]` is even, `i` is even.\nYou may return any answer array that satisfies this condition.\n\n**Example 1:**\n>**Input:** `[4,2,5,7]`\n>\n>**Output:** `[4,5,2,7]`\n>\n>**Explanation:** `[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.`\n\n**Note:**\n1.  `2 <= A.length <= 20000`\n2.  `A.length % 2 == 0`\n3.  `0 <= A[i] <= 1000`\n##### 解题思路：\n1. 先将数组A按照奇偶分为两个数组odd和even，然后按照偶数、奇数的顺序依次插入到结果数组；\n2. 思路和1类似，利用vector的`top()`取出栈顶元素和`pop()`删除栈顶元素；\n##### 解答：\n```cpp\n// code 1:\n// 80ms\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) {\n        vector<int> odd, even, result;\n        for(auto vint = A.begin(); vint != A.end(); ++vint)\n        {\n            if((*vint) % 2 == 0)\n                even.push_back(*vint);\n            else\n                odd.push_back(*vint);\n        }\n        size_t len = A.size();\n        auto e = even.begin();\n        auto o = odd.begin();\n        for(auto i = 0; i < len; ++i)\n        {\n            if(i % 2 == 0)\n            {\n                result.push_back(*e);\n                e++;\n            }                \n            else\n            {\n                result.push_back(*o);\n                o++;\n            }\n\n        }\n        return result;\n    }\n};\n// code 2：\n// 64ms\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) \n    {\n        stack<int> odd;\n        stack<int> even;\n        vector<int>::iterator iter;\n        int a=0;//奇偶标志位\n        for(iter=A.begin();iter!=A.end();iter++)\n        {\n            if(*iter%2==0)\n                even.push(*iter);\n            else\n                odd.push(*iter);\n        }\n        for(iter=A.begin();iter!=A.end();iter++)\n        {\n              //top()取出栈顶元素，pop()删除栈顶元素；\n              if(a==0)\n              {\n                *iter=even.top();\n                 even.pop();\n              }\n            else\n            {\n                *iter=odd.top();\n                 odd.pop();\n            }\n            a=1-a;//奇偶变换\n        }\n        return A;\n    }\n};\n```","slug":"LeetCode/922_sort_array_by_parity_ii","published":1,"updated":"2019-04-01T11:48:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri1002pmetf8czsmwtz","content":"<h4 id=\"922-Sort-Array-By-Parity-II\"><a href=\"#922-Sort-Array-By-Parity-II\" class=\"headerlink\" title=\"922. Sort Array By Parity II\"></a><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity-ii/\" target=\"_blank\" rel=\"noopener\">922. Sort Array By Parity II</a></h4><p>Given an array <code>A</code> of non-negative integers, half of the integers in A are odd, and half of the integers are even.<br>Sort the array so that whenever <code>A[i]</code> is odd, <code>i</code> is odd; and whenever <code>A[i]</code> is even, <code>i</code> is even.<br>You may return any answer array that satisfies this condition.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[4,2,5,7]</code></p>\n<p><strong>Output:</strong> <code>[4,5,2,7]</code></p>\n<p><strong>Explanation:</strong> <code>[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><p><code>2 &lt;= A.length &lt;= 20000</code></p>\n</li>\n<li><p><code>A.length % 2 == 0</code></p>\n</li>\n<li><p><code>0 &lt;= A[i] &lt;= 1000</code></p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5></li>\n<li><p>先将数组A按照奇偶分为两个数组odd和even，然后按照偶数、奇数的顺序依次插入到结果数组；</p>\n</li>\n<li><p>思路和1类似，利用vector的<code>top()</code>取出栈顶元素和<code>pop()</code>删除栈顶元素；</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// code 1:</span>\n<span class=\"token comment\" spellcheck=\"true\">// 80ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArrayByParityII</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> odd<span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vint <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> vint <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>vint<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n             even<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">else</span>\n             odd<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     size_t len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">auto</span> e <span class=\"token operator\">=</span> even<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">auto</span> o <span class=\"token operator\">=</span> odd<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             e<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>                \n         <span class=\"token keyword\">else</span>\n         <span class=\"token punctuation\">{</span>\n             result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             o<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// code 2：</span>\n<span class=\"token comment\" spellcheck=\"true\">// 64ms</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArrayByParityII</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> \n <span class=\"token punctuation\">{</span>\n     stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> odd<span class=\"token punctuation\">;</span>\n     stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> even<span class=\"token punctuation\">;</span>\n     vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator iter<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//奇偶标志位</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">=</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iter<span class=\"token operator\">!=</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n             even<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">else</span>\n             odd<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">=</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iter<span class=\"token operator\">!=</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\" spellcheck=\"true\">//top()取出栈顶元素，pop()删除栈顶元素；</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n             <span class=\"token operator\">*</span>iter<span class=\"token operator\">=</span>even<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              even<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">else</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token operator\">*</span>iter<span class=\"token operator\">=</span>odd<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              odd<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//奇偶变换</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"922-Sort-Array-By-Parity-II\"><a href=\"#922-Sort-Array-By-Parity-II\" class=\"headerlink\" title=\"922. Sort Array By Parity II\"></a><a href=\"https://leetcode-cn.com/problems/sort-array-by-parity-ii/\" target=\"_blank\" rel=\"noopener\">922. Sort Array By Parity II</a></h4><p>Given an array <code>A</code> of non-negative integers, half of the integers in A are odd, and half of the integers are even.<br>Sort the array so that whenever <code>A[i]</code> is odd, <code>i</code> is odd; and whenever <code>A[i]</code> is even, <code>i</code> is even.<br>You may return any answer array that satisfies this condition.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[4,2,5,7]</code></p>\n<p><strong>Output:</strong> <code>[4,5,2,7]</code></p>\n<p><strong>Explanation:</strong> <code>[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><p><code>2 &lt;= A.length &lt;= 20000</code></p>\n</li>\n<li><p><code>A.length % 2 == 0</code></p>\n</li>\n<li><p><code>0 &lt;= A[i] &lt;= 1000</code></p>\n<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5></li>\n<li><p>先将数组A按照奇偶分为两个数组odd和even，然后按照偶数、奇数的顺序依次插入到结果数组；</p>\n</li>\n<li><p>思路和1类似，利用vector的<code>top()</code>取出栈顶元素和<code>pop()</code>删除栈顶元素；</p>\n<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">// code 1:\n// 80ms\nclass Solution {\npublic:\n vector&lt;int&gt; sortArrayByParityII(vector&lt;int&gt;&amp; A) {\n     vector&lt;int&gt; odd, even, result;\n     for(auto vint = A.begin(); vint != A.end(); ++vint)\n     {\n         if((*vint) % 2 == 0)\n             even.push_back(*vint);\n         else\n             odd.push_back(*vint);\n     }\n     size_t len = A.size();\n     auto e = even.begin();\n     auto o = odd.begin();\n     for(auto i = 0; i &lt; len; ++i)\n     {\n         if(i % 2 == 0)\n         {\n             result.push_back(*e);\n             e++;\n         }                \n         else\n         {\n             result.push_back(*o);\n             o++;\n         }\n\n     }\n     return result;\n }\n};\n// code 2：\n// 64ms\nclass Solution {\npublic:\n vector&lt;int&gt; sortArrayByParityII(vector&lt;int&gt;&amp; A) \n {\n     stack&lt;int&gt; odd;\n     stack&lt;int&gt; even;\n     vector&lt;int&gt;::iterator iter;\n     int a=0;//奇偶标志位\n     for(iter=A.begin();iter!=A.end();iter++)\n     {\n         if(*iter%2==0)\n             even.push(*iter);\n         else\n             odd.push(*iter);\n     }\n     for(iter=A.begin();iter!=A.end();iter++)\n     {\n           //top()取出栈顶元素，pop()删除栈顶元素；\n           if(a==0)\n           {\n             *iter=even.top();\n              even.pop();\n           }\n         else\n         {\n             *iter=odd.top();\n              odd.pop();\n         }\n         a=1-a;//奇偶变换\n     }\n     return A;\n }\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：929.Unique Email Addresses","date":"2019-02-24T05:28:00.000Z","_content":"#### [929\\. Unique Email Addresses](https://leetcode-cn.com/problems/unique-email-addresses/)\nEvery email consists of a local name and a domain name, separated by the @ sign.\nFor example, in ` alice@leetcode.com `, `alice` is the local name, and `leetcode.com` is the domain name.\nBesides lowercase letters, these emails may contain `'.'`s or `'+'`s.\nIf you add periods (`'.'`) between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, `\"alice.z@leetcode.com\"`and `\"alicez@leetcode.com\"`forward to the same email address.  (Note that this rule does not apply for domain names.)\nIf you add a plus (`'+'`) in the **local name**, everything after the first plus sign will be **ignored**. This allows certain emails to be filtered, for example ` m.y+name@email.com ` will be forwarded to ` my@email.com `.  (Again, this rule does not apply for domain names.)\nIt is possible to use both of these rules at the same time.\n\nGiven a list of `emails`, we send one email to each address in the list.  How many different addresses actually receive mails? \n\n**Example 1:**\n>**Input:**\n[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n\n>**Output:** `2`\n\n>**Explanation:** \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n\n**Note:**\n*   `1 <= emails[i].length <= 100`\n*   `1 <= emails.length <= 100`\n*   Each `emails[i]`contains exactly one `'@'`character.\n##### 解题思路：\n1. 若邮箱中含有‘+’，先将‘+’和‘@’之间的字符删掉\n2. 将新的邮箱中‘@’之前的‘.’删掉\n3. 将最后的邮箱插入到无序容器`unordered_set<string> result;`\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n        unordered_set<string> result; //无序容器-C++ Primer P394；\n        for(auto email = emails.begin(); email != emails.end(); ++email)\n        {\n            auto plus_pos = (*email).find('+');//获取‘+’的位置\n            auto at_pos = (*email).find('@');\n            if(plus_pos < at_pos)\n            {\n                auto len = at_pos - plus_pos;\n                (*email).erase(plus_pos, len);//移除‘+’和‘@’中间的内容\n            }\n            auto dot_pos = (*email).find('.');\n            at_pos = (*email).find('@');\n            while(dot_pos < at_pos)\n            {\n                //删除所有‘@’前的‘.’\n                (*email).erase(dot_pos, 1);\n                dot_pos = (*email).find('.');\n                at_pos--;\n            }\n            result.insert(*email);\n        }\n        return result.size();\n    }\n};\n```","source":"_posts/LeetCode/929_unique_email_addresses.md","raw":"---\ntitle: LeetCode刷题：929.Unique Email Addresses\ndate: 2019-02-24 13:28:00\ncategories: LeetCode\ntags:\n  - 字符串\n---\n#### [929\\. Unique Email Addresses](https://leetcode-cn.com/problems/unique-email-addresses/)\nEvery email consists of a local name and a domain name, separated by the @ sign.\nFor example, in ` alice@leetcode.com `, `alice` is the local name, and `leetcode.com` is the domain name.\nBesides lowercase letters, these emails may contain `'.'`s or `'+'`s.\nIf you add periods (`'.'`) between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, `\"alice.z@leetcode.com\"`and `\"alicez@leetcode.com\"`forward to the same email address.  (Note that this rule does not apply for domain names.)\nIf you add a plus (`'+'`) in the **local name**, everything after the first plus sign will be **ignored**. This allows certain emails to be filtered, for example ` m.y+name@email.com ` will be forwarded to ` my@email.com `.  (Again, this rule does not apply for domain names.)\nIt is possible to use both of these rules at the same time.\n\nGiven a list of `emails`, we send one email to each address in the list.  How many different addresses actually receive mails? \n\n**Example 1:**\n>**Input:**\n[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n\n>**Output:** `2`\n\n>**Explanation:** \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n\n**Note:**\n*   `1 <= emails[i].length <= 100`\n*   `1 <= emails.length <= 100`\n*   Each `emails[i]`contains exactly one `'@'`character.\n##### 解题思路：\n1. 若邮箱中含有‘+’，先将‘+’和‘@’之间的字符删掉\n2. 将新的邮箱中‘@’之前的‘.’删掉\n3. 将最后的邮箱插入到无序容器`unordered_set<string> result;`\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n        unordered_set<string> result; //无序容器-C++ Primer P394；\n        for(auto email = emails.begin(); email != emails.end(); ++email)\n        {\n            auto plus_pos = (*email).find('+');//获取‘+’的位置\n            auto at_pos = (*email).find('@');\n            if(plus_pos < at_pos)\n            {\n                auto len = at_pos - plus_pos;\n                (*email).erase(plus_pos, len);//移除‘+’和‘@’中间的内容\n            }\n            auto dot_pos = (*email).find('.');\n            at_pos = (*email).find('@');\n            while(dot_pos < at_pos)\n            {\n                //删除所有‘@’前的‘.’\n                (*email).erase(dot_pos, 1);\n                dot_pos = (*email).find('.');\n                at_pos--;\n            }\n            result.insert(*email);\n        }\n        return result.size();\n    }\n};\n```","slug":"LeetCode/929_unique_email_addresses","published":1,"updated":"2019-04-01T11:32:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri3002smetfgf95lhgv","content":"<h4 id=\"929-Unique-Email-Addresses\"><a href=\"#929-Unique-Email-Addresses\" class=\"headerlink\" title=\"929. Unique Email Addresses\"></a><a href=\"https://leetcode-cn.com/problems/unique-email-addresses/\" target=\"_blank\" rel=\"noopener\">929. Unique Email Addresses</a></h4><p>Every email consists of a local name and a domain name, separated by the @ sign.<br>For example, in <code>alice@leetcode.com</code>, <code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.<br>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.<br>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, <code>&quot;alice.z@leetcode.com&quot;</code>and <code>&quot;alicez@leetcode.com&quot;</code>forward to the same email address.  (Note that this rule does not apply for domain names.)<br>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be <strong>ignored</strong>. This allows certain emails to be filtered, for example <code>m.y+name@email.com</code> will be forwarded to <code>my@email.com</code>.  (Again, this rule does not apply for domain names.)<br>It is possible to use both of these rules at the same time.</p>\n<p>Given a list of <code>emails</code>, we send one email to each address in the list.  How many different addresses actually receive mails? </p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>[“test.email+alex@leetcode.com”,”<a href=\"mailto:test.e.mail+bob.cathy@leetcode.com\" target=\"_blank\" rel=\"noopener\">test.e.mail+bob.cathy@leetcode.com</a>“,”<a href=\"mailto:testemail+david@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail+david@lee.tcode.com</a>“]</p>\n</blockquote>\n<blockquote>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<blockquote>\n<p><strong>Explanation:</strong> “<a href=\"mailto:testemail@leetcode.com\" target=\"_blank\" rel=\"noopener\">testemail@leetcode.com</a>“ and “<a href=\"mailto:testemail@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail@lee.tcode.com</a>“ actually receive mails</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>1 &lt;= emails[i].length &lt;= 100</code></li>\n<li><code>1 &lt;= emails.length &lt;= 100</code></li>\n<li>Each <code>emails[i]</code>contains exactly one <code>&#39;@&#39;</code>character.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5></li>\n</ul>\n<ol>\n<li>若邮箱中含有‘+’，先将‘+’和‘@’之间的字符删掉</li>\n<li>将新的邮箱中‘@’之前的‘.’删掉</li>\n<li>将最后的邮箱插入到无序容器<code>unordered_set&lt;string&gt; result;</code><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">numUniqueEmails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> emails<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     unordered_set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//无序容器-C++ Primer P394；</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> email <span class=\"token operator\">=</span> emails<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> email <span class=\"token operator\">!=</span> emails<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>email<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">auto</span> plus_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取‘+’的位置</span>\n         <span class=\"token keyword\">auto</span> at_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>plus_pos <span class=\"token operator\">&lt;</span> at_pos<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">auto</span> len <span class=\"token operator\">=</span> at_pos <span class=\"token operator\">-</span> plus_pos<span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>plus_pos<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//移除‘+’和‘@’中间的内容</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">auto</span> dot_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         at_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>dot_pos <span class=\"token operator\">&lt;</span> at_pos<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\" spellcheck=\"true\">//删除所有‘@’前的‘.’</span>\n             <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>dot_pos<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             dot_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             at_pos<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         result<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"929-Unique-Email-Addresses\"><a href=\"#929-Unique-Email-Addresses\" class=\"headerlink\" title=\"929. Unique Email Addresses\"></a><a href=\"https://leetcode-cn.com/problems/unique-email-addresses/\" target=\"_blank\" rel=\"noopener\">929. Unique Email Addresses</a></h4><p>Every email consists of a local name and a domain name, separated by the @ sign.<br>For example, in <code>alice@leetcode.com</code>, <code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.<br>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.<br>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, <code>&quot;alice.z@leetcode.com&quot;</code>and <code>&quot;alicez@leetcode.com&quot;</code>forward to the same email address.  (Note that this rule does not apply for domain names.)<br>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be <strong>ignored</strong>. This allows certain emails to be filtered, for example <code>m.y+name@email.com</code> will be forwarded to <code>my@email.com</code>.  (Again, this rule does not apply for domain names.)<br>It is possible to use both of these rules at the same time.</p>\n<p>Given a list of <code>emails</code>, we send one email to each address in the list.  How many different addresses actually receive mails? </p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><br>[“test.email+alex@leetcode.com”,”<a href=\"mailto:test.e.mail+bob.cathy@leetcode.com\" target=\"_blank\" rel=\"noopener\">test.e.mail+bob.cathy@leetcode.com</a>“,”<a href=\"mailto:testemail+david@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail+david@lee.tcode.com</a>“]</p>\n</blockquote>\n<blockquote>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<blockquote>\n<p><strong>Explanation:</strong> “<a href=\"mailto:testemail@leetcode.com\" target=\"_blank\" rel=\"noopener\">testemail@leetcode.com</a>“ and “<a href=\"mailto:testemail@lee.tcode.com\" target=\"_blank\" rel=\"noopener\">testemail@lee.tcode.com</a>“ actually receive mails</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>1 &lt;= emails[i].length &lt;= 100</code></li>\n<li><code>1 &lt;= emails.length &lt;= 100</code></li>\n<li>Each <code>emails[i]</code>contains exactly one <code>&#39;@&#39;</code>character.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5></li>\n</ul>\n<ol>\n<li>若邮箱中含有‘+’，先将‘+’和‘@’之间的字符删掉</li>\n<li>将新的邮箱中‘@’之前的‘.’删掉</li>\n<li>将最后的邮箱插入到无序容器<code>unordered_set&lt;string&gt; result;</code><h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\n int numUniqueEmails(vector&lt;string&gt;&amp; emails) {\n     unordered_set&lt;string&gt; result; //无序容器-C++ Primer P394；\n     for(auto email = emails.begin(); email != emails.end(); ++email)\n     {\n         auto plus_pos = (*email).find(&#39;+&#39;);//获取‘+’的位置\n         auto at_pos = (*email).find(&#39;@&#39;);\n         if(plus_pos &lt; at_pos)\n         {\n             auto len = at_pos - plus_pos;\n             (*email).erase(plus_pos, len);//移除‘+’和‘@’中间的内容\n         }\n         auto dot_pos = (*email).find(&#39;.&#39;);\n         at_pos = (*email).find(&#39;@&#39;);\n         while(dot_pos &lt; at_pos)\n         {\n             //删除所有‘@’前的‘.’\n             (*email).erase(dot_pos, 1);\n             dot_pos = (*email).find(&#39;.&#39;);\n             at_pos--;\n         }\n         result.insert(*email);\n     }\n     return result.size();\n }\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：944.Delete Columns to Make Sorted","date":"2019-02-24T05:30:00.000Z","_content":"#### [944\\. Delete Columns to Make Sorted](https://leetcode-cn.com/problems/delete-columns-to-make-sorted/)\nWe are given an array `A` of `N` lowercase letter strings, all of the same length.\nNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\nFor example, if we have an array `A = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`, and the remaining columns of `A` are `[\"b\",\"v\"]`, `[\"e\",\"y\"]`, and `[\"f\",\"z\"]`.  (Formally, the `c`-th column is `[A[0][c], A[1][c], ..., A[A.length-1][c]]`.)\nSuppose we chose a set of deletion indices `D` such that after deletions, each remaining column in A is in **non-decreasing** sorted order.\nReturn the minimum possible value of `D.length`.\n\n**Example 1:**\n>**Input:**` [\"cba\",\"daf\",\"ghi\"]`\n>\n>**Output:** `1`\n>\n>**Explanation:** \nAfter choosing D = {1}, each column `[\"c\",\"d\",\"g\"]` and `[\"a\",\"f\",\"i\"]` are in non-decreasing sorted order.\nIf we chose D = {}, then a column `[\"b\",\"a\",\"h\"]` would not be in non-decreasing sorted order.\n\n**Example 2:**\n>**Input:** `[\"a\",\"b\"]`\n>\n>**Output:** `0`\n>\n>**Explanation:** `D = {}`\n\n**Example 3:**\n>**Input:** `[\"zyx\",\"wvu\",\"tsr\"]`\n>\n>**Output:** `3`\n>\n>**Explanation:** `D = {0, 1, 2}`\n\n**Note:**\n1.  `1 <= A.length <= 100`\n2.  `1 <= A[i].length <= 1000`\n##### 解题思路：\n题意解析，非降序意味着列中不存在降序\n故进行两次for循环，外层循环为列，内层循环为行，如果前一行某列字母大于后一行（ASCII），则返回值+1；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int minDeletionSize(vector<string>& A) {\n        int strLen = A[0].length();\n        int vLen = A.size();\n        int result = 0;\n        //列序号\n        for(int i = 0; i < strLen; ++i)\n        {\n            //行序号\n            for(int j = 0; j < vLen - 1; ++j)\n            {\n                if(A[j][i] > A[j+1][i])\n                {\n                    result++;\n                    break;//跳出循环\n                }\n            }\n        }\n        return result;\n    }\n};\n```","source":"_posts/LeetCode/944_delete_columns_to_make_sorted.md","raw":"---\ntitle: LeetCode刷题：944.Delete Columns to Make Sorted\ndate: 2019-02-24 13:30:00\ncategories: LeetCode\ntags:\n  - 贪心算法\n---\n#### [944\\. Delete Columns to Make Sorted](https://leetcode-cn.com/problems/delete-columns-to-make-sorted/)\nWe are given an array `A` of `N` lowercase letter strings, all of the same length.\nNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\nFor example, if we have an array `A = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`, and the remaining columns of `A` are `[\"b\",\"v\"]`, `[\"e\",\"y\"]`, and `[\"f\",\"z\"]`.  (Formally, the `c`-th column is `[A[0][c], A[1][c], ..., A[A.length-1][c]]`.)\nSuppose we chose a set of deletion indices `D` such that after deletions, each remaining column in A is in **non-decreasing** sorted order.\nReturn the minimum possible value of `D.length`.\n\n**Example 1:**\n>**Input:**` [\"cba\",\"daf\",\"ghi\"]`\n>\n>**Output:** `1`\n>\n>**Explanation:** \nAfter choosing D = {1}, each column `[\"c\",\"d\",\"g\"]` and `[\"a\",\"f\",\"i\"]` are in non-decreasing sorted order.\nIf we chose D = {}, then a column `[\"b\",\"a\",\"h\"]` would not be in non-decreasing sorted order.\n\n**Example 2:**\n>**Input:** `[\"a\",\"b\"]`\n>\n>**Output:** `0`\n>\n>**Explanation:** `D = {}`\n\n**Example 3:**\n>**Input:** `[\"zyx\",\"wvu\",\"tsr\"]`\n>\n>**Output:** `3`\n>\n>**Explanation:** `D = {0, 1, 2}`\n\n**Note:**\n1.  `1 <= A.length <= 100`\n2.  `1 <= A[i].length <= 1000`\n##### 解题思路：\n题意解析，非降序意味着列中不存在降序\n故进行两次for循环，外层循环为列，内层循环为行，如果前一行某列字母大于后一行（ASCII），则返回值+1；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int minDeletionSize(vector<string>& A) {\n        int strLen = A[0].length();\n        int vLen = A.size();\n        int result = 0;\n        //列序号\n        for(int i = 0; i < strLen; ++i)\n        {\n            //行序号\n            for(int j = 0; j < vLen - 1; ++j)\n            {\n                if(A[j][i] > A[j+1][i])\n                {\n                    result++;\n                    break;//跳出循环\n                }\n            }\n        }\n        return result;\n    }\n};\n```","slug":"LeetCode/944_delete_columns_to_make_sorted","published":1,"updated":"2019-04-01T11:45:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri4002wmetftyq5wy5o","content":"<h4 id=\"944-Delete-Columns-to-Make-Sorted\"><a href=\"#944-Delete-Columns-to-Make-Sorted\" class=\"headerlink\" title=\"944. Delete Columns to Make Sorted\"></a><a href=\"https://leetcode-cn.com/problems/delete-columns-to-make-sorted/\" target=\"_blank\" rel=\"noopener\">944. Delete Columns to Make Sorted</a></h4><p>We are given an array <code>A</code> of <code>N</code> lowercase letter strings, all of the same length.<br>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.<br>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>, and the remaining columns of <code>A</code> are <code>[&quot;b&quot;,&quot;v&quot;]</code>, <code>[&quot;e&quot;,&quot;y&quot;]</code>, and <code>[&quot;f&quot;,&quot;z&quot;]</code>.  (Formally, the <code>c</code>-th column is <code>[A[0][c], A[1][c], ..., A[A.length-1][c]]</code>.)<br>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, each remaining column in A is in <strong>non-decreasing</strong> sorted order.<br>Return the minimum possible value of <code>D.length</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><code>[&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong><br>After choosing D = {1}, each column <code>[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;]</code> and <code>[&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]</code> are in non-decreasing sorted order.<br>If we chose D = {}, then a column <code>[&quot;b&quot;,&quot;a&quot;,&quot;h&quot;]</code> would not be in non-decreasing sorted order.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[&quot;a&quot;,&quot;b&quot;]</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n<p><strong>Explanation:</strong> <code>D = {}</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> <code>D = {0, 1, 2}</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 100</code></li>\n<li><code>1 &lt;= A[i].length &lt;= 1000</code><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>题意解析，非降序意味着列中不存在降序<br>故进行两次for循环，外层循环为列，内层循环为行，如果前一行某列字母大于后一行（ASCII），则返回值+1；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">minDeletionSize</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> strLen <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> vLen <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//列序号</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//行序号</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vLen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> A<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//跳出循环</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"944-Delete-Columns-to-Make-Sorted\"><a href=\"#944-Delete-Columns-to-Make-Sorted\" class=\"headerlink\" title=\"944. Delete Columns to Make Sorted\"></a><a href=\"https://leetcode-cn.com/problems/delete-columns-to-make-sorted/\" target=\"_blank\" rel=\"noopener\">944. Delete Columns to Make Sorted</a></h4><p>We are given an array <code>A</code> of <code>N</code> lowercase letter strings, all of the same length.<br>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.<br>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>, and the remaining columns of <code>A</code> are <code>[&quot;b&quot;,&quot;v&quot;]</code>, <code>[&quot;e&quot;,&quot;y&quot;]</code>, and <code>[&quot;f&quot;,&quot;z&quot;]</code>.  (Formally, the <code>c</code>-th column is <code>[A[0][c], A[1][c], ..., A[A.length-1][c]]</code>.)<br>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, each remaining column in A is in <strong>non-decreasing</strong> sorted order.<br>Return the minimum possible value of <code>D.length</code>.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong><code>[&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</code></p>\n<p><strong>Output:</strong> <code>1</code></p>\n<p><strong>Explanation:</strong><br>After choosing D = {1}, each column <code>[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;]</code> and <code>[&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]</code> are in non-decreasing sorted order.<br>If we chose D = {}, then a column <code>[&quot;b&quot;,&quot;a&quot;,&quot;h&quot;]</code> would not be in non-decreasing sorted order.</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[&quot;a&quot;,&quot;b&quot;]</code></p>\n<p><strong>Output:</strong> <code>0</code></p>\n<p><strong>Explanation:</strong> <code>D = {}</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n<p><strong>Explanation:</strong> <code>D = {0, 1, 2}</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= A.length &lt;= 100</code></li>\n<li><code>1 &lt;= A[i].length &lt;= 1000</code><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>题意解析，非降序意味着列中不存在降序<br>故进行两次for循环，外层循环为列，内层循环为行，如果前一行某列字母大于后一行（ASCII），则返回值+1；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nint minDeletionSize(vector&lt;string&gt;&amp; A) {\n    int strLen = A[0].length();\n    int vLen = A.size();\n    int result = 0;\n    //列序号\n    for(int i = 0; i &lt; strLen; ++i)\n    {\n        //行序号\n        for(int j = 0; j &lt; vLen - 1; ++j)\n        {\n            if(A[j][i] &gt; A[j+1][i])\n            {\n                result++;\n                break;//跳出循环\n            }\n        }\n    }\n    return result;\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：942.DI String Match","date":"2019-02-24T05:29:00.000Z","_content":"#### [942\\. DI String Match](https://leetcode-cn.com/problems/di-string-match/)\nGiven a string `S` that **only** contains \"I\" (increase) or \"D\" (decrease), let `N = S.length`.\nReturn **any** permutation `A` of `[0, 1, ..., N]` such that for all `i = 0, ..., N-1`:\n*   If `S[i] == \"I\"`, then `A[i] < A[i+1]`\n*   If `S[i] == \"D\"`, then `A[i] > A[i+1]`\n\n**Example 1:**\n>**Input:** `\"IDID\"`\n>\n>**Output:** `[0,4,1,3,2]`\n\n**Example 2:**\n>**Input:** `\"III\"`\n>\n>**Output:** `[0,1,2,3]`\n\n**Example 3:**\n>**Input:** `\"DDI\"`\n>\n>**Output:** `[3,2,0,1]`\n\n**Note:**\n1.  `1 <= S.length <= 10000`\n2.  `S` only contains characters `\"I\"` or `\"D\"`.\n##### 解题思路：\n如果字符为`I`，则数字从0开始递增，如果字符为`D`，则数字从N开始递减；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<int> diStringMatch(string S) {\n        int len = S.length();\n        vector<int> A;\n        int incNum = 0;\n        int decNum = len;\n        for(int i = 0; i < len; ++i)\n        {\n            if(S[i] == 'I')\n                A.push_back(incNum++);\n            else\n                A.push_back(decNum--);\n        }\n        A.push_back(incNum);\n        return A;\n    }\n};\n```","source":"_posts/LeetCode/942_di_string_match.md","raw":"---\ntitle: LeetCode刷题：942.DI String Match\ndate: 2019-02-24 13:29:00\ncategories: LeetCode\ntags:\n  - 数学\n---\n#### [942\\. DI String Match](https://leetcode-cn.com/problems/di-string-match/)\nGiven a string `S` that **only** contains \"I\" (increase) or \"D\" (decrease), let `N = S.length`.\nReturn **any** permutation `A` of `[0, 1, ..., N]` such that for all `i = 0, ..., N-1`:\n*   If `S[i] == \"I\"`, then `A[i] < A[i+1]`\n*   If `S[i] == \"D\"`, then `A[i] > A[i+1]`\n\n**Example 1:**\n>**Input:** `\"IDID\"`\n>\n>**Output:** `[0,4,1,3,2]`\n\n**Example 2:**\n>**Input:** `\"III\"`\n>\n>**Output:** `[0,1,2,3]`\n\n**Example 3:**\n>**Input:** `\"DDI\"`\n>\n>**Output:** `[3,2,0,1]`\n\n**Note:**\n1.  `1 <= S.length <= 10000`\n2.  `S` only contains characters `\"I\"` or `\"D\"`.\n##### 解题思路：\n如果字符为`I`，则数字从0开始递增，如果字符为`D`，则数字从N开始递减；\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    vector<int> diStringMatch(string S) {\n        int len = S.length();\n        vector<int> A;\n        int incNum = 0;\n        int decNum = len;\n        for(int i = 0; i < len; ++i)\n        {\n            if(S[i] == 'I')\n                A.push_back(incNum++);\n            else\n                A.push_back(decNum--);\n        }\n        A.push_back(incNum);\n        return A;\n    }\n};\n```","slug":"LeetCode/942_di_string_match","published":1,"updated":"2019-04-01T11:26:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri6002zmetf86xlj1a9","content":"<h4 id=\"942-DI-String-Match\"><a href=\"#942-DI-String-Match\" class=\"headerlink\" title=\"942. DI String Match\"></a><a href=\"https://leetcode-cn.com/problems/di-string-match/\" target=\"_blank\" rel=\"noopener\">942. DI String Match</a></h4><p>Given a string <code>S</code> that <strong>only</strong> contains “I” (increase) or “D” (decrease), let <code>N = S.length</code>.<br>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0, ..., N-1</code>:</p>\n<ul>\n<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\n<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;IDID&quot;</code></p>\n<p><strong>Output:</strong> <code>[0,4,1,3,2]</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;III&quot;</code></p>\n<p><strong>Output:</strong> <code>[0,1,2,3]</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;DDI&quot;</code></p>\n<p><strong>Output:</strong> <code>[3,2,0,1]</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= S.length &lt;= 10000</code></li>\n<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>如果字符为<code>I</code>，则数字从0开始递增，如果字符为<code>D</code>，则数字从N开始递减；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">diStringMatch</span><span class=\"token punctuation\">(</span>string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> A<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> incNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> decNum <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span>\n            A<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>incNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            A<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>decNum<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    A<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>incNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"942-DI-String-Match\"><a href=\"#942-DI-String-Match\" class=\"headerlink\" title=\"942. DI String Match\"></a><a href=\"https://leetcode-cn.com/problems/di-string-match/\" target=\"_blank\" rel=\"noopener\">942. DI String Match</a></h4><p>Given a string <code>S</code> that <strong>only</strong> contains “I” (increase) or “D” (decrease), let <code>N = S.length</code>.<br>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0, ..., N-1</code>:</p>\n<ul>\n<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\n<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;IDID&quot;</code></p>\n<p><strong>Output:</strong> <code>[0,4,1,3,2]</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;III&quot;</code></p>\n<p><strong>Output:</strong> <code>[0,1,2,3]</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>&quot;DDI&quot;</code></p>\n<p><strong>Output:</strong> <code>[3,2,0,1]</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>1 &lt;= S.length &lt;= 10000</code></li>\n<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>如果字符为<code>I</code>，则数字从0开始递增，如果字符为<code>D</code>，则数字从N开始递减；<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nvector&lt;int&gt; diStringMatch(string S) {\n    int len = S.length();\n    vector&lt;int&gt; A;\n    int incNum = 0;\n    int decNum = len;\n    for(int i = 0; i &lt; len; ++i)\n    {\n        if(S[i] == &#39;I&#39;)\n            A.push_back(incNum++);\n        else\n            A.push_back(decNum--);\n    }\n    A.push_back(incNum);\n    return A;\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"LeetCode刷题：961.N-Repeated Element in Size 2N Array","date":"2019-02-24T05:31:00.000Z","_content":"#### [961\\. N-Repeated Element in Size 2N Array](https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/)\nIn a array `A` of size `2N`, there are `N+1` unique elements, and exactly one of these elements is repeated N times.\nReturn the element repeated `N` times.\n\n**Example 1:**\n>**Input:** `[1,2,3,3]`\n>\n>**Output:** `3`\n\n**Example 2:**\n>**Input:** `[2,1,2,5,3,2]`\n>\n>**Output:** `2`\n\n**Example 3:**\n>**Input:** `[5,1,5,2,5,3,5,4]`\n>\n>**Output:** `5`\n\n**Note:**\n1.  `4 <= A.length <= 10000`\n2.  `0 <= A[i] < 10000`\n3.  `A.length` is even\n##### 解题思路：\n根据题意，其余数字都是不同的，仅有目标值重复，故寻找出现次数大于1的数\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int repeatedNTimes(vector<int>& A) {\n        int len = A.size();\n        for(int i  = 0; i < len; ++i)\n            for(int j = i + 1; j < len; ++j)\n                if(A[i] == A[j])\n                    return A[i];\n    }\n};\n```\n","source":"_posts/LeetCode/961_n-repeated_element_in_size_2n_array.md","raw":"---\ntitle: LeetCode刷题：961.N-Repeated Element in Size 2N Array\ndate: 2019-02-24 13:31:00\ncategories: LeetCode\ntags:\n  - 哈希表\n---\n#### [961\\. N-Repeated Element in Size 2N Array](https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/)\nIn a array `A` of size `2N`, there are `N+1` unique elements, and exactly one of these elements is repeated N times.\nReturn the element repeated `N` times.\n\n**Example 1:**\n>**Input:** `[1,2,3,3]`\n>\n>**Output:** `3`\n\n**Example 2:**\n>**Input:** `[2,1,2,5,3,2]`\n>\n>**Output:** `2`\n\n**Example 3:**\n>**Input:** `[5,1,5,2,5,3,5,4]`\n>\n>**Output:** `5`\n\n**Note:**\n1.  `4 <= A.length <= 10000`\n2.  `0 <= A[i] < 10000`\n3.  `A.length` is even\n##### 解题思路：\n根据题意，其余数字都是不同的，仅有目标值重复，故寻找出现次数大于1的数\n##### 解答：\n```cpp\nclass Solution {\npublic:\n    int repeatedNTimes(vector<int>& A) {\n        int len = A.size();\n        for(int i  = 0; i < len; ++i)\n            for(int j = i + 1; j < len; ++j)\n                if(A[i] == A[j])\n                    return A[i];\n    }\n};\n```\n","slug":"LeetCode/961_n-repeated_element_in_size_2n_array","published":1,"updated":"2019-04-01T11:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri70033metf6uiic3of","content":"<h4 id=\"961-N-Repeated-Element-in-Size-2N-Array\"><a href=\"#961-N-Repeated-Element-in-Size-2N-Array\" class=\"headerlink\" title=\"961. N-Repeated Element in Size 2N Array\"></a><a href=\"https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/\" target=\"_blank\" rel=\"noopener\">961. N-Repeated Element in Size 2N Array</a></h4><p>In a array <code>A</code> of size <code>2N</code>, there are <code>N+1</code> unique elements, and exactly one of these elements is repeated N times.<br>Return the element repeated <code>N</code> times.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[1,2,3,3]</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[2,1,2,5,3,2]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[5,1,5,2,5,3,5,4]</code></p>\n<p><strong>Output:</strong> <code>5</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n<li><code>A.length</code> is even<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>根据题意，其余数字都是不同的，仅有目标值重复，故寻找出现次数大于1的数<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">repeatedNTimes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"961-N-Repeated-Element-in-Size-2N-Array\"><a href=\"#961-N-Repeated-Element-in-Size-2N-Array\" class=\"headerlink\" title=\"961. N-Repeated Element in Size 2N Array\"></a><a href=\"https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/\" target=\"_blank\" rel=\"noopener\">961. N-Repeated Element in Size 2N Array</a></h4><p>In a array <code>A</code> of size <code>2N</code>, there are <code>N+1</code> unique elements, and exactly one of these elements is repeated N times.<br>Return the element repeated <code>N</code> times.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[1,2,3,3]</code></p>\n<p><strong>Output:</strong> <code>3</code></p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[2,1,2,5,3,2]</code></p>\n<p><strong>Output:</strong> <code>2</code></p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> <code>[5,1,5,2,5,3,5,4]</code></p>\n<p><strong>Output:</strong> <code>5</code></p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n<li><code>A.length</code> is even<h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5>根据题意，其余数字都是不同的，仅有目标值重复，故寻找出现次数大于1的数<h5 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h5><pre><code class=\"cpp\">class Solution {\npublic:\nint repeatedNTimes(vector&lt;int&gt;&amp; A) {\n    int len = A.size();\n    for(int i  = 0; i &lt; len; ++i)\n        for(int j = i + 1; j &lt; len; ++j)\n            if(A[i] == A[j])\n                return A[i];\n}\n};</code></pre>\n</li>\n</ol>\n"},{"title":"群晖Docker加速","date":"2020-03-30T03:15:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-1.jpg","summary":"为群晖中的Docker进行加速","_content":"# 群晖Docker镜像下载失败\n群晖的套件中心虽然很强大，但是套件中心并不能完全满足我们的使用需求，好在群晖支持Docker容器技术，我们可以通过Docker来实现很多新的功能，而且Docker更容易备份。\n\n但是在使用Docker是总是镜像下载失败，尝试很多次都是如此。\n![下载失败](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-2.jpg)\n\n# 镜像加速\n查阅网上资料，很多网友出现的问题都是镜像下载速度满，通过配置镜像加速就可以了，本着死马当活马医，所以进行尝试。\n\n这里，我选择了Azure的公开镜像：https://dockerhub.azk8s.cn。操作步骤如下：\n\n打开Docker，选择`注册表——>设置`\n![Docker设置](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-3.jpg)\n\n选择`Docker Hub`，然后进行编辑\n![编辑存储库](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-4.jpg)\n\n在编辑注册表界面中，勾选`启用注册表镜像`，在`注册表镜像URL`中填入镜像地址，最终确认即可。\n![image.png](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-5.jpg)\n\n通过这种方式，完美解决了镜像下载失败的问题，笔者本人使用了Azure的公开镜像，大家也可以尝试其他公开镜像加速地址（本人未尝试）：\n> 七牛云加速器: [https://reg-mirror.qiniu.com](https://reg-mirror.qiniu.com/)\n>\n> 网易: [http://hub-mirror.c.163.com](http://hub-mirror.c.163.com/)\n>\n> 华为云: [https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com](https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com/)\n\n#### 参考博客：\n[群晖 NAS Docker 容器镜像加速](https://blog.holegots.com/2019/11/06/SynologyDockerSpeed/)\n\n\n\n","source":"_posts/Share/Synology_docker_accelerate.md","raw":"---\ntitle: 群晖Docker加速\ndate: 2020-03-30 11:15:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20200330-1.jpg\nsummary: 为群晖中的Docker进行加速\ncategories: 分享\ntags:\n  - 群晖\n  - Docker\n---\n# 群晖Docker镜像下载失败\n群晖的套件中心虽然很强大，但是套件中心并不能完全满足我们的使用需求，好在群晖支持Docker容器技术，我们可以通过Docker来实现很多新的功能，而且Docker更容易备份。\n\n但是在使用Docker是总是镜像下载失败，尝试很多次都是如此。\n![下载失败](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-2.jpg)\n\n# 镜像加速\n查阅网上资料，很多网友出现的问题都是镜像下载速度满，通过配置镜像加速就可以了，本着死马当活马医，所以进行尝试。\n\n这里，我选择了Azure的公开镜像：https://dockerhub.azk8s.cn。操作步骤如下：\n\n打开Docker，选择`注册表——>设置`\n![Docker设置](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-3.jpg)\n\n选择`Docker Hub`，然后进行编辑\n![编辑存储库](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-4.jpg)\n\n在编辑注册表界面中，勾选`启用注册表镜像`，在`注册表镜像URL`中填入镜像地址，最终确认即可。\n![image.png](https://gitee.com/wenguang0816/blogPic/raw/master/20200330-5.jpg)\n\n通过这种方式，完美解决了镜像下载失败的问题，笔者本人使用了Azure的公开镜像，大家也可以尝试其他公开镜像加速地址（本人未尝试）：\n> 七牛云加速器: [https://reg-mirror.qiniu.com](https://reg-mirror.qiniu.com/)\n>\n> 网易: [http://hub-mirror.c.163.com](http://hub-mirror.c.163.com/)\n>\n> 华为云: [https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com](https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com/)\n\n#### 参考博客：\n[群晖 NAS Docker 容器镜像加速](https://blog.holegots.com/2019/11/06/SynologyDockerSpeed/)\n\n\n\n","slug":"Share/Synology_docker_accelerate","published":1,"updated":"2020-03-30T03:28:45.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri80036metf85rrf5r4","content":"<h1 id=\"群晖Docker镜像下载失败\"><a href=\"#群晖Docker镜像下载失败\" class=\"headerlink\" title=\"群晖Docker镜像下载失败\"></a>群晖Docker镜像下载失败</h1><p>群晖的套件中心虽然很强大，但是套件中心并不能完全满足我们的使用需求，好在群晖支持Docker容器技术，我们可以通过Docker来实现很多新的功能，而且Docker更容易备份。</p>\n<p>但是在使用Docker是总是镜像下载失败，尝试很多次都是如此。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-2.jpg\" alt=\"下载失败\"></p>\n<h1 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h1><p>查阅网上资料，很多网友出现的问题都是镜像下载速度满，通过配置镜像加速就可以了，本着死马当活马医，所以进行尝试。</p>\n<p>这里，我选择了Azure的公开镜像：<a href=\"https://dockerhub.azk8s.cn。操作步骤如下：\" target=\"_blank\" rel=\"noopener\">https://dockerhub.azk8s.cn。操作步骤如下：</a></p>\n<p>打开Docker，选择<code>注册表——&gt;设置</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-3.jpg\" alt=\"Docker设置\"></p>\n<p>选择<code>Docker Hub</code>，然后进行编辑<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-4.jpg\" alt=\"编辑存储库\"></p>\n<p>在编辑注册表界面中，勾选<code>启用注册表镜像</code>，在<code>注册表镜像URL</code>中填入镜像地址，最终确认即可。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-5.jpg\" alt=\"image.png\"></p>\n<p>通过这种方式，完美解决了镜像下载失败的问题，笔者本人使用了Azure的公开镜像，大家也可以尝试其他公开镜像加速地址（本人未尝试）：</p>\n<blockquote>\n<p>七牛云加速器: <a href=\"https://reg-mirror.qiniu.com/\" target=\"_blank\" rel=\"noopener\">https://reg-mirror.qiniu.com</a></p>\n<p>网易: <a href=\"http://hub-mirror.c.163.com/\" target=\"_blank\" rel=\"noopener\">http://hub-mirror.c.163.com</a></p>\n<p>华为云: <a href=\"https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com/\" target=\"_blank\" rel=\"noopener\">https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com</a></p>\n</blockquote>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><p><a href=\"https://blog.holegots.com/2019/11/06/SynologyDockerSpeed/\" target=\"_blank\" rel=\"noopener\">群晖 NAS Docker 容器镜像加速</a></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"群晖Docker镜像下载失败\"><a href=\"#群晖Docker镜像下载失败\" class=\"headerlink\" title=\"群晖Docker镜像下载失败\"></a>群晖Docker镜像下载失败</h1><p>群晖的套件中心虽然很强大，但是套件中心并不能完全满足我们的使用需求，好在群晖支持Docker容器技术，我们可以通过Docker来实现很多新的功能，而且Docker更容易备份。</p>\n<p>但是在使用Docker是总是镜像下载失败，尝试很多次都是如此。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-2.jpg\" alt=\"下载失败\"></p>\n<h1 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h1><p>查阅网上资料，很多网友出现的问题都是镜像下载速度满，通过配置镜像加速就可以了，本着死马当活马医，所以进行尝试。</p>\n<p>这里，我选择了Azure的公开镜像：<a href=\"https://dockerhub.azk8s.cn。操作步骤如下：\" target=\"_blank\" rel=\"noopener\">https://dockerhub.azk8s.cn。操作步骤如下：</a></p>\n<p>打开Docker，选择<code>注册表——&gt;设置</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-3.jpg\" alt=\"Docker设置\"></p>\n<p>选择<code>Docker Hub</code>，然后进行编辑<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-4.jpg\" alt=\"编辑存储库\"></p>\n<p>在编辑注册表界面中，勾选<code>启用注册表镜像</code>，在<code>注册表镜像URL</code>中填入镜像地址，最终确认即可。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200330-5.jpg\" alt=\"image.png\"></p>\n<p>通过这种方式，完美解决了镜像下载失败的问题，笔者本人使用了Azure的公开镜像，大家也可以尝试其他公开镜像加速地址（本人未尝试）：</p>\n<blockquote>\n<p>七牛云加速器: <a href=\"https://reg-mirror.qiniu.com/\" target=\"_blank\" rel=\"noopener\">https://reg-mirror.qiniu.com</a></p>\n<p>网易: <a href=\"http://hub-mirror.c.163.com/\" target=\"_blank\" rel=\"noopener\">http://hub-mirror.c.163.com</a></p>\n<p>华为云: <a href=\"https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com/\" target=\"_blank\" rel=\"noopener\">https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com</a></p>\n</blockquote>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><p><a href=\"https://blog.holegots.com/2019/11/06/SynologyDockerSpeed/\" target=\"_blank\" rel=\"noopener\">群晖 NAS Docker 容器镜像加速</a></p>\n"},{"title":"git分支(branch)和标签(tag)操作","date":"2019-04-01T02:50:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190401-1.jpg","summary":"汇总git中branch和tag的常用命令，更好的进行版本管理","_content":"## 分支相关操作\n1. 查看分支\n```bash\ngit branch\n```\n2. 创建分支\n```bash\ngit branch <name>\n```\n3. 切换分支\n```bash\ngit checkout <name>\n```\n4. 创建+切换分支\n```bash\ngit checkout -b <name>\n```\n5. 合并某分支到当前分支\n```bash\ngit merge <name>\n```\n6. 删除本地分支\n```bash\ngit branch -d <name>\n```\n7. 删除远程分支\n```bash\ngit branch -f -d origin/<name>\ngit branch origin :<name>\n```\n\n## 标签相关操作\n1. 新建标签\n```bash\ngit tag <tagname>\n```\n2. 新建带有信息的标签\n```bash\ngit tag -a <tagname> -m 'label'\n```\n3. 查看所有标签\n```bash\ngit tag\n```\n4. 删除本地标签\n```bash\ngit tag -d <tagname>\n```\n5. 删除远程标签\n```bash\ngit push origin :refs/tags/<tagname>\n```\n","source":"_posts/Share/git_tag.md","raw":"---\ntitle: git分支(branch)和标签(tag)操作\ndate: 2019-04-01 10:50:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190401-1.jpg\nsummary: 汇总git中branch和tag的常用命令，更好的进行版本管理\ncategories: 分享\ntags:\n  - git\n  - branch & tag\n---\n## 分支相关操作\n1. 查看分支\n```bash\ngit branch\n```\n2. 创建分支\n```bash\ngit branch <name>\n```\n3. 切换分支\n```bash\ngit checkout <name>\n```\n4. 创建+切换分支\n```bash\ngit checkout -b <name>\n```\n5. 合并某分支到当前分支\n```bash\ngit merge <name>\n```\n6. 删除本地分支\n```bash\ngit branch -d <name>\n```\n7. 删除远程分支\n```bash\ngit branch -f -d origin/<name>\ngit branch origin :<name>\n```\n\n## 标签相关操作\n1. 新建标签\n```bash\ngit tag <tagname>\n```\n2. 新建带有信息的标签\n```bash\ngit tag -a <tagname> -m 'label'\n```\n3. 查看所有标签\n```bash\ngit tag\n```\n4. 删除本地标签\n```bash\ngit tag -d <tagname>\n```\n5. 删除远程标签\n```bash\ngit push origin :refs/tags/<tagname>\n```\n","slug":"Share/git_tag","published":1,"updated":"2019-07-14T03:13:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euri90038metfhbsq0dw1","content":"<h2 id=\"分支相关操作\"><a href=\"#分支相关操作\" class=\"headerlink\" title=\"分支相关操作\"></a>分支相关操作</h2><ol>\n<li>查看分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch</code></pre>\n</li>\n<li>创建分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n<li>切换分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n<li>创建+切换分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n<li>合并某分支到当前分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n<li>删除本地分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n<li>删除远程分支<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -f -d origin/<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> branch origin :<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre>\n</li>\n</ol>\n<h2 id=\"标签相关操作\"><a href=\"#标签相关操作\" class=\"headerlink\" title=\"标签相关操作\"></a>标签相关操作</h2><ol>\n<li>新建标签<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></code></pre>\n</li>\n<li>新建带有信息的标签<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span> -m <span class=\"token string\">'label'</span></code></pre>\n</li>\n<li>查看所有标签<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag</code></pre>\n</li>\n<li>删除本地标签<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></code></pre>\n</li>\n<li>删除远程标签<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin :refs/tags/<span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></code></pre>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"分支相关操作\"><a href=\"#分支相关操作\" class=\"headerlink\" title=\"分支相关操作\"></a>分支相关操作</h2><ol>\n<li>查看分支<pre><code class=\"bash\">git branch</code></pre>\n</li>\n<li>创建分支<pre><code class=\"bash\">git branch &lt;name&gt;</code></pre>\n</li>\n<li>切换分支<pre><code class=\"bash\">git checkout &lt;name&gt;</code></pre>\n</li>\n<li>创建+切换分支<pre><code class=\"bash\">git checkout -b &lt;name&gt;</code></pre>\n</li>\n<li>合并某分支到当前分支<pre><code class=\"bash\">git merge &lt;name&gt;</code></pre>\n</li>\n<li>删除本地分支<pre><code class=\"bash\">git branch -d &lt;name&gt;</code></pre>\n</li>\n<li>删除远程分支<pre><code class=\"bash\">git branch -f -d origin/&lt;name&gt;\ngit branch origin :&lt;name&gt;</code></pre>\n</li>\n</ol>\n<h2 id=\"标签相关操作\"><a href=\"#标签相关操作\" class=\"headerlink\" title=\"标签相关操作\"></a>标签相关操作</h2><ol>\n<li>新建标签<pre><code class=\"bash\">git tag &lt;tagname&gt;</code></pre>\n</li>\n<li>新建带有信息的标签<pre><code class=\"bash\">git tag -a &lt;tagname&gt; -m &#39;label&#39;</code></pre>\n</li>\n<li>查看所有标签<pre><code class=\"bash\">git tag</code></pre>\n</li>\n<li>删除本地标签<pre><code class=\"bash\">git tag -d &lt;tagname&gt;</code></pre>\n</li>\n<li>删除远程标签<pre><code class=\"bash\">git push origin :refs/tags/&lt;tagname&gt;</code></pre>\n</li>\n</ol>\n"},{"title":"修改ubuntu用户名","date":"2019-11-25T11:06:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20191125-1.jpg","summary":"通过命令行修改ubuntu的用户名","_content":"### 起因\n从腾讯云申请的云服务器(ubuntu系统)的默认用户名为`ubuntu`，一般来说可以也接受，但是作为自己要使用的机器还是要有点个性化。通过网上的帖子，摸索了半天才修改完成，现在将自己的经验分享给大家。\n\n### 切换到root账户\n因为修改普通账户的用户名，所以建议切换到`root`用户，这样可以避免一些权限的问题和其他不必要的影响。新申请或安装的机器`root`用户是没有密码的，所以可以先为`root`账户设置密码：\n```bash\n# 如果设置了密码可跳过此步\nubuntu@VM-0-4-ubuntu:~$ sudo passwd root\n# 为用户修改密码也可以使用此命令\n```\n然后切换到`root`用户(需要输入密码）：\n```bash\nubuntu@VM-0-4-ubuntu:~$ su root\nPassword:\nroot@VM-0-4-ubuntu:/home/ubuntu#\n```\n\n### 修改用户名\n修改用户名我们需要进行四步操作：\n\n#### 1.修改`/etc/passwd`文件: `vim /etc/passwd`\n    ```bash\n    ubuntu:x:500:500::/home/ubuntu:/bin/bash\n    # 把用户名ubuntu改成：你想要的用户名，其他都不要修改\n    test:x:500:500::/home/test:/bin/bash\n    # 打开文件后回发现很多内容，可以利用替换指令进行修改\n    # :1,$s/ubuntu/test/g\n    # 解释: 替换第 1 行开始到最后一行中每一行所有 ubuntu 为 test\n    ```\n最后输入`:wq!`保存退出\n\n*ps：这里网上有帖子说用`gedit`进行修改，不过在新申请或安装的机器中是没有`gedit`的，所以可以使用`vim/vi`来代替*\n\n#### 2.修改`/etc/shadow`文件: `vim /etc/shadow`\n```bash\nubunt:$6$ULolz...EMVYj/:18222:0:99999:7:::\n# 把用户名ubuntu改成：你想要的用户名，其他都不要修改\ntest:$6$ULolz...EMVYj/:18222:0:99999:7:::\n```\n\n#### 3.修改`/etc/group`文件: `vim /etc/group`\n```bash\nubunt:x:1:root,bin,ubuntu\n#...\n# 这个文件中的原用户名有很多，可以使用第一步中提到的替换指令修改:\n:1,$s/ubuntu/test/g\n```\n\n#### 4.修改用户目录\n```bash\nmv /home/ubuntu /home/test\n```\n此时，我们就可以更改万用户名了，可以切换到新的用户名测试一下：\n```bash\nroot@VM-0-4-ubuntu:~$ su test\ntest@VM-0-4-ubuntu:~$\n```\n\n#### 参考博客\n[CSDN: Ubuntu 修改用户名-OneDay-X](https://blog.csdn.net/zhaokx3/article/details/64127454)\n\n\n\n\n\n\n\n\n","source":"_posts/Share/modify_ubuntu_username.md","raw":"---\ntitle: 修改ubuntu用户名\ndate: 2019-11-25 19:06:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20191125-1.jpg\nsummary: 通过命令行修改ubuntu的用户名\ncategories: 分享\ntags:\n  - ubuntu\n  - 命令行\n  - 用户名\n---\n### 起因\n从腾讯云申请的云服务器(ubuntu系统)的默认用户名为`ubuntu`，一般来说可以也接受，但是作为自己要使用的机器还是要有点个性化。通过网上的帖子，摸索了半天才修改完成，现在将自己的经验分享给大家。\n\n### 切换到root账户\n因为修改普通账户的用户名，所以建议切换到`root`用户，这样可以避免一些权限的问题和其他不必要的影响。新申请或安装的机器`root`用户是没有密码的，所以可以先为`root`账户设置密码：\n```bash\n# 如果设置了密码可跳过此步\nubuntu@VM-0-4-ubuntu:~$ sudo passwd root\n# 为用户修改密码也可以使用此命令\n```\n然后切换到`root`用户(需要输入密码）：\n```bash\nubuntu@VM-0-4-ubuntu:~$ su root\nPassword:\nroot@VM-0-4-ubuntu:/home/ubuntu#\n```\n\n### 修改用户名\n修改用户名我们需要进行四步操作：\n\n#### 1.修改`/etc/passwd`文件: `vim /etc/passwd`\n    ```bash\n    ubuntu:x:500:500::/home/ubuntu:/bin/bash\n    # 把用户名ubuntu改成：你想要的用户名，其他都不要修改\n    test:x:500:500::/home/test:/bin/bash\n    # 打开文件后回发现很多内容，可以利用替换指令进行修改\n    # :1,$s/ubuntu/test/g\n    # 解释: 替换第 1 行开始到最后一行中每一行所有 ubuntu 为 test\n    ```\n最后输入`:wq!`保存退出\n\n*ps：这里网上有帖子说用`gedit`进行修改，不过在新申请或安装的机器中是没有`gedit`的，所以可以使用`vim/vi`来代替*\n\n#### 2.修改`/etc/shadow`文件: `vim /etc/shadow`\n```bash\nubunt:$6$ULolz...EMVYj/:18222:0:99999:7:::\n# 把用户名ubuntu改成：你想要的用户名，其他都不要修改\ntest:$6$ULolz...EMVYj/:18222:0:99999:7:::\n```\n\n#### 3.修改`/etc/group`文件: `vim /etc/group`\n```bash\nubunt:x:1:root,bin,ubuntu\n#...\n# 这个文件中的原用户名有很多，可以使用第一步中提到的替换指令修改:\n:1,$s/ubuntu/test/g\n```\n\n#### 4.修改用户目录\n```bash\nmv /home/ubuntu /home/test\n```\n此时，我们就可以更改万用户名了，可以切换到新的用户名测试一下：\n```bash\nroot@VM-0-4-ubuntu:~$ su test\ntest@VM-0-4-ubuntu:~$\n```\n\n#### 参考博客\n[CSDN: Ubuntu 修改用户名-OneDay-X](https://blog.csdn.net/zhaokx3/article/details/64127454)\n\n\n\n\n\n\n\n\n","slug":"Share/modify_ubuntu_username","published":1,"updated":"2019-11-25T11:55:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurib003cmetfme2wfjzb","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>从腾讯云申请的云服务器(ubuntu系统)的默认用户名为<code>ubuntu</code>，一般来说可以也接受，但是作为自己要使用的机器还是要有点个性化。通过网上的帖子，摸索了半天才修改完成，现在将自己的经验分享给大家。</p>\n<h3 id=\"切换到root账户\"><a href=\"#切换到root账户\" class=\"headerlink\" title=\"切换到root账户\"></a>切换到root账户</h3><p>因为修改普通账户的用户名，所以建议切换到<code>root</code>用户，这样可以避免一些权限的问题和其他不必要的影响。新申请或安装的机器<code>root</code>用户是没有密码的，所以可以先为<code>root</code>账户设置密码：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 如果设置了密码可跳过此步</span>\nubuntu@VM-0-4-ubuntu:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root\n<span class=\"token comment\" spellcheck=\"true\"># 为用户修改密码也可以使用此命令</span></code></pre>\n<p>然后切换到<code>root</code>用户(需要输入密码）：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">ubuntu@VM-0-4-ubuntu:~$ <span class=\"token function\">su</span> root\nPassword:\nroot@VM-0-4-ubuntu:/home/ubuntu<span class=\"token comment\" spellcheck=\"true\">#</span></code></pre>\n<h3 id=\"修改用户名\"><a href=\"#修改用户名\" class=\"headerlink\" title=\"修改用户名\"></a>修改用户名</h3><p>修改用户名我们需要进行四步操作：</p>\n<h4 id=\"1-修改-etc-passwd文件-vim-etc-passwd\"><a href=\"#1-修改-etc-passwd文件-vim-etc-passwd\" class=\"headerlink\" title=\"1.修改/etc/passwd文件: vim /etc/passwd\"></a>1.修改<code>/etc/passwd</code>文件: <code>vim /etc/passwd</code></h4><pre><code>```bash\nubuntu:x:500:500::/home/ubuntu:/bin/bash\n# 把用户名ubuntu改成：你想要的用户名，其他都不要修改\ntest:x:500:500::/home/test:/bin/bash\n# 打开文件后回发现很多内容，可以利用替换指令进行修改\n# :1,$s/ubuntu/test/g\n# 解释: 替换第 1 行开始到最后一行中每一行所有 ubuntu 为 test\n```</code></pre><p>最后输入<code>:wq!</code>保存退出</p>\n<p><em>ps：这里网上有帖子说用<code>gedit</code>进行修改，不过在新申请或安装的机器中是没有<code>gedit</code>的，所以可以使用<code>vim/vi</code>来代替</em></p>\n<h4 id=\"2-修改-etc-shadow文件-vim-etc-shadow\"><a href=\"#2-修改-etc-shadow文件-vim-etc-shadow\" class=\"headerlink\" title=\"2.修改/etc/shadow文件: vim /etc/shadow\"></a>2.修改<code>/etc/shadow</code>文件: <code>vim /etc/shadow</code></h4><pre class=\" language-bash\"><code class=\"language-bash\">ubunt:<span class=\"token variable\">$6</span><span class=\"token variable\">$ULolz</span><span class=\"token punctuation\">..</span>.EMVYj/:18222:0:99999:7:::\n<span class=\"token comment\" spellcheck=\"true\"># 把用户名ubuntu改成：你想要的用户名，其他都不要修改</span>\ntest:<span class=\"token variable\">$6</span><span class=\"token variable\">$ULolz</span><span class=\"token punctuation\">..</span>.EMVYj/:18222:0:99999:7:::</code></pre>\n<h4 id=\"3-修改-etc-group文件-vim-etc-group\"><a href=\"#3-修改-etc-group文件-vim-etc-group\" class=\"headerlink\" title=\"3.修改/etc/group文件: vim /etc/group\"></a>3.修改<code>/etc/group</code>文件: <code>vim /etc/group</code></h4><pre class=\" language-bash\"><code class=\"language-bash\">ubunt:x:1:root,bin,ubuntu\n<span class=\"token comment\" spellcheck=\"true\">#...</span>\n<span class=\"token comment\" spellcheck=\"true\"># 这个文件中的原用户名有很多，可以使用第一步中提到的替换指令修改:</span>\n:1,<span class=\"token variable\">$s</span>/ubuntu/test/g</code></pre>\n<h4 id=\"4-修改用户目录\"><a href=\"#4-修改用户目录\" class=\"headerlink\" title=\"4.修改用户目录\"></a>4.修改用户目录</h4><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> /home/ubuntu /home/test</code></pre>\n<p>此时，我们就可以更改万用户名了，可以切换到新的用户名测试一下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">root@VM-0-4-ubuntu:~$ <span class=\"token function\">su</span> <span class=\"token function\">test</span>\ntest@VM-0-4-ubuntu:~$</code></pre>\n<h4 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h4><p><a href=\"https://blog.csdn.net/zhaokx3/article/details/64127454\" target=\"_blank\" rel=\"noopener\">CSDN: Ubuntu 修改用户名-OneDay-X</a></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>从腾讯云申请的云服务器(ubuntu系统)的默认用户名为<code>ubuntu</code>，一般来说可以也接受，但是作为自己要使用的机器还是要有点个性化。通过网上的帖子，摸索了半天才修改完成，现在将自己的经验分享给大家。</p>\n<h3 id=\"切换到root账户\"><a href=\"#切换到root账户\" class=\"headerlink\" title=\"切换到root账户\"></a>切换到root账户</h3><p>因为修改普通账户的用户名，所以建议切换到<code>root</code>用户，这样可以避免一些权限的问题和其他不必要的影响。新申请或安装的机器<code>root</code>用户是没有密码的，所以可以先为<code>root</code>账户设置密码：</p>\n<pre><code class=\"bash\"># 如果设置了密码可跳过此步\nubuntu@VM-0-4-ubuntu:~$ sudo passwd root\n# 为用户修改密码也可以使用此命令</code></pre>\n<p>然后切换到<code>root</code>用户(需要输入密码）：</p>\n<pre><code class=\"bash\">ubuntu@VM-0-4-ubuntu:~$ su root\nPassword:\nroot@VM-0-4-ubuntu:/home/ubuntu#</code></pre>\n<h3 id=\"修改用户名\"><a href=\"#修改用户名\" class=\"headerlink\" title=\"修改用户名\"></a>修改用户名</h3><p>修改用户名我们需要进行四步操作：</p>\n<h4 id=\"1-修改-etc-passwd文件-vim-etc-passwd\"><a href=\"#1-修改-etc-passwd文件-vim-etc-passwd\" class=\"headerlink\" title=\"1.修改/etc/passwd文件: vim /etc/passwd\"></a>1.修改<code>/etc/passwd</code>文件: <code>vim /etc/passwd</code></h4><pre><code>```bash\nubuntu:x:500:500::/home/ubuntu:/bin/bash\n# 把用户名ubuntu改成：你想要的用户名，其他都不要修改\ntest:x:500:500::/home/test:/bin/bash\n# 打开文件后回发现很多内容，可以利用替换指令进行修改\n# :1,$s/ubuntu/test/g\n# 解释: 替换第 1 行开始到最后一行中每一行所有 ubuntu 为 test\n```</code></pre><p>最后输入<code>:wq!</code>保存退出</p>\n<p><em>ps：这里网上有帖子说用<code>gedit</code>进行修改，不过在新申请或安装的机器中是没有<code>gedit</code>的，所以可以使用<code>vim/vi</code>来代替</em></p>\n<h4 id=\"2-修改-etc-shadow文件-vim-etc-shadow\"><a href=\"#2-修改-etc-shadow文件-vim-etc-shadow\" class=\"headerlink\" title=\"2.修改/etc/shadow文件: vim /etc/shadow\"></a>2.修改<code>/etc/shadow</code>文件: <code>vim /etc/shadow</code></h4><pre><code class=\"bash\">ubunt:$6$ULolz...EMVYj/:18222:0:99999:7:::\n# 把用户名ubuntu改成：你想要的用户名，其他都不要修改\ntest:$6$ULolz...EMVYj/:18222:0:99999:7:::</code></pre>\n<h4 id=\"3-修改-etc-group文件-vim-etc-group\"><a href=\"#3-修改-etc-group文件-vim-etc-group\" class=\"headerlink\" title=\"3.修改/etc/group文件: vim /etc/group\"></a>3.修改<code>/etc/group</code>文件: <code>vim /etc/group</code></h4><pre><code class=\"bash\">ubunt:x:1:root,bin,ubuntu\n#...\n# 这个文件中的原用户名有很多，可以使用第一步中提到的替换指令修改:\n:1,$s/ubuntu/test/g</code></pre>\n<h4 id=\"4-修改用户目录\"><a href=\"#4-修改用户目录\" class=\"headerlink\" title=\"4.修改用户目录\"></a>4.修改用户目录</h4><pre><code class=\"bash\">mv /home/ubuntu /home/test</code></pre>\n<p>此时，我们就可以更改万用户名了，可以切换到新的用户名测试一下：</p>\n<pre><code class=\"bash\">root@VM-0-4-ubuntu:~$ su test\ntest@VM-0-4-ubuntu:~$</code></pre>\n<h4 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h4><p><a href=\"https://blog.csdn.net/zhaokx3/article/details/64127454\" target=\"_blank\" rel=\"noopener\">CSDN: Ubuntu 修改用户名-OneDay-X</a></p>\n"},{"title":"QT5串口通信（Hex格式传输）","date":"2019-02-28T01:36:33.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg","summary":"通过QT5开发了一款用于FPGA参数调节的上位机程序！","_content":"## 参考博客\n1. 博客园-菜头大大：[QT串口通信](https://www.cnblogs.com/wurenzhong/p/8186437.html)\n2. CSDN-宗师之路：[QT实现串口通信(附源码下载)](https://blog.csdn.net/qq_27312943/article/details/52900527)\n3. CSDN-xz-c：[C++将10进制字符串转为16进制字符串](https://blog.csdn.net/u014602230/article/details/52752683)\n\n## 本文改进\n1. 在前辈们的代码基础上进行改进，使操作更符合逻辑\n2. 优化代码结构，提高了代码的可移植性\n\n## QT实现串口通信\n1. 在工程文件（.pro）中添加串口通信相关运行库：`QT       += serialport`\n2. 在头文件中添加\n    ```cpp\n    #include <QtSerialPort/QSerialPort>\n    #include <QtSerialPort/QSerialPortInfo>\n    ```\n3. 在头文件中定义全局的串口对象：`QSerialPort *serial;`\n\n## 串口通信步骤\n1. 设置串口名称\n    + 寻找可用串口\n        ```cpp\n        void control::scanPort()\n        {\n            this->ui->cb_port->clear();\n            int isHavePort = 0;\n            foreach(const QSerialPortInfo &info, QSerialPortInfo::availablePorts())\n            {\n                QSerialPort serial;\n                serial.setPort(info);\n                //判断端口能否打开\n                if(serial.open(QIODevice::ReadWrite))\n                {\n                    this->ui->cb_port->addItem(serial.portName());\n                    isHavePort ++;\n                }\n                if(isHavePort == 0){\n                    QMessageBox::information(NULL, \"警告\", \"没有可用串口\");\n                }\n            }\n        }\n        ```\n    + 设置串口名\n        ```cpp\n        serial = new QSerialPort;\n        //设置串口名\n        serial->setPortName(this->ui->cb_port->currentText());\n        ```\n2. 打开串口\n    ```cpp\n    serial->open(QIODevice::ReadWrite);\n    ```\n3. 设置波特率\n    ```cpp\n    serial->setBaudRate(QSerialPort::Baud115200);//设置波特率为115200\n    ```\n4. 设置数据位\n    ```cpp\n    serial->setDataBits(QSerialPort::Data8);//设置数据位8\n    ```\n5. 设置校验位\n    ```cpp\n    serial->setParity(QSerialPort::NoParity); //无校验位\n    ```\n6. 设置停止位\n    ```cpp\n    serial->setStopBits(QSerialPort::OneStop);//停止位设置为1\n    ```\n7. 设置流控制\n    ```cpp\n    serial->setFlowControl(QSerialPort::NoFlowControl);//设置为无流控制\n    ```\n通过上述操作，串口的基本设置就设置好了，接下来需要实现数据的接收和发送：\n1. 在打开串口按钮中执行的操作中添加槽函数，当下位机中有数据发送过来时就会相应这个槽函数\n    ```cpp\n    connect(serial, SIGNAL(readyRead()), this, SLOT(readData()));\n    ```\n2. 从上位机发送数据到下位机，发送内容位ASII码值或者为Hex格式；根据自身需求，我将数据进行了转换和格式化，此处为Hex格式。\n    ```cpp\n    serial->write(QString2Hex(formatInput(hexStr)));\n    ```\n\n## 进制转换及格式化\n由于下位机需求，需要两帧将数据发送过去，经过多番考虑，最终决定将十进制转换为16进制，然后以Hex进行发送\n1. 十进制转换为16进制字符串\n    ```cpp\n    //将十进制int转换为十六进制字符串\n    QString control::decInt2HexStr(int dec)\n    {\n        //保证数据在两帧范围内\n        if(dec > 65535)\n        {\n            QMessageBox::information(NULL, \"警告\", \"输入超出规定范围（input < 65535）\");\n            return \"0\";\n        }\n        QString hexStr;\n        int temp = dec / 16;\n        int left = dec % 16;\n        if(temp > 0)\n            hexStr += decInt2HexStr(temp);\n        if(left < 10)\n            hexStr += (left + '0');\n        else\n            hexStr += ('A' + left - 10);\n        return hexStr;\n    }\n    ```\n2. 将字符串转换为Hex格式\n    ```cpp\n    //字符串转Hex(QByteArray)类型\n    QByteArray control::QString2Hex(QString hexStr)\n    {\n        QByteArray senddata;\n        int hexdata, lowhexdata;\n        int hexdatalen = 0;\n        int len = hexStr.length();\n        senddata.resize(len/2);\n        char lstr, hstr;\n        for(int i = 0; i < len; )\n        {\n            //将第一个不为' '的字符赋给hstr;\n            hstr = hexStr[i].toLatin1();\n            if(hstr == ' ')\n            {\n                i++;\n                continue;\n            }\n            i++;\n            //当i >= len时，跳出循环\n            if(i >= len)\n                break;\n            //当i < len时，将下一个字符赋值给lstr;\n            lstr = hexStr[i].toLatin1();\n            //将hstr和lstr转换为0-15的对应数值\n            hexdata = ConvertHexChar(hstr);\n            lowhexdata = ConvertHexChar(lstr);\n            //\n            if((hexdata == 16) || (lowhexdata == 16))\n                break;\n            else\n                hexdata = hexdata * 16 + lowhexdata;\n            i++;\n            senddata[hexdatalen] = (char)hexdata;\n            hexdatalen++;\n        }\n        senddata.resize(hexdatalen);\n        return senddata;\n    }\n    \n    //将单个字符串转换为hex\n    //0-F -> 0-15\n    char control::ConvertHexChar(char c)\n    {\n        if((c >= '0') && (c <= '9'))\n            return c - 0x30;\n        else if((c >= 'A') && (c <= 'F'))\n            return c - 'A' + 10;//'A' = 65;\n        else if((c >= 'a') && (c <= 'f'))\n            return c - 'a' + 10;\n        else\n            return -1;\n    }\n    ```\n3. 输出形式格式化\n    ```cpp\n    //将输入格式化，补满四位：0XFFFF\n    QString control::formatInput(QString hexStr)\n    {\n        int strlen = hexStr.length();\n        switch(strlen)\n        {\n            case 0:\n                hexStr = \"0000\";\n                break;\n            case 1:\n                hexStr = \"000\" + hexStr;\n                break;\n            case 2:\n                hexStr = \"00\" + hexStr;\n                break;\n            case 3:\n                hexStr = \"0\" + hexStr;\n                break;\n            case 4:\n                hexStr = hexStr;\n                break;\n            default:\n                break;\n        }\n        return hexStr;\n    }\n    ```\n\n## UI展示\n![界面展示](https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg)\n\n## 源码下载：\n[Github](https://github.com/2572880761/FPGA_Controller)","source":"_posts/Share/qt_serial_communication.md","raw":"---\ntitle: QT5串口通信（Hex格式传输）\ndate: 2019-02-28 09:36:33\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg\nsummary: 通过QT5开发了一款用于FPGA参数调节的上位机程序！\ncategories: 分享\ntags:\n  - QT5\n  - 串口通信\n---\n## 参考博客\n1. 博客园-菜头大大：[QT串口通信](https://www.cnblogs.com/wurenzhong/p/8186437.html)\n2. CSDN-宗师之路：[QT实现串口通信(附源码下载)](https://blog.csdn.net/qq_27312943/article/details/52900527)\n3. CSDN-xz-c：[C++将10进制字符串转为16进制字符串](https://blog.csdn.net/u014602230/article/details/52752683)\n\n## 本文改进\n1. 在前辈们的代码基础上进行改进，使操作更符合逻辑\n2. 优化代码结构，提高了代码的可移植性\n\n## QT实现串口通信\n1. 在工程文件（.pro）中添加串口通信相关运行库：`QT       += serialport`\n2. 在头文件中添加\n    ```cpp\n    #include <QtSerialPort/QSerialPort>\n    #include <QtSerialPort/QSerialPortInfo>\n    ```\n3. 在头文件中定义全局的串口对象：`QSerialPort *serial;`\n\n## 串口通信步骤\n1. 设置串口名称\n    + 寻找可用串口\n        ```cpp\n        void control::scanPort()\n        {\n            this->ui->cb_port->clear();\n            int isHavePort = 0;\n            foreach(const QSerialPortInfo &info, QSerialPortInfo::availablePorts())\n            {\n                QSerialPort serial;\n                serial.setPort(info);\n                //判断端口能否打开\n                if(serial.open(QIODevice::ReadWrite))\n                {\n                    this->ui->cb_port->addItem(serial.portName());\n                    isHavePort ++;\n                }\n                if(isHavePort == 0){\n                    QMessageBox::information(NULL, \"警告\", \"没有可用串口\");\n                }\n            }\n        }\n        ```\n    + 设置串口名\n        ```cpp\n        serial = new QSerialPort;\n        //设置串口名\n        serial->setPortName(this->ui->cb_port->currentText());\n        ```\n2. 打开串口\n    ```cpp\n    serial->open(QIODevice::ReadWrite);\n    ```\n3. 设置波特率\n    ```cpp\n    serial->setBaudRate(QSerialPort::Baud115200);//设置波特率为115200\n    ```\n4. 设置数据位\n    ```cpp\n    serial->setDataBits(QSerialPort::Data8);//设置数据位8\n    ```\n5. 设置校验位\n    ```cpp\n    serial->setParity(QSerialPort::NoParity); //无校验位\n    ```\n6. 设置停止位\n    ```cpp\n    serial->setStopBits(QSerialPort::OneStop);//停止位设置为1\n    ```\n7. 设置流控制\n    ```cpp\n    serial->setFlowControl(QSerialPort::NoFlowControl);//设置为无流控制\n    ```\n通过上述操作，串口的基本设置就设置好了，接下来需要实现数据的接收和发送：\n1. 在打开串口按钮中执行的操作中添加槽函数，当下位机中有数据发送过来时就会相应这个槽函数\n    ```cpp\n    connect(serial, SIGNAL(readyRead()), this, SLOT(readData()));\n    ```\n2. 从上位机发送数据到下位机，发送内容位ASII码值或者为Hex格式；根据自身需求，我将数据进行了转换和格式化，此处为Hex格式。\n    ```cpp\n    serial->write(QString2Hex(formatInput(hexStr)));\n    ```\n\n## 进制转换及格式化\n由于下位机需求，需要两帧将数据发送过去，经过多番考虑，最终决定将十进制转换为16进制，然后以Hex进行发送\n1. 十进制转换为16进制字符串\n    ```cpp\n    //将十进制int转换为十六进制字符串\n    QString control::decInt2HexStr(int dec)\n    {\n        //保证数据在两帧范围内\n        if(dec > 65535)\n        {\n            QMessageBox::information(NULL, \"警告\", \"输入超出规定范围（input < 65535）\");\n            return \"0\";\n        }\n        QString hexStr;\n        int temp = dec / 16;\n        int left = dec % 16;\n        if(temp > 0)\n            hexStr += decInt2HexStr(temp);\n        if(left < 10)\n            hexStr += (left + '0');\n        else\n            hexStr += ('A' + left - 10);\n        return hexStr;\n    }\n    ```\n2. 将字符串转换为Hex格式\n    ```cpp\n    //字符串转Hex(QByteArray)类型\n    QByteArray control::QString2Hex(QString hexStr)\n    {\n        QByteArray senddata;\n        int hexdata, lowhexdata;\n        int hexdatalen = 0;\n        int len = hexStr.length();\n        senddata.resize(len/2);\n        char lstr, hstr;\n        for(int i = 0; i < len; )\n        {\n            //将第一个不为' '的字符赋给hstr;\n            hstr = hexStr[i].toLatin1();\n            if(hstr == ' ')\n            {\n                i++;\n                continue;\n            }\n            i++;\n            //当i >= len时，跳出循环\n            if(i >= len)\n                break;\n            //当i < len时，将下一个字符赋值给lstr;\n            lstr = hexStr[i].toLatin1();\n            //将hstr和lstr转换为0-15的对应数值\n            hexdata = ConvertHexChar(hstr);\n            lowhexdata = ConvertHexChar(lstr);\n            //\n            if((hexdata == 16) || (lowhexdata == 16))\n                break;\n            else\n                hexdata = hexdata * 16 + lowhexdata;\n            i++;\n            senddata[hexdatalen] = (char)hexdata;\n            hexdatalen++;\n        }\n        senddata.resize(hexdatalen);\n        return senddata;\n    }\n    \n    //将单个字符串转换为hex\n    //0-F -> 0-15\n    char control::ConvertHexChar(char c)\n    {\n        if((c >= '0') && (c <= '9'))\n            return c - 0x30;\n        else if((c >= 'A') && (c <= 'F'))\n            return c - 'A' + 10;//'A' = 65;\n        else if((c >= 'a') && (c <= 'f'))\n            return c - 'a' + 10;\n        else\n            return -1;\n    }\n    ```\n3. 输出形式格式化\n    ```cpp\n    //将输入格式化，补满四位：0XFFFF\n    QString control::formatInput(QString hexStr)\n    {\n        int strlen = hexStr.length();\n        switch(strlen)\n        {\n            case 0:\n                hexStr = \"0000\";\n                break;\n            case 1:\n                hexStr = \"000\" + hexStr;\n                break;\n            case 2:\n                hexStr = \"00\" + hexStr;\n                break;\n            case 3:\n                hexStr = \"0\" + hexStr;\n                break;\n            case 4:\n                hexStr = hexStr;\n                break;\n            default:\n                break;\n        }\n        return hexStr;\n    }\n    ```\n\n## UI展示\n![界面展示](https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg)\n\n## 源码下载：\n[Github](https://github.com/2572880761/FPGA_Controller)","slug":"Share/qt_serial_communication","published":1,"updated":"2019-07-14T03:20:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euric003emetfuufoh9j4","content":"<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ol>\n<li>博客园-菜头大大：<a href=\"https://www.cnblogs.com/wurenzhong/p/8186437.html\" target=\"_blank\" rel=\"noopener\">QT串口通信</a></li>\n<li>CSDN-宗师之路：<a href=\"https://blog.csdn.net/qq_27312943/article/details/52900527\" target=\"_blank\" rel=\"noopener\">QT实现串口通信(附源码下载)</a></li>\n<li>CSDN-xz-c：<a href=\"https://blog.csdn.net/u014602230/article/details/52752683\" target=\"_blank\" rel=\"noopener\">C++将10进制字符串转为16进制字符串</a></li>\n</ol>\n<h2 id=\"本文改进\"><a href=\"#本文改进\" class=\"headerlink\" title=\"本文改进\"></a>本文改进</h2><ol>\n<li>在前辈们的代码基础上进行改进，使操作更符合逻辑</li>\n<li>优化代码结构，提高了代码的可移植性</li>\n</ol>\n<h2 id=\"QT实现串口通信\"><a href=\"#QT实现串口通信\" class=\"headerlink\" title=\"QT实现串口通信\"></a>QT实现串口通信</h2><ol>\n<li>在工程文件（.pro）中添加串口通信相关运行库：<code>QT       += serialport</code></li>\n<li>在头文件中添加<pre class=\" language-cpp\"><code class=\"language-cpp\"> <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtSerialPort/QSerialPort></span></span>\n <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtSerialPort/QSerialPortInfo></span></span></code></pre>\n</li>\n<li>在头文件中定义全局的串口对象：<code>QSerialPort *serial;</code></li>\n</ol>\n<h2 id=\"串口通信步骤\"><a href=\"#串口通信步骤\" class=\"headerlink\" title=\"串口通信步骤\"></a>串口通信步骤</h2><ol>\n<li>设置串口名称<ul>\n<li>寻找可用串口<pre class=\" language-cpp\"><code class=\"language-cpp\">  <span class=\"token keyword\">void</span> control<span class=\"token operator\">::</span><span class=\"token function\">scanPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>cb_port<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> isHavePort <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QSerialPortInfo <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> QSerialPortInfo<span class=\"token operator\">::</span><span class=\"token function\">availablePorts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          QSerialPort serial<span class=\"token punctuation\">;</span>\n          serial<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//判断端口能否打开</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token operator\">::</span>ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>cb_port<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">.</span><span class=\"token function\">portName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              isHavePort <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isHavePort <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              QMessageBox<span class=\"token operator\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"警告\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"没有可用串口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>设置串口名<pre class=\" language-cpp\"><code class=\"language-cpp\">  serial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QSerialPort<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//设置串口名</span>\n  serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setPortName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>cb_port<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n</li>\n<li>打开串口<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token operator\">::</span>ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>设置波特率<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setBaudRate</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token operator\">::</span>Baud115200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//设置波特率为115200</span></code></pre>\n</li>\n<li>设置数据位<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token operator\">::</span>Data8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//设置数据位8</span></code></pre>\n</li>\n<li>设置校验位<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token operator\">::</span>NoParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//无校验位</span></code></pre>\n</li>\n<li>设置停止位<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token operator\">::</span>OneStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//停止位设置为1</span></code></pre>\n</li>\n<li>设置流控制<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setFlowControl</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token operator\">::</span>NoFlowControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//设置为无流控制</span></code></pre>\n通过上述操作，串口的基本设置就设置好了，接下来需要实现数据的接收和发送：</li>\n<li>在打开串口按钮中执行的操作中添加槽函数，当下位机中有数据发送过来时就会相应这个槽函数<pre class=\" language-cpp\"><code class=\"language-cpp\"> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">readyRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>从上位机发送数据到下位机，发送内容位ASII码值或者为Hex格式；根据自身需求，我将数据进行了转换和格式化，此处为Hex格式。<pre class=\" language-cpp\"><code class=\"language-cpp\"> serial<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">QString2Hex</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatInput</span><span class=\"token punctuation\">(</span>hexStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<h2 id=\"进制转换及格式化\"><a href=\"#进制转换及格式化\" class=\"headerlink\" title=\"进制转换及格式化\"></a>进制转换及格式化</h2><p>由于下位机需求，需要两帧将数据发送过去，经过多番考虑，最终决定将十进制转换为16进制，然后以Hex进行发送</p>\n<ol>\n<li><p>十进制转换为16进制字符串</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"> <span class=\"token comment\" spellcheck=\"true\">//将十进制int转换为十六进制字符串</span>\n QString control<span class=\"token operator\">::</span><span class=\"token function\">decInt2HexStr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dec<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">//保证数据在两帧范围内</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dec <span class=\"token operator\">></span> <span class=\"token number\">65535</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         QMessageBox<span class=\"token operator\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"警告\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入超出规定范围（input &lt; 65535）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     QString hexStr<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> dec <span class=\"token operator\">/</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> dec <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         hexStr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">decInt2HexStr</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n         hexStr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n         hexStr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> left <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> hexStr<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>将字符串转换为Hex格式</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"> <span class=\"token comment\" spellcheck=\"true\">//字符串转Hex(QByteArray)类型</span>\n QByteArray control<span class=\"token operator\">::</span><span class=\"token function\">QString2Hex</span><span class=\"token punctuation\">(</span>QString hexStr<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     QByteArray senddata<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> hexdata<span class=\"token punctuation\">,</span> lowhexdata<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> hexdatalen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> hexStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     senddata<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> lstr<span class=\"token punctuation\">,</span> hstr<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\" spellcheck=\"true\">//将第一个不为' '的字符赋给hstr;</span>\n         hstr <span class=\"token operator\">=</span> hexStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLatin1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hstr <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">//当i >= len时，跳出循环</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> len<span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">//当i &lt; len时，将下一个字符赋值给lstr;</span>\n         lstr <span class=\"token operator\">=</span> hexStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLatin1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">//将hstr和lstr转换为0-15的对应数值</span>\n         hexdata <span class=\"token operator\">=</span> <span class=\"token function\">ConvertHexChar</span><span class=\"token punctuation\">(</span>hstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         lowhexdata <span class=\"token operator\">=</span> <span class=\"token function\">ConvertHexChar</span><span class=\"token punctuation\">(</span>lstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">//</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hexdata <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>lowhexdata <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">else</span>\n             hexdata <span class=\"token operator\">=</span> hexdata <span class=\"token operator\">*</span> <span class=\"token number\">16</span> <span class=\"token operator\">+</span> lowhexdata<span class=\"token punctuation\">;</span>\n         i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         senddata<span class=\"token punctuation\">[</span>hexdatalen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>hexdata<span class=\"token punctuation\">;</span>\n         hexdatalen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     senddata<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>hexdatalen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> senddata<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\" spellcheck=\"true\">//将单个字符串转换为hex</span>\n <span class=\"token comment\" spellcheck=\"true\">//0-F -> 0-15</span>\n <span class=\"token keyword\">char</span> control<span class=\"token operator\">::</span><span class=\"token function\">ConvertHexChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//'A' = 65;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n         <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>输出形式格式化</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"> <span class=\"token comment\" spellcheck=\"true\">//将输入格式化，补满四位：0XFFFF</span>\n QString control<span class=\"token operator\">::</span><span class=\"token function\">formatInput</span><span class=\"token punctuation\">(</span>QString hexStr<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> strlen <span class=\"token operator\">=</span> hexStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>strlen<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n             hexStr <span class=\"token operator\">=</span> <span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n             hexStr <span class=\"token operator\">=</span> <span class=\"token string\">\"000\"</span> <span class=\"token operator\">+</span> hexStr<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n             hexStr <span class=\"token operator\">=</span> <span class=\"token string\">\"00\"</span> <span class=\"token operator\">+</span> hexStr<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n             hexStr <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> hexStr<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n             hexStr <span class=\"token operator\">=</span> hexStr<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n             <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> hexStr<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ol>\n<h2 id=\"UI展示\"><a href=\"#UI展示\" class=\"headerlink\" title=\"UI展示\"></a>UI展示</h2><p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg\" alt=\"界面展示\"></p>\n<h2 id=\"源码下载：\"><a href=\"#源码下载：\" class=\"headerlink\" title=\"源码下载：\"></a>源码下载：</h2><p><a href=\"https://github.com/2572880761/FPGA_Controller\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ol>\n<li>博客园-菜头大大：<a href=\"https://www.cnblogs.com/wurenzhong/p/8186437.html\" target=\"_blank\" rel=\"noopener\">QT串口通信</a></li>\n<li>CSDN-宗师之路：<a href=\"https://blog.csdn.net/qq_27312943/article/details/52900527\" target=\"_blank\" rel=\"noopener\">QT实现串口通信(附源码下载)</a></li>\n<li>CSDN-xz-c：<a href=\"https://blog.csdn.net/u014602230/article/details/52752683\" target=\"_blank\" rel=\"noopener\">C++将10进制字符串转为16进制字符串</a></li>\n</ol>\n<h2 id=\"本文改进\"><a href=\"#本文改进\" class=\"headerlink\" title=\"本文改进\"></a>本文改进</h2><ol>\n<li>在前辈们的代码基础上进行改进，使操作更符合逻辑</li>\n<li>优化代码结构，提高了代码的可移植性</li>\n</ol>\n<h2 id=\"QT实现串口通信\"><a href=\"#QT实现串口通信\" class=\"headerlink\" title=\"QT实现串口通信\"></a>QT实现串口通信</h2><ol>\n<li>在工程文件（.pro）中添加串口通信相关运行库：<code>QT       += serialport</code></li>\n<li>在头文件中添加<pre><code class=\"cpp\"> #include &lt;QtSerialPort/QSerialPort&gt;\n #include &lt;QtSerialPort/QSerialPortInfo&gt;</code></pre>\n</li>\n<li>在头文件中定义全局的串口对象：<code>QSerialPort *serial;</code></li>\n</ol>\n<h2 id=\"串口通信步骤\"><a href=\"#串口通信步骤\" class=\"headerlink\" title=\"串口通信步骤\"></a>串口通信步骤</h2><ol>\n<li>设置串口名称<ul>\n<li>寻找可用串口<pre><code class=\"cpp\">  void control::scanPort()\n  {\n      this-&gt;ui-&gt;cb_port-&gt;clear();\n      int isHavePort = 0;\n      foreach(const QSerialPortInfo &amp;info, QSerialPortInfo::availablePorts())\n      {\n          QSerialPort serial;\n          serial.setPort(info);\n          //判断端口能否打开\n          if(serial.open(QIODevice::ReadWrite))\n          {\n              this-&gt;ui-&gt;cb_port-&gt;addItem(serial.portName());\n              isHavePort ++;\n          }\n          if(isHavePort == 0){\n              QMessageBox::information(NULL, &quot;警告&quot;, &quot;没有可用串口&quot;);\n          }\n      }\n  }</code></pre>\n</li>\n<li>设置串口名<pre><code class=\"cpp\">  serial = new QSerialPort;\n  //设置串口名\n  serial-&gt;setPortName(this-&gt;ui-&gt;cb_port-&gt;currentText());</code></pre>\n</li>\n</ul>\n</li>\n<li>打开串口<pre><code class=\"cpp\"> serial-&gt;open(QIODevice::ReadWrite);</code></pre>\n</li>\n<li>设置波特率<pre><code class=\"cpp\"> serial-&gt;setBaudRate(QSerialPort::Baud115200);//设置波特率为115200</code></pre>\n</li>\n<li>设置数据位<pre><code class=\"cpp\"> serial-&gt;setDataBits(QSerialPort::Data8);//设置数据位8</code></pre>\n</li>\n<li>设置校验位<pre><code class=\"cpp\"> serial-&gt;setParity(QSerialPort::NoParity); //无校验位</code></pre>\n</li>\n<li>设置停止位<pre><code class=\"cpp\"> serial-&gt;setStopBits(QSerialPort::OneStop);//停止位设置为1</code></pre>\n</li>\n<li>设置流控制<pre><code class=\"cpp\"> serial-&gt;setFlowControl(QSerialPort::NoFlowControl);//设置为无流控制</code></pre>\n通过上述操作，串口的基本设置就设置好了，接下来需要实现数据的接收和发送：</li>\n<li>在打开串口按钮中执行的操作中添加槽函数，当下位机中有数据发送过来时就会相应这个槽函数<pre><code class=\"cpp\"> connect(serial, SIGNAL(readyRead()), this, SLOT(readData()));</code></pre>\n</li>\n<li>从上位机发送数据到下位机，发送内容位ASII码值或者为Hex格式；根据自身需求，我将数据进行了转换和格式化，此处为Hex格式。<pre><code class=\"cpp\"> serial-&gt;write(QString2Hex(formatInput(hexStr)));</code></pre>\n</li>\n</ol>\n<h2 id=\"进制转换及格式化\"><a href=\"#进制转换及格式化\" class=\"headerlink\" title=\"进制转换及格式化\"></a>进制转换及格式化</h2><p>由于下位机需求，需要两帧将数据发送过去，经过多番考虑，最终决定将十进制转换为16进制，然后以Hex进行发送</p>\n<ol>\n<li><p>十进制转换为16进制字符串</p>\n<pre><code class=\"cpp\"> //将十进制int转换为十六进制字符串\n QString control::decInt2HexStr(int dec)\n {\n     //保证数据在两帧范围内\n     if(dec &gt; 65535)\n     {\n         QMessageBox::information(NULL, &quot;警告&quot;, &quot;输入超出规定范围（input &lt; 65535）&quot;);\n         return &quot;0&quot;;\n     }\n     QString hexStr;\n     int temp = dec / 16;\n     int left = dec % 16;\n     if(temp &gt; 0)\n         hexStr += decInt2HexStr(temp);\n     if(left &lt; 10)\n         hexStr += (left + &#39;0&#39;);\n     else\n         hexStr += (&#39;A&#39; + left - 10);\n     return hexStr;\n }</code></pre>\n</li>\n<li><p>将字符串转换为Hex格式</p>\n<pre><code class=\"cpp\"> //字符串转Hex(QByteArray)类型\n QByteArray control::QString2Hex(QString hexStr)\n {\n     QByteArray senddata;\n     int hexdata, lowhexdata;\n     int hexdatalen = 0;\n     int len = hexStr.length();\n     senddata.resize(len/2);\n     char lstr, hstr;\n     for(int i = 0; i &lt; len; )\n     {\n         //将第一个不为&#39; &#39;的字符赋给hstr;\n         hstr = hexStr[i].toLatin1();\n         if(hstr == &#39; &#39;)\n         {\n             i++;\n             continue;\n         }\n         i++;\n         //当i &gt;= len时，跳出循环\n         if(i &gt;= len)\n             break;\n         //当i &lt; len时，将下一个字符赋值给lstr;\n         lstr = hexStr[i].toLatin1();\n         //将hstr和lstr转换为0-15的对应数值\n         hexdata = ConvertHexChar(hstr);\n         lowhexdata = ConvertHexChar(lstr);\n         //\n         if((hexdata == 16) || (lowhexdata == 16))\n             break;\n         else\n             hexdata = hexdata * 16 + lowhexdata;\n         i++;\n         senddata[hexdatalen] = (char)hexdata;\n         hexdatalen++;\n     }\n     senddata.resize(hexdatalen);\n     return senddata;\n }\n\n //将单个字符串转换为hex\n //0-F -&gt; 0-15\n char control::ConvertHexChar(char c)\n {\n     if((c &gt;= &#39;0&#39;) &amp;&amp; (c &lt;= &#39;9&#39;))\n         return c - 0x30;\n     else if((c &gt;= &#39;A&#39;) &amp;&amp; (c &lt;= &#39;F&#39;))\n         return c - &#39;A&#39; + 10;//&#39;A&#39; = 65;\n     else if((c &gt;= &#39;a&#39;) &amp;&amp; (c &lt;= &#39;f&#39;))\n         return c - &#39;a&#39; + 10;\n     else\n         return -1;\n }</code></pre>\n</li>\n<li><p>输出形式格式化</p>\n<pre><code class=\"cpp\"> //将输入格式化，补满四位：0XFFFF\n QString control::formatInput(QString hexStr)\n {\n     int strlen = hexStr.length();\n     switch(strlen)\n     {\n         case 0:\n             hexStr = &quot;0000&quot;;\n             break;\n         case 1:\n             hexStr = &quot;000&quot; + hexStr;\n             break;\n         case 2:\n             hexStr = &quot;00&quot; + hexStr;\n             break;\n         case 3:\n             hexStr = &quot;0&quot; + hexStr;\n             break;\n         case 4:\n             hexStr = hexStr;\n             break;\n         default:\n             break;\n     }\n     return hexStr;\n }</code></pre>\n</li>\n</ol>\n<h2 id=\"UI展示\"><a href=\"#UI展示\" class=\"headerlink\" title=\"UI展示\"></a>UI展示</h2><p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190228-1.jpg\" alt=\"界面展示\"></p>\n<h2 id=\"源码下载：\"><a href=\"#源码下载：\" class=\"headerlink\" title=\"源码下载：\"></a>源码下载：</h2><p><a href=\"https://github.com/2572880761/FPGA_Controller\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n"},{"title":"华为云代码托管服务及团队协作教程","date":"2019-03-05T15:51:56.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-1.jpg","summary":"在华为云实现代码托管服务以及完成团队协作开发任务","_content":"## 连接华为云仓库\n\n### 注册账号\n在华为云[官网](https://www.huaweicloud.com/?locale=zh-cn)注册账号\n\n### 新建仓库\n1. 进入项目管理\n![进入项目管理](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-2.jpg)\n2. 通过左侧菜单栏进入代码托管\n![代码托管](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-3.jpg)\n3. 根据自己的需求新建仓库\n![新建仓库](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-4.jpg)\n\n### 连接华为仓库\n1. 设置SSH密钥\n![设置我的SSH密钥](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-5.jpg)\n![添加SSH密钥](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-6.jpg)\n2. 从本地获取SSH公钥（默认已安装git）\n如果之前设置过github或gitee，那么系统是存在密钥的，密钥路径为`~/.ssh/id_rsa.pub`。\n如果没有系统不存在密钥，那么在根目录执行以下命令创建密钥:\n```bash\nssh-keygen -t rsa -C \"您的email\"\n```\n*在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。*\n可以采用两种方法将密钥复制到密钥栏：\n```bash\n#1查看密钥并手动复制\ncat ~/.ssh/id_rsa.pub\n#2使用命令复制密钥到剪切板\n#Windows\nclip < ~/.ssh/id_rsa.pub\n#Mac\npbcopy < ~/.ssh/id_rsa.pub\n#Linux\nxclip -sel clip < ~/.ssh/id_rsa.pub\n```\n接下来，我们尝试将新建的仓库克隆到本地\n\n### 克隆仓库及常用git指令\n1. 获取仓库地址\n![仓库地址](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-7.jpg)\n2. 在终端执行克隆指令\n```bash\ngit clone 刚复制的地址\n```\n就可以将远程仓库克隆到本地了\n3. 常用git指令：\n```bash\n#添加文件\ngit add filename\n#添加所有文件\ngit add .\n#确认提交\ngit commit -m '修改原因'\n#push到远程仓库,分支可选\ngit push origin master\n```\n想学习更多，请戳廖雪峰大神[Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 团队协作\n这里介绍一下如何团队协作\n\n### 添加成员\n1. 进入项目**设置**界面\n![设置](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-8.jpg)\n2. 在**成员管理**中添加成员，通过链接邀请\n![邀请成员](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-9.jpg)\n3. 在**待审核**界面通过审核，即可在项目成员中看到所邀请的用户，可以根据角色权限说明来自行决定项目角色。\n*PS：个人仓库可以最多五个人协同开发*\n4. 之后进入对应仓库的**成员**页面，添加成员即可\n![添加成员到仓库](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-10.jpg)\n*PS：被邀请成员也要设置好SSH密钥，才能克隆远程仓库*\n基本内容就这些了，以后想到再补充！\n\n\n\n\n\n\n\n\n","source":"_posts/Share/huaweicloud_git.md","raw":"---\ntitle: 华为云代码托管服务及团队协作教程\ndate: 2019-03-05 23:51:56\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190305-1.jpg\nsummary: 在华为云实现代码托管服务以及完成团队协作开发任务\ncategories: 分享\ntags:\n  - git\n  - 华为云\n  - 代码托管\n  - 团队协作\n---\n## 连接华为云仓库\n\n### 注册账号\n在华为云[官网](https://www.huaweicloud.com/?locale=zh-cn)注册账号\n\n### 新建仓库\n1. 进入项目管理\n![进入项目管理](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-2.jpg)\n2. 通过左侧菜单栏进入代码托管\n![代码托管](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-3.jpg)\n3. 根据自己的需求新建仓库\n![新建仓库](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-4.jpg)\n\n### 连接华为仓库\n1. 设置SSH密钥\n![设置我的SSH密钥](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-5.jpg)\n![添加SSH密钥](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-6.jpg)\n2. 从本地获取SSH公钥（默认已安装git）\n如果之前设置过github或gitee，那么系统是存在密钥的，密钥路径为`~/.ssh/id_rsa.pub`。\n如果没有系统不存在密钥，那么在根目录执行以下命令创建密钥:\n```bash\nssh-keygen -t rsa -C \"您的email\"\n```\n*在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。*\n可以采用两种方法将密钥复制到密钥栏：\n```bash\n#1查看密钥并手动复制\ncat ~/.ssh/id_rsa.pub\n#2使用命令复制密钥到剪切板\n#Windows\nclip < ~/.ssh/id_rsa.pub\n#Mac\npbcopy < ~/.ssh/id_rsa.pub\n#Linux\nxclip -sel clip < ~/.ssh/id_rsa.pub\n```\n接下来，我们尝试将新建的仓库克隆到本地\n\n### 克隆仓库及常用git指令\n1. 获取仓库地址\n![仓库地址](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-7.jpg)\n2. 在终端执行克隆指令\n```bash\ngit clone 刚复制的地址\n```\n就可以将远程仓库克隆到本地了\n3. 常用git指令：\n```bash\n#添加文件\ngit add filename\n#添加所有文件\ngit add .\n#确认提交\ngit commit -m '修改原因'\n#push到远程仓库,分支可选\ngit push origin master\n```\n想学习更多，请戳廖雪峰大神[Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 团队协作\n这里介绍一下如何团队协作\n\n### 添加成员\n1. 进入项目**设置**界面\n![设置](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-8.jpg)\n2. 在**成员管理**中添加成员，通过链接邀请\n![邀请成员](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-9.jpg)\n3. 在**待审核**界面通过审核，即可在项目成员中看到所邀请的用户，可以根据角色权限说明来自行决定项目角色。\n*PS：个人仓库可以最多五个人协同开发*\n4. 之后进入对应仓库的**成员**页面，添加成员即可\n![添加成员到仓库](https://gitee.com/wenguang0816/blogPic/raw/master/20190305-10.jpg)\n*PS：被邀请成员也要设置好SSH密钥，才能克隆远程仓库*\n基本内容就这些了，以后想到再补充！\n\n\n\n\n\n\n\n\n","slug":"Share/huaweicloud_git","published":1,"updated":"2019-07-14T03:19:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurid003hmetfmh55og0m","content":"<h2 id=\"连接华为云仓库\"><a href=\"#连接华为云仓库\" class=\"headerlink\" title=\"连接华为云仓库\"></a>连接华为云仓库</h2><h3 id=\"注册账号\"><a href=\"#注册账号\" class=\"headerlink\" title=\"注册账号\"></a>注册账号</h3><p>在华为云<a href=\"https://www.huaweicloud.com/?locale=zh-cn\" target=\"_blank\" rel=\"noopener\">官网</a>注册账号</p>\n<h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><ol>\n<li>进入项目管理<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-2.jpg\" alt=\"进入项目管理\"></li>\n<li>通过左侧菜单栏进入代码托管<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-3.jpg\" alt=\"代码托管\"></li>\n<li>根据自己的需求新建仓库<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-4.jpg\" alt=\"新建仓库\"></li>\n</ol>\n<h3 id=\"连接华为仓库\"><a href=\"#连接华为仓库\" class=\"headerlink\" title=\"连接华为仓库\"></a>连接华为仓库</h3><ol>\n<li>设置SSH密钥<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-5.jpg\" alt=\"设置我的SSH密钥\"><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-6.jpg\" alt=\"添加SSH密钥\"></li>\n<li>从本地获取SSH公钥（默认已安装git）<br>如果之前设置过github或gitee，那么系统是存在密钥的，密钥路径为<code>~/.ssh/id_rsa.pub</code>。<br>如果没有系统不存在密钥，那么在根目录执行以下命令创建密钥:<pre class=\" language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"您的email\"</span></code></pre>\n</li>\n</ol>\n<p><em>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。</em><br>可以采用两种方法将密钥复制到密钥栏：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\">#1查看密钥并手动复制</span>\n<span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub\n<span class=\"token comment\" spellcheck=\"true\">#2使用命令复制密钥到剪切板</span>\n<span class=\"token comment\" spellcheck=\"true\">#Windows</span>\nclip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub\n<span class=\"token comment\" spellcheck=\"true\">#Mac</span>\npbcopy <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub\n<span class=\"token comment\" spellcheck=\"true\">#Linux</span>\nxclip -sel clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</code></pre>\n<p>接下来，我们尝试将新建的仓库克隆到本地</p>\n<h3 id=\"克隆仓库及常用git指令\"><a href=\"#克隆仓库及常用git指令\" class=\"headerlink\" title=\"克隆仓库及常用git指令\"></a>克隆仓库及常用git指令</h3><ol>\n<li>获取仓库地址<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-7.jpg\" alt=\"仓库地址\"></li>\n<li>在终端执行克隆指令<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone 刚复制的地址</code></pre>\n就可以将远程仓库克隆到本地了</li>\n<li>常用git指令：<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\">#添加文件</span>\n<span class=\"token function\">git</span> add filename\n<span class=\"token comment\" spellcheck=\"true\">#添加所有文件</span>\n<span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token comment\" spellcheck=\"true\">#确认提交</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'修改原因'</span>\n<span class=\"token comment\" spellcheck=\"true\">#push到远程仓库,分支可选</span>\n<span class=\"token function\">git</span> push origin master</code></pre>\n想学习更多，请戳廖雪峰大神<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程</a></li>\n</ol>\n<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><p>这里介绍一下如何团队协作</p>\n<h3 id=\"添加成员\"><a href=\"#添加成员\" class=\"headerlink\" title=\"添加成员\"></a>添加成员</h3><ol>\n<li>进入项目<strong>设置</strong>界面<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-8.jpg\" alt=\"设置\"></li>\n<li>在<strong>成员管理</strong>中添加成员，通过链接邀请<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-9.jpg\" alt=\"邀请成员\"></li>\n<li>在<strong>待审核</strong>界面通过审核，即可在项目成员中看到所邀请的用户，可以根据角色权限说明来自行决定项目角色。</li>\n</ol>\n<p><em>PS：个人仓库可以最多五个人协同开发</em></p>\n<ol start=\"4\">\n<li>之后进入对应仓库的<strong>成员</strong>页面，添加成员即可<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-10.jpg\" alt=\"添加成员到仓库\"></li>\n</ol>\n<p><em>PS：被邀请成员也要设置好SSH密钥，才能克隆远程仓库</em><br>基本内容就这些了，以后想到再补充！</p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"连接华为云仓库\"><a href=\"#连接华为云仓库\" class=\"headerlink\" title=\"连接华为云仓库\"></a>连接华为云仓库</h2><h3 id=\"注册账号\"><a href=\"#注册账号\" class=\"headerlink\" title=\"注册账号\"></a>注册账号</h3><p>在华为云<a href=\"https://www.huaweicloud.com/?locale=zh-cn\" target=\"_blank\" rel=\"noopener\">官网</a>注册账号</p>\n<h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><ol>\n<li>进入项目管理<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-2.jpg\" alt=\"进入项目管理\"></li>\n<li>通过左侧菜单栏进入代码托管<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-3.jpg\" alt=\"代码托管\"></li>\n<li>根据自己的需求新建仓库<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-4.jpg\" alt=\"新建仓库\"></li>\n</ol>\n<h3 id=\"连接华为仓库\"><a href=\"#连接华为仓库\" class=\"headerlink\" title=\"连接华为仓库\"></a>连接华为仓库</h3><ol>\n<li>设置SSH密钥<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-5.jpg\" alt=\"设置我的SSH密钥\"><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-6.jpg\" alt=\"添加SSH密钥\"></li>\n<li>从本地获取SSH公钥（默认已安装git）<br>如果之前设置过github或gitee，那么系统是存在密钥的，密钥路径为<code>~/.ssh/id_rsa.pub</code>。<br>如果没有系统不存在密钥，那么在根目录执行以下命令创建密钥:<pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;您的email&quot;</code></pre>\n</li>\n</ol>\n<p><em>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。</em><br>可以采用两种方法将密钥复制到密钥栏：</p>\n<pre><code class=\"bash\">#1查看密钥并手动复制\ncat ~/.ssh/id_rsa.pub\n#2使用命令复制密钥到剪切板\n#Windows\nclip &lt; ~/.ssh/id_rsa.pub\n#Mac\npbcopy &lt; ~/.ssh/id_rsa.pub\n#Linux\nxclip -sel clip &lt; ~/.ssh/id_rsa.pub</code></pre>\n<p>接下来，我们尝试将新建的仓库克隆到本地</p>\n<h3 id=\"克隆仓库及常用git指令\"><a href=\"#克隆仓库及常用git指令\" class=\"headerlink\" title=\"克隆仓库及常用git指令\"></a>克隆仓库及常用git指令</h3><ol>\n<li>获取仓库地址<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-7.jpg\" alt=\"仓库地址\"></li>\n<li>在终端执行克隆指令<pre><code class=\"bash\">git clone 刚复制的地址</code></pre>\n就可以将远程仓库克隆到本地了</li>\n<li>常用git指令：<pre><code class=\"bash\">#添加文件\ngit add filename\n#添加所有文件\ngit add .\n#确认提交\ngit commit -m &#39;修改原因&#39;\n#push到远程仓库,分支可选\ngit push origin master</code></pre>\n想学习更多，请戳廖雪峰大神<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程</a></li>\n</ol>\n<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><p>这里介绍一下如何团队协作</p>\n<h3 id=\"添加成员\"><a href=\"#添加成员\" class=\"headerlink\" title=\"添加成员\"></a>添加成员</h3><ol>\n<li>进入项目<strong>设置</strong>界面<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-8.jpg\" alt=\"设置\"></li>\n<li>在<strong>成员管理</strong>中添加成员，通过链接邀请<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-9.jpg\" alt=\"邀请成员\"></li>\n<li>在<strong>待审核</strong>界面通过审核，即可在项目成员中看到所邀请的用户，可以根据角色权限说明来自行决定项目角色。</li>\n</ol>\n<p><em>PS：个人仓库可以最多五个人协同开发</em></p>\n<ol start=\"4\">\n<li>之后进入对应仓库的<strong>成员</strong>页面，添加成员即可<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20190305-10.jpg\" alt=\"添加成员到仓库\"></li>\n</ol>\n<p><em>PS：被邀请成员也要设置好SSH密钥，才能克隆远程仓库</em><br>基本内容就这些了，以后想到再补充！</p>\n"},{"title":"解决tinyMediaManager无法刮削的问题","date":"2020-04-13T13:25:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20200413-1.jpg","summary":"tinyMediaManager域名被ban","_content":"# 起因\n在看了阿文菌的帖子[手把手教您用tMM刮削影片信息，让KODI、Jellyfin、PLEX、使用本地媒体电影墙！](https://post.smzdm.com/p/a4wkqw37/)后开始使用tinyMediaManager代替emby原始的刮削工具，但是在换了电脑之后发现tinyMediaManager无法使用了。\n> 报错信息：java.net.SocketTimeoutException:connect timed out\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200413-2.jpg)\n\n起初以为是java环境的问题，重装了几次无果，后来才知道是该工具的域名被ban了，需要科学上网。\n\n其实不需要科学上网，也可以解决网络问题，需要我们人为去修改客户端的`hosts`文件，将tMM所使用的域名映射到没有被ban的IP地址上。\n\n# 解决方法\n\n## windows上修改`hosts`文件\n1. 打开`C:\\WINDOWS\\system32\\drivers\\etc`路径\n2. 找到`hosts`文件并复制到桌面上\n3. 用记事本打开`hosts`文件，在最后一行添加以下内容后保存\n  ```bash\n  13.224.161.90   api.themoviedb.org\n  ```\n4. 将`hosts`复制到`C:\\WINDOWS\\system32\\drivers\\etc`路径并覆盖\n\n## mac上修改`hosts`文件的方法\n1. 打开终端，切换到`root`账户\n  ```bash\n  sudo -i\n  # 会提示输入密码，输入即可\n  ```\n2. 修改`hosts`文件\n  ```bash\n  vim /etc/hosts\n  ```\n3. 按下`i`键进入编辑模式，在最后一行添加以下内容\n  ```bash\n  13.224.161.90   api.themoviedb.org\n  ```\n4. 按下`Esc`退出编辑模式，并输入`:wq`保存退出\n\n现在，就可以正常使用tMM进行刮削了\n\n#### 参考博客：\n[群晖Docker里安装TinyMediaManager并开启中文支持(完美解决)](http://www.gebi1.com/thread-295644-1-1.html)\n\n\n\n","source":"_posts/Share/tinyMediaManager_timeout.md","raw":"---\ntitle: 解决tinyMediaManager无法刮削的问题\ndate: 2020-04-13 21:25:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20200413-1.jpg\nsummary: tinyMediaManager域名被ban\ncategories: 分享\ntags:\n  - 群晖\n---\n# 起因\n在看了阿文菌的帖子[手把手教您用tMM刮削影片信息，让KODI、Jellyfin、PLEX、使用本地媒体电影墙！](https://post.smzdm.com/p/a4wkqw37/)后开始使用tinyMediaManager代替emby原始的刮削工具，但是在换了电脑之后发现tinyMediaManager无法使用了。\n> 报错信息：java.net.SocketTimeoutException:connect timed out\n\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200413-2.jpg)\n\n起初以为是java环境的问题，重装了几次无果，后来才知道是该工具的域名被ban了，需要科学上网。\n\n其实不需要科学上网，也可以解决网络问题，需要我们人为去修改客户端的`hosts`文件，将tMM所使用的域名映射到没有被ban的IP地址上。\n\n# 解决方法\n\n## windows上修改`hosts`文件\n1. 打开`C:\\WINDOWS\\system32\\drivers\\etc`路径\n2. 找到`hosts`文件并复制到桌面上\n3. 用记事本打开`hosts`文件，在最后一行添加以下内容后保存\n  ```bash\n  13.224.161.90   api.themoviedb.org\n  ```\n4. 将`hosts`复制到`C:\\WINDOWS\\system32\\drivers\\etc`路径并覆盖\n\n## mac上修改`hosts`文件的方法\n1. 打开终端，切换到`root`账户\n  ```bash\n  sudo -i\n  # 会提示输入密码，输入即可\n  ```\n2. 修改`hosts`文件\n  ```bash\n  vim /etc/hosts\n  ```\n3. 按下`i`键进入编辑模式，在最后一行添加以下内容\n  ```bash\n  13.224.161.90   api.themoviedb.org\n  ```\n4. 按下`Esc`退出编辑模式，并输入`:wq`保存退出\n\n现在，就可以正常使用tMM进行刮削了\n\n#### 参考博客：\n[群晖Docker里安装TinyMediaManager并开启中文支持(完美解决)](http://www.gebi1.com/thread-295644-1-1.html)\n\n\n\n","slug":"Share/tinyMediaManager_timeout","published":1,"updated":"2020-05-08T09:21:03.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurie003kmetfteo6dk0f","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>在看了阿文菌的帖子<a href=\"https://post.smzdm.com/p/a4wkqw37/\" target=\"_blank\" rel=\"noopener\">手把手教您用tMM刮削影片信息，让KODI、Jellyfin、PLEX、使用本地媒体电影墙！</a>后开始使用tinyMediaManager代替emby原始的刮削工具，但是在换了电脑之后发现tinyMediaManager无法使用了。</p>\n<blockquote>\n<p>报错信息：java.net.SocketTimeoutException:connect timed out</p>\n</blockquote>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200413-2.jpg\" alt></p>\n<p>起初以为是java环境的问题，重装了几次无果，后来才知道是该工具的域名被ban了，需要科学上网。</p>\n<p>其实不需要科学上网，也可以解决网络问题，需要我们人为去修改客户端的<code>hosts</code>文件，将tMM所使用的域名映射到没有被ban的IP地址上。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"windows上修改hosts文件\"><a href=\"#windows上修改hosts文件\" class=\"headerlink\" title=\"windows上修改hosts文件\"></a>windows上修改<code>hosts</code>文件</h2><ol>\n<li>打开<code>C:\\WINDOWS\\system32\\drivers\\etc</code>路径</li>\n<li>找到<code>hosts</code>文件并复制到桌面上</li>\n<li>用记事本打开<code>hosts</code>文件，在最后一行添加以下内容后保存<pre class=\" language-bash\"><code class=\"language-bash\">13.224.161.90   api.themoviedb.org</code></pre>\n</li>\n<li>将<code>hosts</code>复制到<code>C:\\WINDOWS\\system32\\drivers\\etc</code>路径并覆盖</li>\n</ol>\n<h2 id=\"mac上修改hosts文件的方法\"><a href=\"#mac上修改hosts文件的方法\" class=\"headerlink\" title=\"mac上修改hosts文件的方法\"></a>mac上修改<code>hosts</code>文件的方法</h2><ol>\n<li>打开终端，切换到<code>root</code>账户<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> -i\n<span class=\"token comment\" spellcheck=\"true\"># 会提示输入密码，输入即可</span></code></pre>\n</li>\n<li>修改<code>hosts</code>文件<pre class=\" language-bash\"><code class=\"language-bash\">vim /etc/hosts</code></pre>\n</li>\n<li>按下<code>i</code>键进入编辑模式，在最后一行添加以下内容<pre class=\" language-bash\"><code class=\"language-bash\">13.224.161.90   api.themoviedb.org</code></pre>\n</li>\n<li>按下<code>Esc</code>退出编辑模式，并输入<code>:wq</code>保存退出</li>\n</ol>\n<p>现在，就可以正常使用tMM进行刮削了</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><p><a href=\"http://www.gebi1.com/thread-295644-1-1.html\" target=\"_blank\" rel=\"noopener\">群晖Docker里安装TinyMediaManager并开启中文支持(完美解决)</a></p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>在看了阿文菌的帖子<a href=\"https://post.smzdm.com/p/a4wkqw37/\" target=\"_blank\" rel=\"noopener\">手把手教您用tMM刮削影片信息，让KODI、Jellyfin、PLEX、使用本地媒体电影墙！</a>后开始使用tinyMediaManager代替emby原始的刮削工具，但是在换了电脑之后发现tinyMediaManager无法使用了。</p>\n<blockquote>\n<p>报错信息：java.net.SocketTimeoutException:connect timed out</p>\n</blockquote>\n<p><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200413-2.jpg\" alt></p>\n<p>起初以为是java环境的问题，重装了几次无果，后来才知道是该工具的域名被ban了，需要科学上网。</p>\n<p>其实不需要科学上网，也可以解决网络问题，需要我们人为去修改客户端的<code>hosts</code>文件，将tMM所使用的域名映射到没有被ban的IP地址上。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"windows上修改hosts文件\"><a href=\"#windows上修改hosts文件\" class=\"headerlink\" title=\"windows上修改hosts文件\"></a>windows上修改<code>hosts</code>文件</h2><ol>\n<li>打开<code>C:\\WINDOWS\\system32\\drivers\\etc</code>路径</li>\n<li>找到<code>hosts</code>文件并复制到桌面上</li>\n<li>用记事本打开<code>hosts</code>文件，在最后一行添加以下内容后保存<pre><code class=\"bash\">13.224.161.90   api.themoviedb.org</code></pre>\n</li>\n<li>将<code>hosts</code>复制到<code>C:\\WINDOWS\\system32\\drivers\\etc</code>路径并覆盖</li>\n</ol>\n<h2 id=\"mac上修改hosts文件的方法\"><a href=\"#mac上修改hosts文件的方法\" class=\"headerlink\" title=\"mac上修改hosts文件的方法\"></a>mac上修改<code>hosts</code>文件的方法</h2><ol>\n<li>打开终端，切换到<code>root</code>账户<pre><code class=\"bash\">sudo -i\n# 会提示输入密码，输入即可</code></pre>\n</li>\n<li>修改<code>hosts</code>文件<pre><code class=\"bash\">vim /etc/hosts</code></pre>\n</li>\n<li>按下<code>i</code>键进入编辑模式，在最后一行添加以下内容<pre><code class=\"bash\">13.224.161.90   api.themoviedb.org</code></pre>\n</li>\n<li>按下<code>Esc</code>退出编辑模式，并输入<code>:wq</code>保存退出</li>\n</ol>\n<p>现在，就可以正常使用tMM进行刮削了</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><p><a href=\"http://www.gebi1.com/thread-295644-1-1.html\" target=\"_blank\" rel=\"noopener\">群晖Docker里安装TinyMediaManager并开启中文支持(完美解决)</a></p>\n"},{"title":"二维数组中的查找","date":"2019-04-01T07:20:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190401-2.jpg","summary":"剑指 offer：1、二维数组中的查找","_content":"### [1\\. 二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n### 解题思路：\n+ 思路1: 暴力破解法，遍历整个二维数组，查看目标值是否在数组中; 时间复杂度O(M * N)\n+ 思路2: 由题意可知，数组从左向右，从上到下递增，因此可以从右上角的数字开始查找，该数左边的数都比它小，下边的数都比它大(从左下角查找也可以); 时间复杂度O(M + N)\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        for(int i = 0; i < row; ++i)\n        {\n            for(int j = 0; j < col; ++j)\n            {\n                if(target == array[i][j])\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n\n// 解法2:\n// 从右上角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从右上角开始查找\n        int r = 0;\n        int c = col - 1;\n        while(r < row && c >= 0)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target > array[r][c])\n                ++r;\n            else\n                --c;\n        }\n        return false;\n    }\n};\n\n// 解法3:\n// 从左下角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从左下角开始查找\n        int r = row - 1;\n        int c = 0;\n        while(r >= 0 && c < col)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target > array[r][c])\n                ++c;\n            else\n                --r;\n        }\n        return false;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/01_lookup_in_a_two-dimensional_array.md","raw":"---\ntitle: 二维数组中的查找\ndate: 2019-04-01 15:20:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190401-2.jpg\nsummary: 剑指 offer：1、二维数组中的查找\ncategories: 剑指 offer\ntags:\n  - 查找\n  - 数组\n---\n### [1\\. 二维数组中的查找](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n### 解题思路：\n+ 思路1: 暴力破解法，遍历整个二维数组，查看目标值是否在数组中; 时间复杂度O(M * N)\n+ 思路2: 由题意可知，数组从左向右，从上到下递增，因此可以从右上角的数字开始查找，该数左边的数都比它小，下边的数都比它大(从左下角查找也可以); 时间复杂度O(M + N)\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        for(int i = 0; i < row; ++i)\n        {\n            for(int j = 0; j < col; ++j)\n            {\n                if(target == array[i][j])\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n\n// 解法2:\n// 从右上角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从右上角开始查找\n        int r = 0;\n        int c = col - 1;\n        while(r < row && c >= 0)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target > array[r][c])\n                ++r;\n            else\n                --c;\n        }\n        return false;\n    }\n};\n\n// 解法3:\n// 从左下角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从左下角开始查找\n        int r = row - 1;\n        int c = 0;\n        while(r >= 0 && c < col)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target > array[r][c])\n                ++c;\n            else\n                --r;\n        }\n        return false;\n    }\n};\n```","slug":"Sword_refers_to_Offer/01_lookup_in_a_two-dimensional_array","published":1,"updated":"2019-07-14T07:05:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurig003nmetfdjd8sean","content":"<h3 id=\"1-二维数组中的查找\"><a href=\"#1-二维数组中的查找\" class=\"headerlink\" title=\"1. 二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">1. 二维数组中的查找</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 暴力破解法，遍历整个二维数组，查看目标值是否在数组中; 时间复杂度O(M * N)</li>\n<li>思路2: 由题意可知，数组从左向右，从上到下递增，因此可以从右上角的数字开始查找，该数左边的数都比它小，下边的数都比它大(从左下角查找也可以); 时间复杂度O(M + N)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token comment\" spellcheck=\"true\">// 从右上角开始查找</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 从右上角开始查找</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> row <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">++</span>r<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token operator\">--</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法3:</span>\n<span class=\"token comment\" spellcheck=\"true\">// 从左下角开始查找</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 从左下角开始查找</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">++</span>c<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token operator\">--</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"1-二维数组中的查找\"><a href=\"#1-二维数组中的查找\" class=\"headerlink\" title=\"1. 二维数组中的查找\"></a><a href=\"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">1. 二维数组中的查找</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 暴力破解法，遍历整个二维数组，查看目标值是否在数组中; 时间复杂度O(M * N)</li>\n<li>思路2: 由题意可知，数组从左向右，从上到下递增，因此可以从右上角的数字开始查找，该数左边的数都比它小，下边的数都比它大(从左下角查找也可以); 时间复杂度O(M + N)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 解法1:\nclass Solution {\npublic:\n    bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) {\n        int row = array.size();\n        int col = array[0].size();\n        for(int i = 0; i &lt; row; ++i)\n        {\n            for(int j = 0; j &lt; col; ++j)\n            {\n                if(target == array[i][j])\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n\n// 解法2:\n// 从右上角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从右上角开始查找\n        int r = 0;\n        int c = col - 1;\n        while(r &lt; row &amp;&amp; c &gt;= 0)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target &gt; array[r][c])\n                ++r;\n            else\n                --c;\n        }\n        return false;\n    }\n};\n\n// 解法3:\n// 从左下角开始查找\nclass Solution {\npublic:\n    bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) {\n        int row = array.size();\n        int col = array[0].size();\n        // 从左下角开始查找\n        int r = row - 1;\n        int c = 0;\n        while(r &gt;= 0 &amp;&amp; c &lt; col)\n        {\n            if(array[r][c] == target)\n                return true;\n            else if(target &gt; array[r][c])\n                ++c;\n            else\n                --r;\n        }\n        return false;\n    }\n};</code></pre>\n"},{"title":"从尾到头打印链表","date":"2019-04-02T07:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190402-1.jpg","summary":"剑指 offer：3、从尾到头打印链表","_content":"### [3\\. 从尾到头打印链表](https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n\n### 解题思路：\n+ 思路1: 利用栈先进后出的性质，将链表中的数据`push`到栈中，然后`pop`到`vector`中\n+ 思路2: 利用头插法，遍历链表，将链表元素插入到`vector`头部(缺点：需要多次分配空间)\n\n### 解答：\n\n```cpp\n/*\n *  struct ListNode {\n *        int val;\n *        struct ListNode *next;\n *        ListNode(int x) :\n *              val(x), next(nullptr) {\n *        }\n *  };\n */\n\n// 解法1:\nclass Solution {\npublic:\n    vector<int> printListFromTailToHead(ListNode* head) {\n        vector<int> ans;\n        stack<int> nodes;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            nodes.push(pNode->val);\n            pNode = pNode->next;\n        }\n        while(!nodes.empty())\n        {\n            ans.push_back(nodes.top());\n            nodes.pop();\n        }\n        return ans;\n    }\n};\n//解法2:\nclass Solution {\npublic:\n    vector<int> printListFromTailToHead(ListNode* head) {\n        vector<int> ans;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            ans.insert(ans.begin(), pNode->val);\n            pNode = pNode->next;\n        }\n        return ans;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/03_print_LinkedList_from_tail_to_head.md","raw":"---\ntitle: 从尾到头打印链表\ndate: 2019-04-02 15:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190402-1.jpg\nsummary: 剑指 offer：3、从尾到头打印链表\ncategories: 剑指 offer\ntags:\n  - 链表\n  - 栈\n  - 头插法\n---\n### [3\\. 从尾到头打印链表](https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n\n### 解题思路：\n+ 思路1: 利用栈先进后出的性质，将链表中的数据`push`到栈中，然后`pop`到`vector`中\n+ 思路2: 利用头插法，遍历链表，将链表元素插入到`vector`头部(缺点：需要多次分配空间)\n\n### 解答：\n\n```cpp\n/*\n *  struct ListNode {\n *        int val;\n *        struct ListNode *next;\n *        ListNode(int x) :\n *              val(x), next(nullptr) {\n *        }\n *  };\n */\n\n// 解法1:\nclass Solution {\npublic:\n    vector<int> printListFromTailToHead(ListNode* head) {\n        vector<int> ans;\n        stack<int> nodes;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            nodes.push(pNode->val);\n            pNode = pNode->next;\n        }\n        while(!nodes.empty())\n        {\n            ans.push_back(nodes.top());\n            nodes.pop();\n        }\n        return ans;\n    }\n};\n//解法2:\nclass Solution {\npublic:\n    vector<int> printListFromTailToHead(ListNode* head) {\n        vector<int> ans;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            ans.insert(ans.begin(), pNode->val);\n            pNode = pNode->next;\n        }\n        return ans;\n    }\n};\n```","slug":"Sword_refers_to_Offer/03_print_LinkedList_from_tail_to_head","published":1,"updated":"2020-02-01T13:58:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurii003pmetf0s2vzyn6","content":"<h3 id=\"3-从尾到头打印链表\"><a href=\"#3-从尾到头打印链表\" class=\"headerlink\" title=\"3. 从尾到头打印链表\"></a><a href=\"https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">3. 从尾到头打印链表</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 利用栈先进后出的性质，将链表中的数据<code>push</code>到栈中，然后<code>pop</code>到<code>vector</code>中</li>\n<li>思路2: 利用头插法，遍历链表，将链表元素插入到<code>vector</code>头部(缺点：需要多次分配空间)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\n *  struct ListNode {\n *        int val;\n *        struct ListNode *next;\n *        ListNode(int x) :\n *              val(x), next(nullptr) {\n *        }\n *  };\n */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">printListFromTailToHead</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nodes<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pNode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pNode <span class=\"token operator\">=</span> pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nodes<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">printListFromTailToHead</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pNode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pNode <span class=\"token operator\">=</span> pNode<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"3-从尾到头打印链表\"><a href=\"#3-从尾到头打印链表\" class=\"headerlink\" title=\"3. 从尾到头打印链表\"></a><a href=\"https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">3. 从尾到头打印链表</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 利用栈先进后出的性质，将链表中的数据<code>push</code>到栈中，然后<code>pop</code>到<code>vector</code>中</li>\n<li>思路2: 利用头插法，遍历链表，将链表元素插入到<code>vector</code>头部(缺点：需要多次分配空间)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\n *  struct ListNode {\n *        int val;\n *        struct ListNode *next;\n *        ListNode(int x) :\n *              val(x), next(nullptr) {\n *        }\n *  };\n */\n\n// 解法1:\nclass Solution {\npublic:\n    vector&lt;int&gt; printListFromTailToHead(ListNode* head) {\n        vector&lt;int&gt; ans;\n        stack&lt;int&gt; nodes;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            nodes.push(pNode-&gt;val);\n            pNode = pNode-&gt;next;\n        }\n        while(!nodes.empty())\n        {\n            ans.push_back(nodes.top());\n            nodes.pop();\n        }\n        return ans;\n    }\n};\n//解法2:\nclass Solution {\npublic:\n    vector&lt;int&gt; printListFromTailToHead(ListNode* head) {\n        vector&lt;int&gt; ans;\n        ListNode* pNode = head;\n        while(pNode != nullptr)\n        {\n            ans.insert(ans.begin(), pNode-&gt;val);\n            pNode = pNode-&gt;next;\n        }\n        return ans;\n    }\n};</code></pre>\n"},{"title":"替换空格","date":"2020-02-01T10:20:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20200201-1.jpg","summary":"剑指 offer：2、替换空格","_content":"### [2\\. 替换空格](https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n### 解题思路：\n首先统计字符串中的空格数量`numberOfBlank`，那么将字符串中的空格替换为`%20`后，字符串的长度应该为`indexNew = length + 2 * numberOfBlank - 1`，这样从后向前将原有字符串的字符依次向后移动，遇到空格则替换为`%20`。\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n\tvoid replaceSpace(char *str,int length) {\n        if(str == nullptr || length == 0)\n            return;\n        // 统计空格数量\n        int numberOfBlank = 0;\n        for(int i = 0; i < length; ++i)\n        {\n            if(str[i] == ' ')\n                ++numberOfBlank;\n        }\n        int indexOriginal = length - 1;\n        int indexNew = length + 2 * numberOfBlank - 1;\n        for(int i = indexOriginal; i >= 0; --i)\n        {\n            if(str[i] != ' ')\n            {\n                str[indexNew] = str[i];\n                --indexNew;\n            }\n            else\n            {\n                str[indexNew--] = '0';\n                str[indexNew--] = '2';\n                str[indexNew--] = '%';\n            }\n        }\n\t}\n};\n```","source":"_posts/Sword_refers_to_Offer/02_replaceSpace.md","raw":"---\ntitle: 替换空格\ndate: 2020-02-01 18:20:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20200201-1.jpg\nsummary: 剑指 offer：2、替换空格\ncategories: 剑指 offer\ntags:\n  - 数组\n---\n### [2\\. 替换空格](https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n### 解题思路：\n首先统计字符串中的空格数量`numberOfBlank`，那么将字符串中的空格替换为`%20`后，字符串的长度应该为`indexNew = length + 2 * numberOfBlank - 1`，这样从后向前将原有字符串的字符依次向后移动，遇到空格则替换为`%20`。\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n\tvoid replaceSpace(char *str,int length) {\n        if(str == nullptr || length == 0)\n            return;\n        // 统计空格数量\n        int numberOfBlank = 0;\n        for(int i = 0; i < length; ++i)\n        {\n            if(str[i] == ' ')\n                ++numberOfBlank;\n        }\n        int indexOriginal = length - 1;\n        int indexNew = length + 2 * numberOfBlank - 1;\n        for(int i = indexOriginal; i >= 0; --i)\n        {\n            if(str[i] != ' ')\n            {\n                str[indexNew] = str[i];\n                --indexNew;\n            }\n            else\n            {\n                str[indexNew--] = '0';\n                str[indexNew--] = '2';\n                str[indexNew--] = '%';\n            }\n        }\n\t}\n};\n```","slug":"Sword_refers_to_Offer/02_replaceSpace","published":1,"updated":"2020-02-02T03:43:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euril003tmetfoqhgvz85","content":"<h3 id=\"2-替换空格\"><a href=\"#2-替换空格\" class=\"headerlink\" title=\"2. 替换空格\"></a><a href=\"https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">2. 替换空格</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>首先统计字符串中的空格数量<code>numberOfBlank</code>，那么将字符串中的空格替换为<code>%20</code>后，字符串的长度应该为<code>indexNew = length + 2 * numberOfBlank - 1</code>，这样从后向前将原有字符串的字符依次向后移动，遇到空格则替换为<code>%20</code>。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 统计空格数量</span>\n        <span class=\"token keyword\">int</span> numberOfBlank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">++</span>numberOfBlank<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> indexOriginal <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexNew <span class=\"token operator\">=</span> length <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> numberOfBlank <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> indexOriginal<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                str<span class=\"token punctuation\">[</span>indexNew<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>indexNew<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                str<span class=\"token punctuation\">[</span>indexNew<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n                str<span class=\"token punctuation\">[</span>indexNew<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span>\n                str<span class=\"token punctuation\">[</span>indexNew<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"2-替换空格\"><a href=\"#2-替换空格\" class=\"headerlink\" title=\"2. 替换空格\"></a><a href=\"https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">2. 替换空格</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>首先统计字符串中的空格数量<code>numberOfBlank</code>，那么将字符串中的空格替换为<code>%20</code>后，字符串的长度应该为<code>indexNew = length + 2 * numberOfBlank - 1</code>，这样从后向前将原有字符串的字符依次向后移动，遇到空格则替换为<code>%20</code>。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    void replaceSpace(char *str,int length) {\n        if(str == nullptr || length == 0)\n            return;\n        // 统计空格数量\n        int numberOfBlank = 0;\n        for(int i = 0; i &lt; length; ++i)\n        {\n            if(str[i] == &#39; &#39;)\n                ++numberOfBlank;\n        }\n        int indexOriginal = length - 1;\n        int indexNew = length + 2 * numberOfBlank - 1;\n        for(int i = indexOriginal; i &gt;= 0; --i)\n        {\n            if(str[i] != &#39; &#39;)\n            {\n                str[indexNew] = str[i];\n                --indexNew;\n            }\n            else\n            {\n                str[indexNew--] = &#39;0&#39;;\n                str[indexNew--] = &#39;2&#39;;\n                str[indexNew--] = &#39;%&#39;;\n            }\n        }\n    }\n};</code></pre>\n"},{"title":"用两个栈实现队列","date":"2019-04-18T01:20:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190418-1.jpg","summary":"剑指 offer：5、用两个栈实现队列","_content":"### [5\\. 用两个栈实现队列](https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n### 解题思路：\n入队：将元素进栈A\n出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。\n\n### 解答：\n\n```cpp\nclass Solution\n{\npublic:\n    void push(int node) {\n        stack1.push(node);\n    }\n\n    int pop() {\n        if(stack2.empty() && stack1.empty())\n        {\n            // 队列为空，异常处理\n            throw \"The queue is empty!\";\n        }\n        if(stack2.empty())\n        {\n            while(!stack1.empty())\n            {\n                int tmp = stack1.top();\n                stack1.pop();\n                stack2.push(tmp);\n            }\n        }\n        int top = stack2.top();\n        stack2.pop();\n        return top;\n    }\n\nprivate:\n    stack<int> stack1;\n    stack<int> stack2;\n};\n```","source":"_posts/Sword_refers_to_Offer/05_queue_with_two_stacks.md","raw":"---\ntitle: 用两个栈实现队列\ndate: 2019-04-18 09:20:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190418-1.jpg\nsummary: 剑指 offer：5、用两个栈实现队列\ncategories: 剑指 offer\ntags:\n  - 栈\n  - 队列\n---\n### [5\\. 用两个栈实现队列](https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n### 解题思路：\n入队：将元素进栈A\n出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。\n\n### 解答：\n\n```cpp\nclass Solution\n{\npublic:\n    void push(int node) {\n        stack1.push(node);\n    }\n\n    int pop() {\n        if(stack2.empty() && stack1.empty())\n        {\n            // 队列为空，异常处理\n            throw \"The queue is empty!\";\n        }\n        if(stack2.empty())\n        {\n            while(!stack1.empty())\n            {\n                int tmp = stack1.top();\n                stack1.pop();\n                stack2.push(tmp);\n            }\n        }\n        int top = stack2.top();\n        stack2.pop();\n        return top;\n    }\n\nprivate:\n    stack<int> stack1;\n    stack<int> stack2;\n};\n```","slug":"Sword_refers_to_Offer/05_queue_with_two_stacks","published":1,"updated":"2019-07-14T03:29:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurin003wmetfaf53r9gr","content":"<h3 id=\"5-用两个栈实现队列\"><a href=\"#5-用两个栈实现队列\" class=\"headerlink\" title=\"5. 用两个栈实现队列\"></a><a href=\"https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">5. 用两个栈实现队列</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>入队：将元素进栈A<br>出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 队列为空，异常处理</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token string\">\"The queue is empty!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> top<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stack1<span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stack2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"5-用两个栈实现队列\"><a href=\"#5-用两个栈实现队列\" class=\"headerlink\" title=\"5. 用两个栈实现队列\"></a><a href=\"https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">5. 用两个栈实现队列</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>入队：将元素进栈A<br>出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution\n{\npublic:\n    void push(int node) {\n        stack1.push(node);\n    }\n\n    int pop() {\n        if(stack2.empty() &amp;&amp; stack1.empty())\n        {\n            // 队列为空，异常处理\n            throw &quot;The queue is empty!&quot;;\n        }\n        if(stack2.empty())\n        {\n            while(!stack1.empty())\n            {\n                int tmp = stack1.top();\n                stack1.pop();\n                stack2.push(tmp);\n            }\n        }\n        int top = stack2.top();\n        stack2.pop();\n        return top;\n    }\n\nprivate:\n    stack&lt;int&gt; stack1;\n    stack&lt;int&gt; stack2;\n};</code></pre>\n"},{"title":"斐波那契数列","date":"2019-04-01T08:50:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190401-3.jpg","summary":"剑指 offer：7、斐波那契数列","_content":"### [7\\. 斐波那契数列](https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。\n\n**注：n<=39**\n\n### 解题思路：\n>斐波那契数列：0, 1, 1, 2, 3, 5, 8 ......;\n>\n>这个数列从第3项开始，每一项都等于前两项之和。\n>\n>利用递推公式：f(n) = f(n - 1) + f(n - 2);(当n >= 2时)\n>\n>时间复杂度O(n), 空间复杂度O(1)\n\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int Fibonacci(int n) {\n        int i = 0;\n        int a = 0, b = 1;\n        while(i < n)\n        {\n            b = a + b;\n            a = b - a;\n            ++i;\n        }\n        return a;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/07_fibonacci_series.md","raw":"---\ntitle: 斐波那契数列\ndate: 2019-04-01 16:50:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190401-3.jpg\nsummary: 剑指 offer：7、斐波那契数列\ncategories: 剑指 offer\ntags:\n  - 循环\n  - 斐波那契\n---\n### [7\\. 斐波那契数列](https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。\n\n**注：n<=39**\n\n### 解题思路：\n>斐波那契数列：0, 1, 1, 2, 3, 5, 8 ......;\n>\n>这个数列从第3项开始，每一项都等于前两项之和。\n>\n>利用递推公式：f(n) = f(n - 1) + f(n - 2);(当n >= 2时)\n>\n>时间复杂度O(n), 空间复杂度O(1)\n\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int Fibonacci(int n) {\n        int i = 0;\n        int a = 0, b = 1;\n        while(i < n)\n        {\n            b = a + b;\n            a = b - a;\n            ++i;\n        }\n        return a;\n    }\n};\n```","slug":"Sword_refers_to_Offer/07_fibonacci_series","published":1,"updated":"2019-07-14T03:30:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurip0040metfhcuqkngy","content":"<h3 id=\"7-斐波那契数列\"><a href=\"#7-斐波那契数列\" class=\"headerlink\" title=\"7. 斐波那契数列\"></a><a href=\"https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">7. 斐波那契数列</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p>\n<p><strong>注：n&lt;=39</strong></p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><blockquote>\n<p>斐波那契数列：0, 1, 1, 2, 3, 5, 8 ……;</p>\n<p>这个数列从第3项开始，每一项都等于前两项之和。</p>\n<p>利用递推公式：f(n) = f(n - 1) + f(n - 2);(当n &gt;= 2时)</p>\n<p>时间复杂度O(n), 空间复杂度O(1)</p>\n</blockquote>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"7-斐波那契数列\"><a href=\"#7-斐波那契数列\" class=\"headerlink\" title=\"7. 斐波那契数列\"></a><a href=\"https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">7. 斐波那契数列</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p>\n<p><strong>注：n&lt;=39</strong></p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><blockquote>\n<p>斐波那契数列：0, 1, 1, 2, 3, 5, 8 ……;</p>\n<p>这个数列从第3项开始，每一项都等于前两项之和。</p>\n<p>利用递推公式：f(n) = f(n - 1) + f(n - 2);(当n &gt;= 2时)</p>\n<p>时间复杂度O(n), 空间复杂度O(1)</p>\n</blockquote>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    int Fibonacci(int n) {\n        int i = 0;\n        int a = 0, b = 1;\n        while(i &lt; n)\n        {\n            b = a + b;\n            a = b - a;\n            ++i;\n        }\n        return a;\n    }\n};</code></pre>\n"},{"title":"变态跳台阶","date":"2019-04-03T07:25:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190403-2.jpg","summary":"剑指 offer：9、变态跳台阶","_content":"### [9\\. 变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n### 解题思路：\n+ 思路1: 利用递归思路，可参考[8、跳台阶](http://blog.wenguang0816.top/2019/04/03/08-jumpfloor/)\n递归公式为：\n```\nf(1) = 1\nf(2) = 1 + f(1) = 2\nf(3) = 1 + f(1) + f(2) = 4\n...\nf(n) = 1 + f(1) + f(2) + ... + f(n-1)\n```\n另外可以观察到：\n```\nf(n) = 1 + f(1) + f(2) + ... + f(n-2) + f(n-1)\nf(n-1) = 1 + f(1) + f(2) + ... + f(n-2) + f(n-1)\n-->\nf(n) = 2*f(n-1)\n```\n+ 思路2: 除最后一个台阶外，每一个台阶都可以选择跳或者不跳，故`f(n) = 2 ^ (n - 1)`\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        while(number > 0)\n        {\n            ans += jumpFloorII(number -1);\n            --number;\n        }\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        return 2 * jumpFloorII(number - 1);\n    }\n};\n\n// 解法3:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        int ans =  pow(2, number - 1);\n        return ans;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/09_jumpFloorII.md","raw":"---\ntitle: 变态跳台阶\ndate: 2019-04-03 15:25:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190403-2.jpg\nsummary: 剑指 offer：9、变态跳台阶\ncategories: 剑指 offer\ntags:\n  - 递归\n  - 循环\n---\n### [9\\. 变态跳台阶](https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n### 解题思路：\n+ 思路1: 利用递归思路，可参考[8、跳台阶](http://blog.wenguang0816.top/2019/04/03/08-jumpfloor/)\n递归公式为：\n```\nf(1) = 1\nf(2) = 1 + f(1) = 2\nf(3) = 1 + f(1) + f(2) = 4\n...\nf(n) = 1 + f(1) + f(2) + ... + f(n-1)\n```\n另外可以观察到：\n```\nf(n) = 1 + f(1) + f(2) + ... + f(n-2) + f(n-1)\nf(n-1) = 1 + f(1) + f(2) + ... + f(n-2) + f(n-1)\n-->\nf(n) = 2*f(n-1)\n```\n+ 思路2: 除最后一个台阶外，每一个台阶都可以选择跳或者不跳，故`f(n) = 2 ^ (n - 1)`\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        while(number > 0)\n        {\n            ans += jumpFloorII(number -1);\n            --number;\n        }\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        return 2 * jumpFloorII(number - 1);\n    }\n};\n\n// 解法3:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        int ans =  pow(2, number - 1);\n        return ans;\n    }\n};\n```","slug":"Sword_refers_to_Offer/09_jumpFloorII","published":1,"updated":"2019-07-14T03:31:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euriq0044metfpasfadq4","content":"<h3 id=\"9-变态跳台阶\"><a href=\"#9-变态跳台阶\" class=\"headerlink\" title=\"9. 变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">9. 变态跳台阶</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 利用递归思路，可参考<a href=\"http://blog.wenguang0816.top/2019/04/03/08-jumpfloor/\">8、跳台阶</a><br>递归公式为：<pre><code>f(1) = 1\nf(2) = 1 + f(1) = 2\nf(3) = 1 + f(1) + f(2) = 4\n...\nf(n) = 1 + f(1) + f(2) + ... + f(n-1)</code></pre>另外可以观察到：<br>```<br>f(n) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)<br>f(n-1) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)</li>\n</ul>\n<p>–&gt;<br>f(n) = 2*f(n-1)</p>\n<pre><code>+ 思路2: 除最后一个台阶外，每一个台阶都可以选择跳或者不跳，故`f(n) = 2 ^ (n - 1)`\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number &lt;= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        while(number &gt; 0)\n        {\n            ans += jumpFloorII(number -1);\n            --number;\n        }\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number &lt;= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        return 2 * jumpFloorII(number - 1);\n    }\n};\n\n// 解法3:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        int ans =  pow(2, number - 1);\n        return ans;\n    }\n};</code></pre>","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"9-变态跳台阶\"><a href=\"#9-变态跳台阶\" class=\"headerlink\" title=\"9. 变态跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">9. 变态跳台阶</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 利用递归思路，可参考<a href=\"http://blog.wenguang0816.top/2019/04/03/08-jumpfloor/\">8、跳台阶</a><br>递归公式为：<pre><code>f(1) = 1\nf(2) = 1 + f(1) = 2\nf(3) = 1 + f(1) + f(2) = 4\n...\nf(n) = 1 + f(1) + f(2) + ... + f(n-1)</code></pre>另外可以观察到：<br>```<br>f(n) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)<br>f(n-1) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)</li>\n</ul>\n<p>–&gt;<br>f(n) = 2*f(n-1)</p>\n<pre><code>+ 思路2: 除最后一个台阶外，每一个台阶都可以选择跳或者不跳，故`f(n) = 2 ^ (n - 1)`\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number &lt;= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        while(number &gt; 0)\n        {\n            ans += jumpFloorII(number -1);\n            --number;\n        }\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number &lt;= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int ans = 1;\n        return 2 * jumpFloorII(number - 1);\n    }\n};\n\n// 解法3:\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        int ans =  pow(2, number - 1);\n        return ans;\n    }\n};</code></pre>"},{"title":"矩形覆盖","date":"2019-04-04T02:30:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190404-1.jpg","summary":"剑指 offer：10、矩形覆盖","_content":"### [10\\. 矩形覆盖](https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n我们可以用`2*1`的小矩形横着或者竖着去覆盖更大的矩形。请问用n个`2*1`的小矩形无重叠地覆盖一个`2*n`的大矩形，总共有多少种方法？\n\n### 解题思路：\n这仍然是一个斐波那契数列问题。\n```\nf(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)\n```\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int rectCover(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int first = 1, second = 2, third = 2;\n        for(int i = 2; i < number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};\n\n```","source":"_posts/Sword_refers_to_Offer/10_rectCover.md","raw":"---\ntitle: 矩形覆盖\ndate: 2019-04-04 10:30:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190404-1.jpg\nsummary: 剑指 offer：10、矩形覆盖\ncategories: 剑指 offer\ntags:\n  - 递归\n---\n### [10\\. 矩形覆盖](https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n我们可以用`2*1`的小矩形横着或者竖着去覆盖更大的矩形。请问用n个`2*1`的小矩形无重叠地覆盖一个`2*n`的大矩形，总共有多少种方法？\n\n### 解题思路：\n这仍然是一个斐波那契数列问题。\n```\nf(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)\n```\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int rectCover(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int first = 1, second = 2, third = 2;\n        for(int i = 2; i < number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};\n\n```","slug":"Sword_refers_to_Offer/10_rectCover","published":1,"updated":"2019-07-14T03:31:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euris0048metf7of66835","content":"<h3 id=\"10-矩形覆盖\"><a href=\"#10-矩形覆盖\" class=\"headerlink\" title=\"10. 矩形覆盖\"></a><a href=\"https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">10. 矩形覆盖</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这仍然是一个斐波那契数列问题。</p>\n<pre><code>f(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)</code></pre><h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rectCover</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"10-矩形覆盖\"><a href=\"#10-矩形覆盖\" class=\"headerlink\" title=\"10. 矩形覆盖\"></a><a href=\"https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">10. 矩形覆盖</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这仍然是一个斐波那契数列问题。</p>\n<pre><code>f(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)</code></pre><h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    int rectCover(int number) {\n        if(number &lt;= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        int first = 1, second = 2, third = 2;\n        for(int i = 2; i &lt; number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};\n</code></pre>\n"},{"title":"二进制中1的个数","date":"2019-04-01T08:50:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190401-4.jpg","summary":"剑指 offer：11、二进制中1的个数","_content":"### [11\\. 二进制中1的个数](https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n### 解题思路：\n+ 思路1：直接去掉二进制中位置最靠后的1。假设`n=1100`，则`n-1=1011`，那么`n&(n-1)=1000`,位置最靠后的1被去掉。 时间复杂度O(M), M为1的个数\n+ 思路2：利用标志位遍历int的32位; 时间复杂度O(1), 32次循环\n\n**注：负数右移后，最高位补1，如果右移判断最低位将导致死循环** \n\n### 解答：\n\n```cpp\n// 方法1\nclass Solution {\npublic:\n    int NumberOf1(int n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            n = n & (n-1);\n            cnt++;\n        }\n        return cnt;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n     int  NumberOf1(int n) {\n         int cnt = 0;\n         int flag = 1;\n         while(flag != 0)\n         {\n             if((n & flag) != 0)\n                 ++cnt;\n             flag = flag << 1;\n         }\n         return cnt;\n     }\n};\n```","source":"_posts/Sword_refers_to_Offer/11_number_of_1_bits.md","raw":"---\ntitle: 二进制中1的个数\ndate: 2019-04-01 16:50:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190401-4.jpg\nsummary: 剑指 offer：11、二进制中1的个数\ncategories: 剑指 offer\ntags:\n  - 位运算\n  - 数学\n---\n### [11\\. 二进制中1的个数](https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n### 解题思路：\n+ 思路1：直接去掉二进制中位置最靠后的1。假设`n=1100`，则`n-1=1011`，那么`n&(n-1)=1000`,位置最靠后的1被去掉。 时间复杂度O(M), M为1的个数\n+ 思路2：利用标志位遍历int的32位; 时间复杂度O(1), 32次循环\n\n**注：负数右移后，最高位补1，如果右移判断最低位将导致死循环** \n\n### 解答：\n\n```cpp\n// 方法1\nclass Solution {\npublic:\n    int NumberOf1(int n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            n = n & (n-1);\n            cnt++;\n        }\n        return cnt;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n     int  NumberOf1(int n) {\n         int cnt = 0;\n         int flag = 1;\n         while(flag != 0)\n         {\n             if((n & flag) != 0)\n                 ++cnt;\n             flag = flag << 1;\n         }\n         return cnt;\n     }\n};\n```","slug":"Sword_refers_to_Offer/11_number_of_1_bits","published":1,"updated":"2019-07-14T03:31:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurit004bmetfn6kflwv5","content":"<h3 id=\"11-二进制中1的个数\"><a href=\"#11-二进制中1的个数\" class=\"headerlink\" title=\"11. 二进制中1的个数\"></a><a href=\"https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">11. 二进制中1的个数</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。 时间复杂度O(M), M为1的个数</li>\n<li>思路2：利用标志位遍历int的32位; 时间复杂度O(1), 32次循环</li>\n</ul>\n<p><strong>注：负数右移后，最高位补1，如果右移判断最低位将导致死循环</strong> </p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 方法1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">NumberOf1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 方法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n     <span class=\"token keyword\">int</span>  <span class=\"token function\">NumberOf1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n             flag <span class=\"token operator\">=</span> flag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"11-二进制中1的个数\"><a href=\"#11-二进制中1的个数\" class=\"headerlink\" title=\"11. 二进制中1的个数\"></a><a href=\"https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">11. 二进制中1的个数</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。 时间复杂度O(M), M为1的个数</li>\n<li>思路2：利用标志位遍历int的32位; 时间复杂度O(1), 32次循环</li>\n</ul>\n<p><strong>注：负数右移后，最高位补1，如果右移判断最低位将导致死循环</strong> </p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 方法1\nclass Solution {\npublic:\n    int NumberOf1(int n) {\n        int cnt = 0;\n        while(n != 0)\n        {\n            n = n &amp; (n-1);\n            cnt++;\n        }\n        return cnt;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n     int  NumberOf1(int n) {\n         int cnt = 0;\n         int flag = 1;\n         while(flag != 0)\n         {\n             if((n &amp; flag) != 0)\n                 ++cnt;\n             flag = flag &lt;&lt; 1;\n         }\n         return cnt;\n     }\n};</code></pre>\n"},{"title":"数值的整数次方","date":"2019-04-21T05:52:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190421-1.jpg","summary":"剑指 offer：12、数值的整数次方","_content":"### [12\\. 数值的整数次方](https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n### 解题思路：\n+ 思路1：直接求解\n+ 思路2：简单快速幂：\n  - 写出指数的二进制表达，例如`13`的二进制为`1101`\n  - 以底数为`10`为例：`10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000`\n\n### 解答：\n\n```cpp\n// 方法1\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n        {\n            if(base == 0)\n                throw \"The denominator cannot be 0\";\n            else\n                base = 1.0 / base;\n        }\n        while(exponent)\n        {\n            res *= base;\n            exponent = (exponent > 0) ? --exponent : ++exponent;\n        }\n        return res;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        int flag = 1; // 指数正负标志位，1为正\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n        {\n            if(base == 0)\n                throw \"The denominator cannot be 0\";\n            else\n                exponent = -exponent;\n            flag = 0;\n        }\n        while(exponent != 0)\n        {\n            if((exponent & 1) == 1)\n                res *= base;\n            base *= base;\n            exponent >>= 1;\n        }\n\n        return flag ? res : (1 / res);\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/12_power.md","raw":"---\ntitle: 数值的整数次方\ndate: 2019-04-21 13:52:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190421-1.jpg\nsummary: 剑指 offer：12、数值的整数次方\ncategories: 剑指 offer\ntags:\n  - 数学\n---\n### [12\\. 数值的整数次方](https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n### 解题思路：\n+ 思路1：直接求解\n+ 思路2：简单快速幂：\n  - 写出指数的二进制表达，例如`13`的二进制为`1101`\n  - 以底数为`10`为例：`10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000`\n\n### 解答：\n\n```cpp\n// 方法1\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n        {\n            if(base == 0)\n                throw \"The denominator cannot be 0\";\n            else\n                base = 1.0 / base;\n        }\n        while(exponent)\n        {\n            res *= base;\n            exponent = (exponent > 0) ? --exponent : ++exponent;\n        }\n        return res;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        int flag = 1; // 指数正负标志位，1为正\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n        {\n            if(base == 0)\n                throw \"The denominator cannot be 0\";\n            else\n                exponent = -exponent;\n            flag = 0;\n        }\n        while(exponent != 0)\n        {\n            if((exponent & 1) == 1)\n                res *= base;\n            base *= base;\n            exponent >>= 1;\n        }\n\n        return flag ? res : (1 / res);\n    }\n};\n```","slug":"Sword_refers_to_Offer/12_power","published":1,"updated":"2019-07-14T03:32:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euriu004emetfsh9p6vwk","content":"<h3 id=\"12-数值的整数次方\"><a href=\"#12-数值的整数次方\" class=\"headerlink\" title=\"12. 数值的整数次方\"></a><a href=\"https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">12. 数值的整数次方</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1：直接求解</li>\n<li>思路2：简单快速幂：<ul>\n<li>写出指数的二进制表达，例如<code>13</code>的二进制为<code>1101</code></li>\n<li>以底数为<code>10</code>为例：<code>10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 方法1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">Power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> exponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token string\">\"The denominator cannot be 0\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                base <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> base<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>exponent<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">*</span><span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span>\n            exponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">--</span>exponent <span class=\"token operator\">:</span> <span class=\"token operator\">++</span>exponent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 方法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">Power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> exponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 指数正负标志位，1为正</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token string\">\"The denominator cannot be 0\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                exponent <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>exponent<span class=\"token punctuation\">;</span>\n            flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                res <span class=\"token operator\">*</span><span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*</span><span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span>\n            exponent <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> flag <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"12-数值的整数次方\"><a href=\"#12-数值的整数次方\" class=\"headerlink\" title=\"12. 数值的整数次方\"></a><a href=\"https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">12. 数值的整数次方</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1：直接求解</li>\n<li>思路2：简单快速幂：<ul>\n<li>写出指数的二进制表达，例如<code>13</code>的二进制为<code>1101</code></li>\n<li>以底数为<code>10</code>为例：<code>10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 方法1\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        if(exponent == 0)\n            return 1;\n        if(exponent &lt; 0)\n        {\n            if(base == 0)\n                throw &quot;The denominator cannot be 0&quot;;\n            else\n                base = 1.0 / base;\n        }\n        while(exponent)\n        {\n            res *= base;\n            exponent = (exponent &gt; 0) ? --exponent : ++exponent;\n        }\n        return res;\n    }\n};\n// 方法2:\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        double res = 1.0;\n        int flag = 1; // 指数正负标志位，1为正\n        if(exponent == 0)\n            return 1;\n        if(exponent &lt; 0)\n        {\n            if(base == 0)\n                throw &quot;The denominator cannot be 0&quot;;\n            else\n                exponent = -exponent;\n            flag = 0;\n        }\n        while(exponent != 0)\n        {\n            if((exponent &amp; 1) == 1)\n                res *= base;\n            base *= base;\n            exponent &gt;&gt;= 1;\n        }\n\n        return flag ? res : (1 / res);\n    }\n};</code></pre>\n"},{"title":"链表中倒数第k个节点","date":"2019-04-23T11:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190423-1.jpg","summary":"剑指 offer：14、链表中倒数第k个节点","_content":"### [14\\. 链表中倒数第k个节点](https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，输出该链表中倒数第k个结点。\n\n### 解题思路：\n+ 定义两个指针，第一个指针从链表头部开始遍历至第`k-1`个节点，第二个指针保持不懂；\n+ 第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持`k-1`，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第`k`个节点\n\n异常处理：\n1. 输入为空指针\n2. 链表节点数小于k\n3. k为0\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n\tint val;\n\tstruct ListNode *next;\n\tListNode(int x) :\n\t\t\tval(x), next(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(pListHead == nullptr || k == 0)\n            return nullptr;\n        ListNode* pAhead = pListHead;\n        ListNode* pBehind = nullptr;\n        for(int i = 0; i < k - 1; ++i)\n        {\n            if(pAhead->next != nullptr)\n                pAhead = pAhead->next;\n            else\n                return nullptr;\n        }\n        pBehind = pListHead;\n        while(pAhead->next != nullptr)\n        {\n            pAhead = pAhead->next;\n            pBehind = pBehind->next;\n        }\n        return pBehind;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/14_FindKthToTail.md","raw":"---\ntitle: 链表中倒数第k个节点\ndate: 2019-04-23 19:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190423-1.jpg\nsummary: 剑指 offer：14、链表中倒数第k个节点\ncategories: 剑指 offer\ntags:\n  - 链表\n  - 鲁棒性\n---\n### [14\\. 链表中倒数第k个节点](https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，输出该链表中倒数第k个结点。\n\n### 解题思路：\n+ 定义两个指针，第一个指针从链表头部开始遍历至第`k-1`个节点，第二个指针保持不懂；\n+ 第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持`k-1`，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第`k`个节点\n\n异常处理：\n1. 输入为空指针\n2. 链表节点数小于k\n3. k为0\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n\tint val;\n\tstruct ListNode *next;\n\tListNode(int x) :\n\t\t\tval(x), next(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(pListHead == nullptr || k == 0)\n            return nullptr;\n        ListNode* pAhead = pListHead;\n        ListNode* pBehind = nullptr;\n        for(int i = 0; i < k - 1; ++i)\n        {\n            if(pAhead->next != nullptr)\n                pAhead = pAhead->next;\n            else\n                return nullptr;\n        }\n        pBehind = pListHead;\n        while(pAhead->next != nullptr)\n        {\n            pAhead = pAhead->next;\n            pBehind = pBehind->next;\n        }\n        return pBehind;\n    }\n};\n```","slug":"Sword_refers_to_Offer/14_FindKthToTail","published":1,"updated":"2020-02-01T14:01:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5euriz004hmetf6uai83ji","content":"<h3 id=\"14-链表中倒数第k个节点\"><a href=\"#14-链表中倒数第k个节点\" class=\"headerlink\" title=\"14. 链表中倒数第k个节点\"></a><a href=\"https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">14. 链表中倒数第k个节点</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，输出该链表中倒数第k个结点。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>定义两个指针，第一个指针从链表头部开始遍历至第<code>k-1</code>个节点，第二个指针保持不懂；</li>\n<li>第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持<code>k-1</code>，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第<code>k</code>个节点</li>\n</ul>\n<p>异常处理：</p>\n<ol>\n<li>输入为空指针</li>\n<li>链表节点数小于k</li>\n<li>k为0</li>\n</ol>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(nullptr) {\n    }\n};*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">FindKthToTail</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pListHead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pListHead <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pAhead <span class=\"token operator\">=</span> pListHead<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pBehind <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pAhead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n                pAhead <span class=\"token operator\">=</span> pAhead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pBehind <span class=\"token operator\">=</span> pListHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pAhead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pAhead <span class=\"token operator\">=</span> pAhead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            pBehind <span class=\"token operator\">=</span> pBehind<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pBehind<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"14-链表中倒数第k个节点\"><a href=\"#14-链表中倒数第k个节点\" class=\"headerlink\" title=\"14. 链表中倒数第k个节点\"></a><a href=\"https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">14. 链表中倒数第k个节点</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，输出该链表中倒数第k个结点。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>定义两个指针，第一个指针从链表头部开始遍历至第<code>k-1</code>个节点，第二个指针保持不懂；</li>\n<li>第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持<code>k-1</code>，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第<code>k</code>个节点</li>\n</ul>\n<p>异常处理：</p>\n<ol>\n<li>输入为空指针</li>\n<li>链表节点数小于k</li>\n<li>k为0</li>\n</ol>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(nullptr) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(pListHead == nullptr || k == 0)\n            return nullptr;\n        ListNode* pAhead = pListHead;\n        ListNode* pBehind = nullptr;\n        for(int i = 0; i &lt; k - 1; ++i)\n        {\n            if(pAhead-&gt;next != nullptr)\n                pAhead = pAhead-&gt;next;\n            else\n                return nullptr;\n        }\n        pBehind = pListHead;\n        while(pAhead-&gt;next != nullptr)\n        {\n            pAhead = pAhead-&gt;next;\n            pBehind = pBehind-&gt;next;\n        }\n        return pBehind;\n    }\n};</code></pre>\n"},{"title":"反转链表","date":"2019-04-02T12:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190402-2.jpg","summary":"剑指 offer：15、反转链表","_content":"### [15\\. 反转链表](https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，反转链表后，输出新链表的表头。\n\n### 解题思路：\n通过3个指针遍历一遍链表，实现链表反转，详细过程参见[（转载）漫画：如何将一个链表“逆序”？](http://blog.wenguang0816.top/2019/03/20/reverse-linked-list/)\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n\tint val;\n\tstruct ListNode *next;\n\tListNode(int x) :\n\t\t\tval(x), next(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    ListNode* ReverseList(ListNode* pHead) {\n        if(pHead == nullptr || pHead->next == nullptr)\n            return pHead;\n        ListNode *p1 = pHead;\n        ListNode *p2 = pHead->next;\n        ListNode *p3 = nullptr;\n        while(p2 != nullptr)\n        {\n            p3 = p2->next;\n            p2->next = p1;\n            p1 = p2;\n            p2 = p3;\n        }\n        pHead->next = nullptr;\n        pHead = p1;\n        return pHead;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/15_reverse_LinkedList.md","raw":"---\ntitle: 反转链表\ndate: 2019-04-02 20:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190402-2.jpg\nsummary: 剑指 offer：15、反转链表\ncategories: 剑指 offer\ntags:\n  - 链表\n---\n### [15\\. 反转链表](https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一个链表，反转链表后，输出新链表的表头。\n\n### 解题思路：\n通过3个指针遍历一遍链表，实现链表反转，详细过程参见[（转载）漫画：如何将一个链表“逆序”？](http://blog.wenguang0816.top/2019/03/20/reverse-linked-list/)\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n\tint val;\n\tstruct ListNode *next;\n\tListNode(int x) :\n\t\t\tval(x), next(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    ListNode* ReverseList(ListNode* pHead) {\n        if(pHead == nullptr || pHead->next == nullptr)\n            return pHead;\n        ListNode *p1 = pHead;\n        ListNode *p2 = pHead->next;\n        ListNode *p3 = nullptr;\n        while(p2 != nullptr)\n        {\n            p3 = p2->next;\n            p2->next = p1;\n            p1 = p2;\n            p2 = p3;\n        }\n        pHead->next = nullptr;\n        pHead = p1;\n        return pHead;\n    }\n};\n```","slug":"Sword_refers_to_Offer/15_reverse_LinkedList","published":1,"updated":"2020-02-01T14:01:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj0004lmetfz872kp45","content":"<h3 id=\"15-反转链表\"><a href=\"#15-反转链表\" class=\"headerlink\" title=\"15. 反转链表\"></a><a href=\"https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">15. 反转链表</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，反转链表后，输出新链表的表头。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>通过3个指针遍历一遍链表，实现链表反转，详细过程参见<a href=\"http://blog.wenguang0816.top/2019/03/20/reverse-linked-list/\">（转载）漫画：如何将一个链表“逆序”？</a></p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(nullptr) {\n    }\n};*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ReverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> pHead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> pHead<span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> pHead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            p3 <span class=\"token operator\">=</span> p2<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            p2<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n            p1 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n            p2 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pHead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        pHead <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"15-反转链表\"><a href=\"#15-反转链表\" class=\"headerlink\" title=\"15. 反转链表\"></a><a href=\"https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">15. 反转链表</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个链表，反转链表后，输出新链表的表头。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>通过3个指针遍历一遍链表，实现链表反转，详细过程参见<a href=\"http://blog.wenguang0816.top/2019/03/20/reverse-linked-list/\">（转载）漫画：如何将一个链表“逆序”？</a></p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(nullptr) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* ReverseList(ListNode* pHead) {\n        if(pHead == nullptr || pHead-&gt;next == nullptr)\n            return pHead;\n        ListNode *p1 = pHead;\n        ListNode *p2 = pHead-&gt;next;\n        ListNode *p3 = nullptr;\n        while(p2 != nullptr)\n        {\n            p3 = p2-&gt;next;\n            p2-&gt;next = p1;\n            p1 = p2;\n            p2 = p3;\n        }\n        pHead-&gt;next = nullptr;\n        pHead = p1;\n        return pHead;\n    }\n};</code></pre>\n"},{"title":"二叉树的镜像","date":"2019-04-17T13:48:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190417-1.jpg","summary":"剑指 offer：18、二叉树的镜像","_content":"### [18\\. 二叉树的镜像](https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n操作给定的二叉树，将其变换为源二叉树的镜像。\n\n#### 输入描述\n```\n二叉树的镜像定义：源二叉树\n    \t    8\n    \t   /  \\\n    \t  6   10\n    \t / \\  / \\\n    \t5  7 9 11\n    \t镜像二叉树\n    \t    8\n    \t   /  \\\n    \t  10   6\n    \t / \\  / \\\n    \t11 9 7  5\n```\n\n### 解题思路：\n使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点\n\n### 解答：\n\n```cpp\n/*\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(nullptr), right(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    void Mirror(TreeNode *pRoot) {\n        if(!pRoot)\n            return;\n        TreeNode *tmp = pRoot->left;\n        pRoot->left = pRoot->right;\n        pRoot->right = tmp;\n        Mirror(pRoot->left);\n        Mirror(pRoot->right);\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/18_mirror.md","raw":"---\ntitle: 二叉树的镜像\ndate: 2019-04-17 21:48:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190417-1.jpg\nsummary: 剑指 offer：18、二叉树的镜像\ncategories: 剑指 offer\ntags:\n  - 二叉树\n  - 递归\n  - 栈\n---\n### [18\\. 二叉树的镜像](https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n操作给定的二叉树，将其变换为源二叉树的镜像。\n\n#### 输入描述\n```\n二叉树的镜像定义：源二叉树\n    \t    8\n    \t   /  \\\n    \t  6   10\n    \t / \\  / \\\n    \t5  7 9 11\n    \t镜像二叉树\n    \t    8\n    \t   /  \\\n    \t  10   6\n    \t / \\  / \\\n    \t11 9 7  5\n```\n\n### 解题思路：\n使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点\n\n### 解答：\n\n```cpp\n/*\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(nullptr), right(nullptr) {\n\t}\n};*/\nclass Solution {\npublic:\n    void Mirror(TreeNode *pRoot) {\n        if(!pRoot)\n            return;\n        TreeNode *tmp = pRoot->left;\n        pRoot->left = pRoot->right;\n        pRoot->right = tmp;\n        Mirror(pRoot->left);\n        Mirror(pRoot->right);\n    }\n};\n```","slug":"Sword_refers_to_Offer/18_mirror","published":1,"updated":"2020-02-01T14:01:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj2004ometfbvpucx3a","content":"<h3 id=\"18-二叉树的镜像\"><a href=\"#18-二叉树的镜像\" class=\"headerlink\" title=\"18. 二叉树的镜像\"></a><a href=\"https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">18. 二叉树的镜像</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n<h4 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h4><pre><code>二叉树的镜像定义：源二叉树\n            8\n           /  \\\n          6   10\n         / \\  / \\\n        5  7 9 11\n        镜像二叉树\n            8\n           /  \\\n          10   6\n         / \\  / \\\n        11 9 7  5</code></pre><h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(nullptr), right(nullptr) {\n    }\n};*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Mirror</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>pRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pRoot<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        TreeNode <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">;</span>\n        pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">=</span> pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">;</span>\n        pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Mirror</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Mirror</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"18-二叉树的镜像\"><a href=\"#18-二叉树的镜像\" class=\"headerlink\" title=\"18. 二叉树的镜像\"></a><a href=\"https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">18. 二叉树的镜像</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n<h4 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h4><pre><code>二叉树的镜像定义：源二叉树\n            8\n           /  \\\n          6   10\n         / \\  / \\\n        5  7 9 11\n        镜像二叉树\n            8\n           /  \\\n          10   6\n         / \\  / \\\n        11 9 7  5</code></pre><h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(nullptr), right(nullptr) {\n    }\n};*/\nclass Solution {\npublic:\n    void Mirror(TreeNode *pRoot) {\n        if(!pRoot)\n            return;\n        TreeNode *tmp = pRoot-&gt;left;\n        pRoot-&gt;left = pRoot-&gt;right;\n        pRoot-&gt;right = tmp;\n        Mirror(pRoot-&gt;left);\n        Mirror(pRoot-&gt;right);\n    }\n};</code></pre>\n"},{"title":"跳台阶","date":"2019-04-03T07:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190403-1.jpg","summary":"剑指 offer：8、跳台阶","_content":"### [8\\. 跳台阶](https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\n\n### 解题思路：\n利用递归思想：可以根据第一步的走法，将所有走法分为两类，第一类是第一步走`1`个台阶，另一类是第一步走`2`个台阶，所以`n`个台阶的走法就等于先走`1`个台阶后`n-1`个台阶的走法，加上先走`2`个台阶后`n-2`个台阶的走法，用公式表示为：\n```\nf(n) = f(n-1) + f(n-2)\n```\n有了递归公式，接下来就需要确定终止条件了，当有`1`个台阶时，只有一种走法，`f(1) = 1`，当有`2`个台阶时，有两种走法，`f(2) = 2`，因此递归公式为：\n```\nf(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)\n```\n通过观察递归公式可以发现，递归公式和斐波那契数列相似，则可以改进代码，提高算法运行效率\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        if(number == 1)\n            return 1;\n        if(number == 2)\n            return 2;\n        return jumpFloor(number -1) + jumpFloor(number -2);\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        int first = 1, second = 1, third = 0;\n        if(number == 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        for(int i = 1; i < number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/08_jumpFloor.md","raw":"---\ntitle: 跳台阶\ndate: 2019-04-03 15:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190403-1.jpg\nsummary: 剑指 offer：8、跳台阶\ncategories: 剑指 offer\ntags:\n  - 查找\n  - 数组\n---\n### [8\\. 跳台阶](https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\n\n### 解题思路：\n利用递归思想：可以根据第一步的走法，将所有走法分为两类，第一类是第一步走`1`个台阶，另一类是第一步走`2`个台阶，所以`n`个台阶的走法就等于先走`1`个台阶后`n-1`个台阶的走法，加上先走`2`个台阶后`n-2`个台阶的走法，用公式表示为：\n```\nf(n) = f(n-1) + f(n-2)\n```\n有了递归公式，接下来就需要确定终止条件了，当有`1`个台阶时，只有一种走法，`f(1) = 1`，当有`2`个台阶时，有两种走法，`f(2) = 2`，因此递归公式为：\n```\nf(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)\n```\n通过观察递归公式可以发现，递归公式和斐波那契数列相似，则可以改进代码，提高算法运行效率\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        if(number == 1)\n            return 1;\n        if(number == 2)\n            return 2;\n        return jumpFloor(number -1) + jumpFloor(number -2);\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        int first = 1, second = 1, third = 0;\n        if(number == 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        for(int i = 1; i < number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};\n```","slug":"Sword_refers_to_Offer/08_jumpFloor","published":1,"updated":"2019-07-14T03:30:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj6004smetft3g3y3vm","content":"<h3 id=\"8-跳台阶\"><a href=\"#8-跳台阶\" class=\"headerlink\" title=\"8. 跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">8. 跳台阶</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>利用递归思想：可以根据第一步的走法，将所有走法分为两类，第一类是第一步走<code>1</code>个台阶，另一类是第一步走<code>2</code>个台阶，所以<code>n</code>个台阶的走法就等于先走<code>1</code>个台阶后<code>n-1</code>个台阶的走法，加上先走<code>2</code>个台阶后<code>n-2</code>个台阶的走法，用公式表示为：</p>\n<pre><code>f(n) = f(n-1) + f(n-2)</code></pre><p>有了递归公式，接下来就需要确定终止条件了，当有<code>1</code>个台阶时，只有一种走法，<code>f(1) = 1</code>，当有<code>2</code>个台阶时，有两种走法，<code>f(2) = 2</code>，因此递归公式为：</p>\n<pre><code>f(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)</code></pre><p>通过观察递归公式可以发现，递归公式和斐波那契数列相似，则可以改进代码，提高算法运行效率</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">jumpFloor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">jumpFloor</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">jumpFloor</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">jumpFloor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"8-跳台阶\"><a href=\"#8-跳台阶\" class=\"headerlink\" title=\"8. 跳台阶\"></a><a href=\"https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">8. 跳台阶</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>利用递归思想：可以根据第一步的走法，将所有走法分为两类，第一类是第一步走<code>1</code>个台阶，另一类是第一步走<code>2</code>个台阶，所以<code>n</code>个台阶的走法就等于先走<code>1</code>个台阶后<code>n-1</code>个台阶的走法，加上先走<code>2</code>个台阶后<code>n-2</code>个台阶的走法，用公式表示为：</p>\n<pre><code>f(n) = f(n-1) + f(n-2)</code></pre><p>有了递归公式，接下来就需要确定终止条件了，当有<code>1</code>个台阶时，只有一种走法，<code>f(1) = 1</code>，当有<code>2</code>个台阶时，有两种走法，<code>f(2) = 2</code>，因此递归公式为：</p>\n<pre><code>f(1) = 1\nf(2) = 2\nf(n) = f(n-1) + f(n-2)</code></pre><p>通过观察递归公式可以发现，递归公式和斐波那契数列相似，则可以改进代码，提高算法运行效率</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 解法1:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        if(number == 1)\n            return 1;\n        if(number == 2)\n            return 2;\n        return jumpFloor(number -1) + jumpFloor(number -2);\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        int first = 1, second = 1, third = 0;\n        if(number == 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        for(int i = 1; i &lt; number; ++i)\n        {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n        return third;\n    }\n};</code></pre>\n"},{"title":"包含min函数的栈","date":"2019-08-11T10:40:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20191017-1.jpg","summary":"剑指 offer：20、包含min函数的栈","_content":"### [20\\. 包含min函数的栈](https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n\n### 解题思路：\n这道题我们需要创建两个栈，一个栈`base`来作为栈结构主体，个辅助栈`sMin`来记录入栈的最小值，根据题目接口，我们需要实现四个方法：\n1. void push(int value): 在每次入栈时，如果入栈值`value`小于`sMin`中的元素，则将`value`压栈到`sMin`，这样能够保证最小元素永远在`sMin`栈顶\n2. void pop(): 如果出栈元素等于`sMin`栈顶元素时，`sMin`栈顶元素出栈\n3. int top(): 返回栈`base`的栈顶元素\n4. int min(): 返回栈`sMin`的栈顶元素\n\n笔者展示的代码只是简单的实现了题目要求的包含min函数的栈，并且通过了牛客网的测试用例。不过代码并不完整，比如在调用`pop()`方法时应该去判断`base`和`sMin`是否为空，如果为空应该抛出异常。有兴趣的读者可以进一步完善代码。\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    void push(int value) {\n        base.push(value);\n        if(sMin.empty())\n            sMin.push(value);\n        if(value < sMin.top())\n        {\n            sMin.push(value);\n        }\n    }\n    void pop() {\n        if(base.top() == sMin.top())\n            sMin.pop();\n        base.pop();\n    }\n    int top() {\n        if(!base.empty())\n            return base.top();\n        else\n            return 0x7fffffff;\n    }\n    int min() {\n        if(!sMin.empty())\n            return sMin.top();\n        else\n            return 0x7fffffff;\n    }\nprivate:\n    stack<int> base, sMin;\n};\n```","source":"_posts/Sword_refers_to_Offer/20_min.md","raw":"---\ntitle: 包含min函数的栈\ndate: 2019-08-11 18:40:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20191017-1.jpg\nsummary: 剑指 offer：20、包含min函数的栈\ncategories: 剑指 offer\ntags:\n  - 栈\n---\n### [20\\. 包含min函数的栈](https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n\n### 解题思路：\n这道题我们需要创建两个栈，一个栈`base`来作为栈结构主体，个辅助栈`sMin`来记录入栈的最小值，根据题目接口，我们需要实现四个方法：\n1. void push(int value): 在每次入栈时，如果入栈值`value`小于`sMin`中的元素，则将`value`压栈到`sMin`，这样能够保证最小元素永远在`sMin`栈顶\n2. void pop(): 如果出栈元素等于`sMin`栈顶元素时，`sMin`栈顶元素出栈\n3. int top(): 返回栈`base`的栈顶元素\n4. int min(): 返回栈`sMin`的栈顶元素\n\n笔者展示的代码只是简单的实现了题目要求的包含min函数的栈，并且通过了牛客网的测试用例。不过代码并不完整，比如在调用`pop()`方法时应该去判断`base`和`sMin`是否为空，如果为空应该抛出异常。有兴趣的读者可以进一步完善代码。\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    void push(int value) {\n        base.push(value);\n        if(sMin.empty())\n            sMin.push(value);\n        if(value < sMin.top())\n        {\n            sMin.push(value);\n        }\n    }\n    void pop() {\n        if(base.top() == sMin.top())\n            sMin.pop();\n        base.pop();\n    }\n    int top() {\n        if(!base.empty())\n            return base.top();\n        else\n            return 0x7fffffff;\n    }\n    int min() {\n        if(!sMin.empty())\n            return sMin.top();\n        else\n            return 0x7fffffff;\n    }\nprivate:\n    stack<int> base, sMin;\n};\n```","slug":"Sword_refers_to_Offer/20_min","published":1,"updated":"2019-10-17T13:05:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj7004vmetftwpe3h8q","content":"<h3 id=\"20-包含min函数的栈\"><a href=\"#20-包含min函数的栈\" class=\"headerlink\" title=\"20. 包含min函数的栈\"></a><a href=\"https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">20. 包含min函数的栈</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这道题我们需要创建两个栈，一个栈<code>base</code>来作为栈结构主体，个辅助栈<code>sMin</code>来记录入栈的最小值，根据题目接口，我们需要实现四个方法：</p>\n<ol>\n<li>void push(int value): 在每次入栈时，如果入栈值<code>value</code>小于<code>sMin</code>中的元素，则将<code>value</code>压栈到<code>sMin</code>，这样能够保证最小元素永远在<code>sMin</code>栈顶</li>\n<li>void pop(): 如果出栈元素等于<code>sMin</code>栈顶元素时，<code>sMin</code>栈顶元素出栈</li>\n<li>int top(): 返回栈<code>base</code>的栈顶元素</li>\n<li>int min(): 返回栈<code>sMin</code>的栈顶元素</li>\n</ol>\n<p>笔者展示的代码只是简单的实现了题目要求的包含min函数的栈，并且通过了牛客网的测试用例。不过代码并不完整，比如在调用<code>pop()</code>方法时应该去判断<code>base</code>和<code>sMin</code>是否为空，如果为空应该抛出异常。有兴趣的读者可以进一步完善代码。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        base<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sMin<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            sMin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> sMin<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            sMin<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sMin<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            sMin<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        base<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sMin<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> sMin<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> base<span class=\"token punctuation\">,</span> sMin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"20-包含min函数的栈\"><a href=\"#20-包含min函数的栈\" class=\"headerlink\" title=\"20. 包含min函数的栈\"></a><a href=\"https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">20. 包含min函数的栈</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这道题我们需要创建两个栈，一个栈<code>base</code>来作为栈结构主体，个辅助栈<code>sMin</code>来记录入栈的最小值，根据题目接口，我们需要实现四个方法：</p>\n<ol>\n<li>void push(int value): 在每次入栈时，如果入栈值<code>value</code>小于<code>sMin</code>中的元素，则将<code>value</code>压栈到<code>sMin</code>，这样能够保证最小元素永远在<code>sMin</code>栈顶</li>\n<li>void pop(): 如果出栈元素等于<code>sMin</code>栈顶元素时，<code>sMin</code>栈顶元素出栈</li>\n<li>int top(): 返回栈<code>base</code>的栈顶元素</li>\n<li>int min(): 返回栈<code>sMin</code>的栈顶元素</li>\n</ol>\n<p>笔者展示的代码只是简单的实现了题目要求的包含min函数的栈，并且通过了牛客网的测试用例。不过代码并不完整，比如在调用<code>pop()</code>方法时应该去判断<code>base</code>和<code>sMin</code>是否为空，如果为空应该抛出异常。有兴趣的读者可以进一步完善代码。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    void push(int value) {\n        base.push(value);\n        if(sMin.empty())\n            sMin.push(value);\n        if(value &lt; sMin.top())\n        {\n            sMin.push(value);\n        }\n    }\n    void pop() {\n        if(base.top() == sMin.top())\n            sMin.pop();\n        base.pop();\n    }\n    int top() {\n        if(!base.empty())\n            return base.top();\n        else\n            return 0x7fffffff;\n    }\n    int min() {\n        if(!sMin.empty())\n            return sMin.top();\n        else\n            return 0x7fffffff;\n    }\nprivate:\n    stack&lt;int&gt; base, sMin;\n};</code></pre>\n"},{"title":"连续子数组的最大和","date":"2019-07-25T12:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190725-1.jpg","summary":"剑指 offer：30、连续子数组的最大和","_content":"### [30\\. 连续子数组的最大和](https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\nHZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n\n### 解题思路：\n这里补充一个例子来帮助更好的理解题意：\n> 输入数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为{3, 10, -4, 7, 2}，因此该子数组的和为`18`。(子数组并不需要从第一个开始，即不需要从`1`开始)\n\n我们可以运用动态规划的思想来解决这个问题。我们用`f(i)`来表示以数组中第`i`个元素结尾的子数组的最大和，那么我们可以得到以下公式：\n  ```python\n  f(i) = array[i]           # i = 0或者f(i-1) < 0\n  f(i) = f(i-1) + array[i]  # i != 0并且f(i-1) >= 0\n  ```\n  这个公式的含义为：当`f(i-1) < 0`即以第`i-1`个元素为结尾的子数组的最大和小于`0`时，我们如果将这个小于`0`的和与`array[i]`相加，就会导致结果比`array[i]`要小，所以我们舍弃以第`i-1`为结尾的子数组和，取`f(i) = array[i]`。反之，如果`f(i-1) >= 0`，我们取`f(i) = f(i-1) + array[i]`\n\n\n### 解答：\n```cpp\nclass Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector<int> array) {\n        int len = array.size();\n        if(len <= 0)\n            return 0;\n        int sum = array[0];\n        int tempsum = array[0];\n        for(int i = 1; i < len; ++i)\n        {\n            tempsum = (tempsum < 0) ? array[i] : tempsum + array[i];\n            sum = (tempsum > sum) ? tempsum : sum;\n        }\n        return sum;\n    }\n};\n```\n","source":"_posts/Sword_refers_to_Offer/30_FindGreatestSumOfSubArray.md","raw":"---\ntitle: 连续子数组的最大和\ndate: 2019-07-25 20:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190725-1.jpg\nsummary: 剑指 offer：30、连续子数组的最大和\ncategories: 剑指 offer\ntags:\n  - 数组\n  - 动态规划\n---\n### [30\\. 连续子数组的最大和](https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\nHZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n\n### 解题思路：\n这里补充一个例子来帮助更好的理解题意：\n> 输入数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为{3, 10, -4, 7, 2}，因此该子数组的和为`18`。(子数组并不需要从第一个开始，即不需要从`1`开始)\n\n我们可以运用动态规划的思想来解决这个问题。我们用`f(i)`来表示以数组中第`i`个元素结尾的子数组的最大和，那么我们可以得到以下公式：\n  ```python\n  f(i) = array[i]           # i = 0或者f(i-1) < 0\n  f(i) = f(i-1) + array[i]  # i != 0并且f(i-1) >= 0\n  ```\n  这个公式的含义为：当`f(i-1) < 0`即以第`i-1`个元素为结尾的子数组的最大和小于`0`时，我们如果将这个小于`0`的和与`array[i]`相加，就会导致结果比`array[i]`要小，所以我们舍弃以第`i-1`为结尾的子数组和，取`f(i) = array[i]`。反之，如果`f(i-1) >= 0`，我们取`f(i) = f(i-1) + array[i]`\n\n\n### 解答：\n```cpp\nclass Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector<int> array) {\n        int len = array.size();\n        if(len <= 0)\n            return 0;\n        int sum = array[0];\n        int tempsum = array[0];\n        for(int i = 1; i < len; ++i)\n        {\n            tempsum = (tempsum < 0) ? array[i] : tempsum + array[i];\n            sum = (tempsum > sum) ? tempsum : sum;\n        }\n        return sum;\n    }\n};\n```\n","slug":"Sword_refers_to_Offer/30_FindGreatestSumOfSubArray","published":1,"updated":"2019-07-27T09:53:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj8004zmetfnvq5y7a5","content":"<h3 id=\"30-连续子数组的最大和\"><a href=\"#30-连续子数组的最大和\" class=\"headerlink\" title=\"30. 连续子数组的最大和\"></a><a href=\"https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">30. 连续子数组的最大和</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这里补充一个例子来帮助更好的理解题意：</p>\n<blockquote>\n<p>输入数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为{3, 10, -4, 7, 2}，因此该子数组的和为<code>18</code>。(子数组并不需要从第一个开始，即不需要从<code>1</code>开始)</p>\n</blockquote>\n<p>我们可以运用动态规划的思想来解决这个问题。我们用<code>f(i)</code>来表示以数组中第<code>i</code>个元素结尾的子数组的最大和，那么我们可以得到以下公式：</p>\n<pre class=\" language-python\"><code class=\"language-python\">  f<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>           <span class=\"token comment\" spellcheck=\"true\"># i = 0或者f(i-1) &lt; 0</span>\n  f<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># i != 0并且f(i-1) >= 0</span></code></pre>\n<p>  这个公式的含义为：当<code>f(i-1) &lt; 0</code>即以第<code>i-1</code>个元素为结尾的子数组的最大和小于<code>0</code>时，我们如果将这个小于<code>0</code>的和与<code>array[i]</code>相加，就会导致结果比<code>array[i]</code>要小，所以我们舍弃以第<code>i-1</code>为结尾的子数组和，取<code>f(i) = array[i]</code>。反之，如果<code>f(i-1) &gt;= 0</code>，我们取<code>f(i) = f(i-1) + array[i]</code></p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">FindGreatestSumOfSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tempsum <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            tempsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tempsum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> tempsum <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tempsum <span class=\"token operator\">></span> sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> tempsum <span class=\"token operator\">:</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"30-连续子数组的最大和\"><a href=\"#30-连续子数组的最大和\" class=\"headerlink\" title=\"30. 连续子数组的最大和\"></a><a href=\"https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">30. 连续子数组的最大和</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>这里补充一个例子来帮助更好的理解题意：</p>\n<blockquote>\n<p>输入数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为{3, 10, -4, 7, 2}，因此该子数组的和为<code>18</code>。(子数组并不需要从第一个开始，即不需要从<code>1</code>开始)</p>\n</blockquote>\n<p>我们可以运用动态规划的思想来解决这个问题。我们用<code>f(i)</code>来表示以数组中第<code>i</code>个元素结尾的子数组的最大和，那么我们可以得到以下公式：</p>\n<pre><code class=\"python\">  f(i) = array[i]           # i = 0或者f(i-1) &lt; 0\n  f(i) = f(i-1) + array[i]  # i != 0并且f(i-1) &gt;= 0</code></pre>\n<p>  这个公式的含义为：当<code>f(i-1) &lt; 0</code>即以第<code>i-1</code>个元素为结尾的子数组的最大和小于<code>0</code>时，我们如果将这个小于<code>0</code>的和与<code>array[i]</code>相加，就会导致结果比<code>array[i]</code>要小，所以我们舍弃以第<code>i-1</code>为结尾的子数组和，取<code>f(i) = array[i]</code>。反之，如果<code>f(i-1) &gt;= 0</code>，我们取<code>f(i) = f(i-1) + array[i]</code></p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector&lt;int&gt; array) {\n        int len = array.size();\n        if(len &lt;= 0)\n            return 0;\n        int sum = array[0];\n        int tempsum = array[0];\n        for(int i = 1; i &lt; len; ++i)\n        {\n            tempsum = (tempsum &lt; 0) ? array[i] : tempsum + array[i];\n            sum = (tempsum &gt; sum) ? tempsum : sum;\n        }\n        return sum;\n    }\n};</code></pre>\n"},{"title":"二叉树的深度","date":"2019-04-17T12:46:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190417-2.jpg","summary":"剑指 offer：38、二叉树的深度","_content":"### [38\\. 二叉树的深度](https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\n\n### 解题思路：\n+ 思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为`O(N)`，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用`N`次（树的高度），因此保持调用栈的存储将是`O(N)`。但在最好的情况下（树是完全平衡的），树的高度将是`log(N)`。因此，在这种情况下的空间复杂度将是`O(log(N))`。\n+ 思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为`O(N)`，空间复杂度将是`O(N)`。\n\n### 解答：\n\n```cpp\n/*\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(nullptr), right(nullptr) {\n\t}\n};*/\n// 解法1:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot->left) + 1, TreeDepth(pRoot->right) + 1);\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        queue<TreeNode *> que;\n        que.push(pRoot);\n        int depth = 0;\n        while(!que.empty())\n        {\n            // 队列中每次迭代都只存储了一层的元素\n            int size = que.size();\n            depth++;\n            for(int i = 0; i < size; ++i)\n            {\n                TreeNode *node = que.front();\n                que.pop();\n                if(node->left)\n                    que.push(node->left);\n                if(node->right)\n                    que.push(node->right);\n            }\n        }\n        return depth;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/38_TreeDepth.md","raw":"---\ntitle: 二叉树的深度\ndate: 2019-04-17 20:46:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190417-2.jpg\nsummary: 剑指 offer：38、二叉树的深度\ncategories: 剑指 offer\ntags:\n  - 二叉树\n  - 递归\n  - 栈\n---\n### [38\\. 二叉树的深度](https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\n\n### 解题思路：\n+ 思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为`O(N)`，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用`N`次（树的高度），因此保持调用栈的存储将是`O(N)`。但在最好的情况下（树是完全平衡的），树的高度将是`log(N)`。因此，在这种情况下的空间复杂度将是`O(log(N))`。\n+ 思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为`O(N)`，空间复杂度将是`O(N)`。\n\n### 解答：\n\n```cpp\n/*\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(nullptr), right(nullptr) {\n\t}\n};*/\n// 解法1:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot->left) + 1, TreeDepth(pRoot->right) + 1);\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        queue<TreeNode *> que;\n        que.push(pRoot);\n        int depth = 0;\n        while(!que.empty())\n        {\n            // 队列中每次迭代都只存储了一层的元素\n            int size = que.size();\n            depth++;\n            for(int i = 0; i < size; ++i)\n            {\n                TreeNode *node = que.front();\n                que.pop();\n                if(node->left)\n                    que.push(node->left);\n                if(node->right)\n                    que.push(node->right);\n            }\n        }\n        return depth;\n    }\n};\n```","slug":"Sword_refers_to_Offer/38_TreeDepth","published":1,"updated":"2020-02-01T14:02:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurj90052metfjtms9tw7","content":"<h3 id=\"38-二叉树的深度\"><a href=\"#38-二叉树的深度\" class=\"headerlink\" title=\"38. 二叉树的深度\"></a><a href=\"https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">38. 二叉树的深度</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为<code>O(N)</code>，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用<code>N</code>次（树的高度），因此保持调用栈的存储将是<code>O(N)</code>。但在最好的情况下（树是完全平衡的），树的高度将是<code>log(N)</code>。因此，在这种情况下的空间复杂度将是<code>O(log(N))</code>。</li>\n<li>思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为<code>O(N)</code>，空间复杂度将是<code>O(N)</code>。</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(nullptr), right(nullptr) {\n    }\n};*/</span>\n<span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pRoot<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pRoot<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode <span class=\"token operator\">*</span><span class=\"token operator\">></span> que<span class=\"token punctuation\">;</span>\n        que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 队列中每次迭代都只存储了一层的元素</span>\n            <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                TreeNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                que<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"38-二叉树的深度\"><a href=\"#38-二叉树的深度\" class=\"headerlink\" title=\"38. 二叉树的深度\"></a><a href=\"https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">38. 二叉树的深度</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为<code>O(N)</code>，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用<code>N</code>次（树的高度），因此保持调用栈的存储将是<code>O(N)</code>。但在最好的情况下（树是完全平衡的），树的高度将是<code>log(N)</code>。因此，在这种情况下的空间复杂度将是<code>O(log(N))</code>。</li>\n<li>思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为<code>O(N)</code>，空间复杂度将是<code>O(N)</code>。</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(nullptr), right(nullptr) {\n    }\n};*/\n// 解法1:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        return max(TreeDepth(pRoot-&gt;left) + 1, TreeDepth(pRoot-&gt;right) + 1);\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        queue&lt;TreeNode *&gt; que;\n        que.push(pRoot);\n        int depth = 0;\n        while(!que.empty())\n        {\n            // 队列中每次迭代都只存储了一层的元素\n            int size = que.size();\n            depth++;\n            for(int i = 0; i &lt; size; ++i)\n            {\n                TreeNode *node = que.front();\n                que.pop();\n                if(node-&gt;left)\n                    que.push(node-&gt;left);\n                if(node-&gt;right)\n                    que.push(node-&gt;right);\n            }\n        }\n        return depth;\n    }\n};</code></pre>\n"},{"title":"左旋转字符串","date":"2019-04-21T10:23:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190421-2.jpg","summary":"剑指 offer：43、左旋转字符串","_content":"### [43\\. 左旋转字符串](https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\n\n### 解题思路：\n+ 思路1: 首先确定左移之后第一个字符在原字符串中的位置`begin`，然后从`begin`向后遍历完原字符串，然后从0开始遍历到`begin`，将两部分拼接即可\n+ 思路2: `begin`为分界线，将两侧字符串分别反转，然后再将整个字符串反转\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return \"\";\n        string res = \"\";\n        int begin = n % len;\n        for(int i = begin; i < len; ++i)\n            res += str[i];\n        for(int i = 0; i < begin; ++i)\n            res += str[i];\n        return res;\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return \"\";\n        int begin = n % len;\n        reverse(str.begin(), str.begin() + begin);\n        reverse(str.begin() + begin, str.end());\n        reverse(str.begin(), str.end());\n        return str;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/43_LeftRotateString.md","raw":"---\ntitle: 左旋转字符串\ndate: 2019-04-21 18:23:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190421-2.jpg\nsummary: 剑指 offer：43、左旋转字符串\ncategories: 剑指 offer\ntags:\n  - 字符串\n---\n### [43\\. 左旋转字符串](https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\n\n### 解题思路：\n+ 思路1: 首先确定左移之后第一个字符在原字符串中的位置`begin`，然后从`begin`向后遍历完原字符串，然后从0开始遍历到`begin`，将两部分拼接即可\n+ 思路2: `begin`为分界线，将两侧字符串分别反转，然后再将整个字符串反转\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return \"\";\n        string res = \"\";\n        int begin = n % len;\n        for(int i = begin; i < len; ++i)\n            res += str[i];\n        for(int i = 0; i < begin; ++i)\n            res += str[i];\n        return res;\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return \"\";\n        int begin = n % len;\n        reverse(str.begin(), str.begin() + begin);\n        reverse(str.begin() + begin, str.end());\n        reverse(str.begin(), str.end());\n        return str;\n    }\n};\n```","slug":"Sword_refers_to_Offer/43_LeftRotateString","published":1,"updated":"2019-07-14T03:35:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurja0056metfs90dgy51","content":"<h3 id=\"43-左旋转字符串\"><a href=\"#43-左旋转字符串\" class=\"headerlink\" title=\"43. 左旋转字符串\"></a><a href=\"https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">43. 左旋转字符串</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 首先确定左移之后第一个字符在原字符串中的位置<code>begin</code>，然后从<code>begin</code>向后遍历完原字符串，然后从0开始遍历到<code>begin</code>，将两部分拼接即可</li>\n<li>思路2: <code>begin</code>为分界线，将两侧字符串分别反转，然后再将整个字符串反转</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">LeftRotateString</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        string res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> begin<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">LeftRotateString</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> begin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"43-左旋转字符串\"><a href=\"#43-左旋转字符串\" class=\"headerlink\" title=\"43. 左旋转字符串\"></a><a href=\"https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">43. 左旋转字符串</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 首先确定左移之后第一个字符在原字符串中的位置<code>begin</code>，然后从<code>begin</code>向后遍历完原字符串，然后从0开始遍历到<code>begin</code>，将两部分拼接即可</li>\n<li>思路2: <code>begin</code>为分界线，将两侧字符串分别反转，然后再将整个字符串反转</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 解法1:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return &quot;&quot;;\n        string res = &quot;&quot;;\n        int begin = n % len;\n        for(int i = begin; i &lt; len; ++i)\n            res += str[i];\n        for(int i = 0; i &lt; begin; ++i)\n            res += str[i];\n        return res;\n    }\n};\n// 解法2:\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        int len = str.size();\n        if(len == 0)\n            return &quot;&quot;;\n        int begin = n % len;\n        reverse(str.begin(), str.begin() + begin);\n        reverse(str.begin() + begin, str.end());\n        reverse(str.begin(), str.end());\n        return str;\n    }\n};</code></pre>\n"},{"title":"平衡二叉树","date":"2019-07-27T10:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190727-1.jpg","summary":"剑指 offer：39、平衡二叉树","_content":"### [39\\. 平衡二叉树](https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一棵二叉树，判断该二叉树是否是平衡二叉树。\n\n### 解题思路：\n> 平衡二叉树：Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)\n\n我们可以通过递归的方式来获取二叉树每个节点的左右子树的深度，然后比较左右子树的深度，如果二者深度差值大于`1`，则可以判定该二叉树不是平衡二叉树，反之，该树为平衡二叉树。\n\n如果从上向下进行判断，则会导致判断上层节点时，需要多次判断其下层节点。所以我们采用从下向上的方式进行判断，如果某节点出现左右子树深度差大于`1`，则可判定该树不是平衡二叉树。\n\n### 解答：\n```cpp\nclass Solution {\npublic:\n    bool IsBalanced_Solution(TreeNode* pRoot) {\n        return TreeDepth(pRoot) != -1;\n    }\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(pRoot == nullptr)\n            return 0;\n        int leftDepth = TreeDepth(pRoot->left);\n        if(leftDepth == -1)\n            return -1;\n        int rightDepth = TreeDepth(pRoot->right);\n        if(rightDepth == -1)\n            return -1;\n        // 如果两子树深度差大于1，则该树不是平衡二叉树，返回-1做标志\n        return abs(leftDepth - rightDepth) > 1 ? -1 : max(leftDepth, rightDepth) + 1;\n    }\n};\n```\n","source":"_posts/Sword_refers_to_Offer/39_IsBalanced.md","raw":"---\ntitle: 平衡二叉树\ndate: 2019-07-27 18:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190727-1.jpg\nsummary: 剑指 offer：39、平衡二叉树\ncategories: 剑指 offer\ntags:\n  - 递归\n  - 二叉树\n---\n### [39\\. 平衡二叉树](https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n输入一棵二叉树，判断该二叉树是否是平衡二叉树。\n\n### 解题思路：\n> 平衡二叉树：Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)\n\n我们可以通过递归的方式来获取二叉树每个节点的左右子树的深度，然后比较左右子树的深度，如果二者深度差值大于`1`，则可以判定该二叉树不是平衡二叉树，反之，该树为平衡二叉树。\n\n如果从上向下进行判断，则会导致判断上层节点时，需要多次判断其下层节点。所以我们采用从下向上的方式进行判断，如果某节点出现左右子树深度差大于`1`，则可判定该树不是平衡二叉树。\n\n### 解答：\n```cpp\nclass Solution {\npublic:\n    bool IsBalanced_Solution(TreeNode* pRoot) {\n        return TreeDepth(pRoot) != -1;\n    }\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(pRoot == nullptr)\n            return 0;\n        int leftDepth = TreeDepth(pRoot->left);\n        if(leftDepth == -1)\n            return -1;\n        int rightDepth = TreeDepth(pRoot->right);\n        if(rightDepth == -1)\n            return -1;\n        // 如果两子树深度差大于1，则该树不是平衡二叉树，返回-1做标志\n        return abs(leftDepth - rightDepth) > 1 ? -1 : max(leftDepth, rightDepth) + 1;\n    }\n};\n```\n","slug":"Sword_refers_to_Offer/39_IsBalanced","published":1,"updated":"2019-07-27T10:14:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjb0059metf3spmbex8","content":"<h3 id=\"39-平衡二叉树\"><a href=\"#39-平衡二叉树\" class=\"headerlink\" title=\"39. 平衡二叉树\"></a><a href=\"https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">39. 平衡二叉树</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><blockquote>\n<p>平衡二叉树：Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)</p>\n</blockquote>\n<p>我们可以通过递归的方式来获取二叉树每个节点的左右子树的深度，然后比较左右子树的深度，如果二者深度差值大于<code>1</code>，则可以判定该二叉树不是平衡二叉树，反之，该树为平衡二叉树。</p>\n<p>如果从上向下进行判断，则会导致判断上层节点时，需要多次判断其下层节点。所以我们采用从下向上的方式进行判断，如果某节点出现左右子树深度差大于<code>1</code>，则可判定该树不是平衡二叉树。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">IsBalanced_Solution</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pRoot <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftDepth <span class=\"token operator\">=</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftDepth <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightDepth <span class=\"token operator\">=</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rightDepth <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 如果两子树深度差大于1，则该树不是平衡二叉树，返回-1做标志</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>leftDepth <span class=\"token operator\">-</span> rightDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftDepth<span class=\"token punctuation\">,</span> rightDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"39-平衡二叉树\"><a href=\"#39-平衡二叉树\" class=\"headerlink\" title=\"39. 平衡二叉树\"></a><a href=\"https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">39. 平衡二叉树</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><blockquote>\n<p>平衡二叉树：Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)</p>\n</blockquote>\n<p>我们可以通过递归的方式来获取二叉树每个节点的左右子树的深度，然后比较左右子树的深度，如果二者深度差值大于<code>1</code>，则可以判定该二叉树不是平衡二叉树，反之，该树为平衡二叉树。</p>\n<p>如果从上向下进行判断，则会导致判断上层节点时，需要多次判断其下层节点。所以我们采用从下向上的方式进行判断，如果某节点出现左右子树深度差大于<code>1</code>，则可判定该树不是平衡二叉树。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    bool IsBalanced_Solution(TreeNode* pRoot) {\n        return TreeDepth(pRoot) != -1;\n    }\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(pRoot == nullptr)\n            return 0;\n        int leftDepth = TreeDepth(pRoot-&gt;left);\n        if(leftDepth == -1)\n            return -1;\n        int rightDepth = TreeDepth(pRoot-&gt;right);\n        if(rightDepth == -1)\n            return -1;\n        // 如果两子树深度差大于1，则该树不是平衡二叉树，返回-1做标志\n        return abs(leftDepth - rightDepth) &gt; 1 ? -1 : max(leftDepth, rightDepth) + 1;\n    }\n};</code></pre>\n"},{"title":"求1+2+3+...+n","date":"2019-04-02T02:20:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190402-3.jpg","summary":"剑指 offer：47、求1+2+3+...+n","_content":"### [47\\. 求1+2+3+...+n](https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n\n### 解题思路：\n+ 思路1: 首先想到的是递归，但是递归要有返回条件，题目中明确说明不能使用if判断(用了if也可以AC)，所以采用逻辑与的短路特性，作为递归的返回条件\n+ 思路2: 借助求和公式，`sum = n * (n + 1) / 2`，题目中规定不允许使用乘除法，可以借助求`n * (n + 1)`的二维数组的大小以及右移运算实现，有违规嫌疑\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        int ans = n;\n        // 逻辑与有短路特点，当前面为假时，则后面不计算，当ans = 0时，递归返回\n        ans && (ans += Sum_Solution(n - 1));\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        bool a[n][n + 1];\n        return sizeof(a) >> 1;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/47_sum.md","raw":"---\ntitle: 求1+2+3+...+n\ndate: 2019-04-02 10:20:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190402-3.jpg\nsummary: 剑指 offer：47、求1+2+3+...+n\ncategories: 剑指 offer\ntags:\n  - 递归\n  - 逻辑与\n---\n### [47\\. 求1+2+3+...+n](https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n\n### 解题思路：\n+ 思路1: 首先想到的是递归，但是递归要有返回条件，题目中明确说明不能使用if判断(用了if也可以AC)，所以采用逻辑与的短路特性，作为递归的返回条件\n+ 思路2: 借助求和公式，`sum = n * (n + 1) / 2`，题目中规定不允许使用乘除法，可以借助求`n * (n + 1)`的二维数组的大小以及右移运算实现，有违规嫌疑\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        int ans = n;\n        // 逻辑与有短路特点，当前面为假时，则后面不计算，当ans = 0时，递归返回\n        ans && (ans += Sum_Solution(n - 1));\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        bool a[n][n + 1];\n        return sizeof(a) >> 1;\n    }\n};\n```","slug":"Sword_refers_to_Offer/47_sum","published":1,"updated":"2019-07-14T03:35:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjd005cmetf67d19efd","content":"<h3 id=\"47-求1-2-3-…-n\"><a href=\"#47-求1-2-3-…-n\" class=\"headerlink\" title=\"47. 求1+2+3+…+n\"></a><a href=\"https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">47. 求1+2+3+…+n</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 首先想到的是递归，但是递归要有返回条件，题目中明确说明不能使用if判断(用了if也可以AC)，所以采用逻辑与的短路特性，作为递归的返回条件</li>\n<li>思路2: 借助求和公式，<code>sum = n * (n + 1) / 2</code>，题目中规定不允许使用乘除法，可以借助求<code>n * (n + 1)</code>的二维数组的大小以及右移运算实现，有违规嫌疑</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Sum_Solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 逻辑与有短路特点，当前面为假时，则后面不计算，当ans = 0时，递归返回</span>\n        ans <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">Sum_Solution</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Sum_Solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"47-求1-2-3-…-n\"><a href=\"#47-求1-2-3-…-n\" class=\"headerlink\" title=\"47. 求1+2+3+…+n\"></a><a href=\"https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">47. 求1+2+3+…+n</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 首先想到的是递归，但是递归要有返回条件，题目中明确说明不能使用if判断(用了if也可以AC)，所以采用逻辑与的短路特性，作为递归的返回条件</li>\n<li>思路2: 借助求和公式，<code>sum = n * (n + 1) / 2</code>，题目中规定不允许使用乘除法，可以借助求<code>n * (n + 1)</code>的二维数组的大小以及右移运算实现，有违规嫌疑</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 解法1:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        int ans = n;\n        // 逻辑与有短路特点，当前面为假时，则后面不计算，当ans = 0时，递归返回\n        ans &amp;&amp; (ans += Sum_Solution(n - 1));\n        return ans;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        bool a[n][n + 1];\n        return sizeof(a) &gt;&gt; 1;\n    }\n};</code></pre>\n"},{"title":"不用加减乘除做加法","date":"2019-07-22T14:48:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190722-1.jpg","summary":"剑指 offer：48、不用加减乘除做加法","_content":"### [48\\. 不用加减乘除做加法](https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。\n\n### 解题思路：\n题目要求不得使用+、-、*、/四则运算，了解计算机CPU的物理实现或者数字电路的同学应该知道，计算机完成计算是通过门电路（与门、非门、与非门等等）进行二进制运算来实现我们人类认知的所有运算的。我们先观察一下十进制进行运算的过程。这里我们以`8+14=22`为例：\n\n1. 只做各位相加不进位，此时相加的结果是`12`（个位数8和4相加不进位是2，十位相加结果是1）\n2. 做进位，8+4有进位，进位值为`10`\n3. 将前两步的结果相加：`12+10`的结果为`22`，也就是8+14的结果。（重复1、2步骤）\n\n可以看出，十进制进行加法运算时，最终的结果 = 无进位加法 + 进位值。这个结论同样适用于二进制运算，同样以`8+14`即`1000 + 1110`为例：\n1. 只做各位相加不进位，此时结果为`0110`\n2. 做进位，两者相加进位值为`10000`\n3. 将两步结果相加：`0110 + 10000 = 10110`转化为十进制为`22`（重复1、2步骤）\n\n我们来观察一下二进制运算1、2步的结果，`0110`是`1000 \b^ 1110`的结果，`10000`是`1000 \b& 1110`后左移一位的结果。这样我们只需要重复1、2步骤，直到没有进位为止，便可得到最终结果。\n\n### 解答：\n```cpp\n// 方法1: while循环\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        while (num2 != 0)\n        {\n            int temp = num1 ^ num2;\n            num2 = (num1 & num2) << 1;\n            num1 = temp;\n        }\n        return num1;\n    }\n};\n// 方法2: 递归实现\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        return num2 ? Add(num1 ^ num2, (num1 & num2) << 1) : num1;\n    }\n};\n```\n","source":"_posts/Sword_refers_to_Offer/48_add.md","raw":"---\ntitle: 不用加减乘除做加法\ndate: 2019-07-22 22:48:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190722-1.jpg\nsummary: 剑指 offer：48、不用加减乘除做加法\ncategories: 剑指 offer\ntags:\n  - 递归\n  - 逻辑运算\n---\n### [48\\. 不用加减乘除做加法](https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。\n\n### 解题思路：\n题目要求不得使用+、-、*、/四则运算，了解计算机CPU的物理实现或者数字电路的同学应该知道，计算机完成计算是通过门电路（与门、非门、与非门等等）进行二进制运算来实现我们人类认知的所有运算的。我们先观察一下十进制进行运算的过程。这里我们以`8+14=22`为例：\n\n1. 只做各位相加不进位，此时相加的结果是`12`（个位数8和4相加不进位是2，十位相加结果是1）\n2. 做进位，8+4有进位，进位值为`10`\n3. 将前两步的结果相加：`12+10`的结果为`22`，也就是8+14的结果。（重复1、2步骤）\n\n可以看出，十进制进行加法运算时，最终的结果 = 无进位加法 + 进位值。这个结论同样适用于二进制运算，同样以`8+14`即`1000 + 1110`为例：\n1. 只做各位相加不进位，此时结果为`0110`\n2. 做进位，两者相加进位值为`10000`\n3. 将两步结果相加：`0110 + 10000 = 10110`转化为十进制为`22`（重复1、2步骤）\n\n我们来观察一下二进制运算1、2步的结果，`0110`是`1000 \b^ 1110`的结果，`10000`是`1000 \b& 1110`后左移一位的结果。这样我们只需要重复1、2步骤，直到没有进位为止，便可得到最终结果。\n\n### 解答：\n```cpp\n// 方法1: while循环\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        while (num2 != 0)\n        {\n            int temp = num1 ^ num2;\n            num2 = (num1 & num2) << 1;\n            num1 = temp;\n        }\n        return num1;\n    }\n};\n// 方法2: 递归实现\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        return num2 ? Add(num1 ^ num2, (num1 & num2) << 1) : num1;\n    }\n};\n```\n","slug":"Sword_refers_to_Offer/48_add","published":1,"updated":"2019-07-27T09:17:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjf005gmetf555pp6gw","content":"<h3 id=\"48-不用加减乘除做加法\"><a href=\"#48-不用加减乘除做加法\" class=\"headerlink\" title=\"48. 不用加减乘除做加法\"></a><a href=\"https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">48. 不用加减乘除做加法</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>题目要求不得使用+、-、*、/四则运算，了解计算机CPU的物理实现或者数字电路的同学应该知道，计算机完成计算是通过门电路（与门、非门、与非门等等）进行二进制运算来实现我们人类认知的所有运算的。我们先观察一下十进制进行运算的过程。这里我们以<code>8+14=22</code>为例：</p>\n<ol>\n<li>只做各位相加不进位，此时相加的结果是<code>12</code>（个位数8和4相加不进位是2，十位相加结果是1）</li>\n<li>做进位，8+4有进位，进位值为<code>10</code></li>\n<li>将前两步的结果相加：<code>12+10</code>的结果为<code>22</code>，也就是8+14的结果。（重复1、2步骤）</li>\n</ol>\n<p>可以看出，十进制进行加法运算时，最终的结果 = 无进位加法 + 进位值。这个结论同样适用于二进制运算，同样以<code>8+14</code>即<code>1000 + 1110</code>为例：</p>\n<ol>\n<li>只做各位相加不进位，此时结果为<code>0110</code></li>\n<li>做进位，两者相加进位值为<code>10000</code></li>\n<li>将两步结果相加：<code>0110 + 10000 = 10110</code>转化为十进制为<code>22</code>（重复1、2步骤）</li>\n</ol>\n<p>我们来观察一下二进制运算1、2步的结果，<code>0110</code>是<code>1000 \b^ 1110</code>的结果，<code>10000</code>是<code>1000 \b&amp; 1110</code>后左移一位的结果。这样我们只需要重复1、2步骤，直到没有进位为止，便可得到最终结果。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 方法1: while循环</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 最终的结果 = 无进位加法 + 进位值</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> num1 <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">;</span>\n            num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            num1 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 方法2: 递归实现</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 最终的结果 = 无进位加法 + 进位值</span>\n        <span class=\"token keyword\">return</span> num2 <span class=\"token operator\">?</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> num1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"48-不用加减乘除做加法\"><a href=\"#48-不用加减乘除做加法\" class=\"headerlink\" title=\"48. 不用加减乘除做加法\"></a><a href=\"https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">48. 不用加减乘除做加法</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>题目要求不得使用+、-、*、/四则运算，了解计算机CPU的物理实现或者数字电路的同学应该知道，计算机完成计算是通过门电路（与门、非门、与非门等等）进行二进制运算来实现我们人类认知的所有运算的。我们先观察一下十进制进行运算的过程。这里我们以<code>8+14=22</code>为例：</p>\n<ol>\n<li>只做各位相加不进位，此时相加的结果是<code>12</code>（个位数8和4相加不进位是2，十位相加结果是1）</li>\n<li>做进位，8+4有进位，进位值为<code>10</code></li>\n<li>将前两步的结果相加：<code>12+10</code>的结果为<code>22</code>，也就是8+14的结果。（重复1、2步骤）</li>\n</ol>\n<p>可以看出，十进制进行加法运算时，最终的结果 = 无进位加法 + 进位值。这个结论同样适用于二进制运算，同样以<code>8+14</code>即<code>1000 + 1110</code>为例：</p>\n<ol>\n<li>只做各位相加不进位，此时结果为<code>0110</code></li>\n<li>做进位，两者相加进位值为<code>10000</code></li>\n<li>将两步结果相加：<code>0110 + 10000 = 10110</code>转化为十进制为<code>22</code>（重复1、2步骤）</li>\n</ol>\n<p>我们来观察一下二进制运算1、2步的结果，<code>0110</code>是<code>1000 \b^ 1110</code>的结果，<code>10000</code>是<code>1000 \b&amp; 1110</code>后左移一位的结果。这样我们只需要重复1、2步骤，直到没有进位为止，便可得到最终结果。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 方法1: while循环\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        while (num2 != 0)\n        {\n            int temp = num1 ^ num2;\n            num2 = (num1 &amp; num2) &lt;&lt; 1;\n            num1 = temp;\n        }\n        return num1;\n    }\n};\n// 方法2: 递归实现\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        // 最终的结果 = 无进位加法 + 进位值\n        return num2 ? Add(num1 ^ num2, (num1 &amp; num2) &lt;&lt; 1) : num1;\n    }\n};</code></pre>\n"},{"title":"把字符串转换成整数","date":"2019-04-21T09:51:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190421-3.jpg","summary":"剑指 offer：49、把字符串转换成整数","_content":"### [49\\. 把字符串转换成整数](https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。\n\n#### 输入描述\n> 输入一个字符串,包括数字字母符号,可以为空\n\n#### 输出描述\n> 如果是合法的数值表达则返回该数字，否则返回0\n\n#### 示例\n> 输入\n>> +2147483647\n>>\n>> 1a33\n>\n> 输出\n>> 2147483647\n>>\n>> 0\n\n### 解题思路：\n本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：\n+ 字符串是否为空\n+ 字符串对正负号进行处理\n+ 输入值是否合法\n+ 返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int StrToInt(string str) {\n        int len = str.size();\n        // 判断字符串是否为空\n        if(len == 0)\n            return 0;\n        int begin = 0, isNegative = 0;\n        // 处理'+', '-'\n        if(str[0] == '+')\n        {\n            isNegative = 0;\n            begin = 1;\n        }\n        else if(str[0] == '-')\n        {\n            isNegative = 1;\n            begin = 1;\n        }\n        int position = 1;\n        // 以long long 类型存储转换结果\n        long long res = 0;\n        for(int i = len -1; i >= begin; --i)\n        {\n            if(str[i] < '0' || str[i] > '9')\n                return 0;\n            res += (str[i] - '0') * position;\n            position *= 10;\n        }\n        // 判断是否溢出\n        if((isNegative == 0 && res > 0x7fffffff) || (isNegative == 1 && res > 0x80000000))\n            return 0;\n        else\n            res = isNegative ? -res : res;\n        return res;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/49_StrToInt.md","raw":"---\ntitle: 把字符串转换成整数\ndate: 2019-04-21 17:51:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190421-3.jpg\nsummary: 剑指 offer：49、把字符串转换成整数\ncategories: 剑指 offer\ntags:\n  - 字符串\n---\n### [49\\. 把字符串转换成整数](https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。\n\n#### 输入描述\n> 输入一个字符串,包括数字字母符号,可以为空\n\n#### 输出描述\n> 如果是合法的数值表达则返回该数字，否则返回0\n\n#### 示例\n> 输入\n>> +2147483647\n>>\n>> 1a33\n>\n> 输出\n>> 2147483647\n>>\n>> 0\n\n### 解题思路：\n本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：\n+ 字符串是否为空\n+ 字符串对正负号进行处理\n+ 输入值是否合法\n+ 返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)\n\n### 解答：\n\n```cpp\nclass Solution {\npublic:\n    int StrToInt(string str) {\n        int len = str.size();\n        // 判断字符串是否为空\n        if(len == 0)\n            return 0;\n        int begin = 0, isNegative = 0;\n        // 处理'+', '-'\n        if(str[0] == '+')\n        {\n            isNegative = 0;\n            begin = 1;\n        }\n        else if(str[0] == '-')\n        {\n            isNegative = 1;\n            begin = 1;\n        }\n        int position = 1;\n        // 以long long 类型存储转换结果\n        long long res = 0;\n        for(int i = len -1; i >= begin; --i)\n        {\n            if(str[i] < '0' || str[i] > '9')\n                return 0;\n            res += (str[i] - '0') * position;\n            position *= 10;\n        }\n        // 判断是否溢出\n        if((isNegative == 0 && res > 0x7fffffff) || (isNegative == 1 && res > 0x80000000))\n            return 0;\n        else\n            res = isNegative ? -res : res;\n        return res;\n    }\n};\n```","slug":"Sword_refers_to_Offer/49_StrToInt","published":1,"updated":"2019-07-14T03:36:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjg005imetfii3rbt0r","content":"<h3 id=\"49-把字符串转换成整数\"><a href=\"#49-把字符串转换成整数\" class=\"headerlink\" title=\"49. 把字符串转换成整数\"></a><a href=\"https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">49. 把字符串转换成整数</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p>\n<h4 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h4><blockquote>\n<p>输入一个字符串,包括数字字母符号,可以为空</p>\n</blockquote>\n<h4 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h4><blockquote>\n<p>如果是合法的数值表达则返回该数字，否则返回0</p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><blockquote>\n<p>输入</p>\n<blockquote>\n<p>+2147483647</p>\n<p>1a33</p>\n</blockquote>\n<p>输出</p>\n<blockquote>\n<p>2147483647</p>\n<p>0</p>\n</blockquote>\n</blockquote>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：</p>\n<ul>\n<li>字符串是否为空</li>\n<li>字符串对正负号进行处理</li>\n<li>输入值是否合法</li>\n<li>返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">StrToInt</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 判断字符串是否为空</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isNegative <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 处理'+', '-'</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            isNegative <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            begin <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            isNegative <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            begin <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 以long long 类型存储转换结果</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> begin<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> position<span class=\"token punctuation\">;</span>\n            position <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 判断是否溢出</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>isNegative <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> res <span class=\"token operator\">></span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>isNegative <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> res <span class=\"token operator\">></span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            res <span class=\"token operator\">=</span> isNegative <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>res <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"49-把字符串转换成整数\"><a href=\"#49-把字符串转换成整数\" class=\"headerlink\" title=\"49. 把字符串转换成整数\"></a><a href=\"https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">49. 把字符串转换成整数</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p>\n<h4 id=\"输入描述\"><a href=\"#输入描述\" class=\"headerlink\" title=\"输入描述\"></a>输入描述</h4><blockquote>\n<p>输入一个字符串,包括数字字母符号,可以为空</p>\n</blockquote>\n<h4 id=\"输出描述\"><a href=\"#输出描述\" class=\"headerlink\" title=\"输出描述\"></a>输出描述</h4><blockquote>\n<p>如果是合法的数值表达则返回该数字，否则返回0</p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><blockquote>\n<p>输入</p>\n<blockquote>\n<p>+2147483647</p>\n<p>1a33</p>\n</blockquote>\n<p>输出</p>\n<blockquote>\n<p>2147483647</p>\n<p>0</p>\n</blockquote>\n</blockquote>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><p>本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：</p>\n<ul>\n<li>字符串是否为空</li>\n<li>字符串对正负号进行处理</li>\n<li>输入值是否合法</li>\n<li>返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)</li>\n</ul>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">class Solution {\npublic:\n    int StrToInt(string str) {\n        int len = str.size();\n        // 判断字符串是否为空\n        if(len == 0)\n            return 0;\n        int begin = 0, isNegative = 0;\n        // 处理&#39;+&#39;, &#39;-&#39;\n        if(str[0] == &#39;+&#39;)\n        {\n            isNegative = 0;\n            begin = 1;\n        }\n        else if(str[0] == &#39;-&#39;)\n        {\n            isNegative = 1;\n            begin = 1;\n        }\n        int position = 1;\n        // 以long long 类型存储转换结果\n        long long res = 0;\n        for(int i = len -1; i &gt;= begin; --i)\n        {\n            if(str[i] &lt; &#39;0&#39; || str[i] &gt; &#39;9&#39;)\n                return 0;\n            res += (str[i] - &#39;0&#39;) * position;\n            position *= 10;\n        }\n        // 判断是否溢出\n        if((isNegative == 0 &amp;&amp; res &gt; 0x7fffffff) || (isNegative == 1 &amp;&amp; res &gt; 0x80000000))\n            return 0;\n        else\n            res = isNegative ? -res : res;\n        return res;\n    }\n};</code></pre>\n"},{"title":"构建乘积数组","date":"2019-04-04T02:50:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190404-2.jpg","summary":"剑指 offer：51、构建乘积数组","_content":"### [51\\. 构建乘积数组](https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给定一个数组`A[0,1,...,n-1]`,请构建一个数组`B[0,1,...,n-1]`,其中B中的元素`B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]`。不能使用除法。\n\n### 解题思路：\n+ 思路1: 遍历数组，时间复杂度O(n)\n+ 思路2: \n\n| B<sub>i</sub>   | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n|-----------------|---------------|---------------|---------------|-----|-----------------|-----------------|\n| B<sub>0</sub>   | **1**         | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>1</sub>   | A<sub>0</sub> | **1**         | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>2</sub>   | A<sub>0</sub> | A<sub>1</sub> | **1**         | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>0</sub>   | ...           | ...           | ...           | ... | ...             | ...             |\n| B<sub>n-2</sub> | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | **1**           | A<sub>n-1</sub> |\n| B<sub>n-1</sub> | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | **1**           |\n\n通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    vector<int> multiply(const vector<int>& A) {\n        int len = A.size();\n        vector<int> B;\n        for(int i = 0; i < len; ++i)\n        {\n            int bi = 1;\n            for(int j = 0; j < len; ++j)\n            {\n                if(i == j)\n                    continue;\n                bi *= A[j]; \n            }\n            B.push_back(bi);\n        }\n        return B;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    vector<int> multiply(const vector<int>& A) {\n        int len = A.size();\n        vector<int> B(len);\n        if(len <= 0)\n            return B;\n        B[0] = 1;\n        // 计算下三角\n        for(int i = 1; i < len; ++i)\n        {\n            B[i] = B[i-1] * A[i-1];\n        }\n        int tmp = 1;\n        //计算上三角\n        for(int i = len - 2; i >= 0; --i)\n        {\n            tmp *= A[i+1];\n            B[i] *= tmp;\n        }\n        return B;\n    }\n};\n\n```","source":"_posts/Sword_refers_to_Offer/51_multiply.md","raw":"---\ntitle: 构建乘积数组\ndate: 2019-04-04 10:50:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190404-2.jpg\nsummary: 剑指 offer：51、构建乘积数组\ncategories: 剑指 offer\ntags:\n  - 数组\n---\n### [51\\. 构建乘积数组](https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给定一个数组`A[0,1,...,n-1]`,请构建一个数组`B[0,1,...,n-1]`,其中B中的元素`B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]`。不能使用除法。\n\n### 解题思路：\n+ 思路1: 遍历数组，时间复杂度O(n)\n+ 思路2: \n\n| B<sub>i</sub>   | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n|-----------------|---------------|---------------|---------------|-----|-----------------|-----------------|\n| B<sub>0</sub>   | **1**         | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>1</sub>   | A<sub>0</sub> | **1**         | A<sub>2</sub> | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>2</sub>   | A<sub>0</sub> | A<sub>1</sub> | **1**         | ... | A<sub>n-2</sub> | A<sub>n-1</sub> |\n| B<sub>0</sub>   | ...           | ...           | ...           | ... | ...             | ...             |\n| B<sub>n-2</sub> | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | **1**           | A<sub>n-1</sub> |\n| B<sub>n-1</sub> | A<sub>0</sub> | A<sub>1</sub> | A<sub>2</sub> | ... | A<sub>n-2</sub> | **1**           |\n\n通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。\n\n### 解答：\n\n```cpp\n// 解法1:\nclass Solution {\npublic:\n    vector<int> multiply(const vector<int>& A) {\n        int len = A.size();\n        vector<int> B;\n        for(int i = 0; i < len; ++i)\n        {\n            int bi = 1;\n            for(int j = 0; j < len; ++j)\n            {\n                if(i == j)\n                    continue;\n                bi *= A[j]; \n            }\n            B.push_back(bi);\n        }\n        return B;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    vector<int> multiply(const vector<int>& A) {\n        int len = A.size();\n        vector<int> B(len);\n        if(len <= 0)\n            return B;\n        B[0] = 1;\n        // 计算下三角\n        for(int i = 1; i < len; ++i)\n        {\n            B[i] = B[i-1] * A[i-1];\n        }\n        int tmp = 1;\n        //计算上三角\n        for(int i = len - 2; i >= 0; --i)\n        {\n            tmp *= A[i+1];\n            B[i] *= tmp;\n        }\n        return B;\n    }\n};\n\n```","slug":"Sword_refers_to_Offer/51_multiply","published":1,"updated":"2019-07-14T03:36:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurji005mmetf4tblqtey","content":"<h3 id=\"51-构建乘积数组\"><a href=\"#51-构建乘积数组\" class=\"headerlink\" title=\"51. 构建乘积数组\"></a><a href=\"https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">51. 构建乘积数组</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个数组<code>A[0,1,...,n-1]</code>,请构建一个数组<code>B[0,1,...,n-1]</code>,其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 遍历数组，时间复杂度O(n)</li>\n<li>思路2: </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>B<sub>i</sub></th>\n<th>A<sub>0</sub></th>\n<th>A<sub>1</sub></th>\n<th>A<sub>2</sub></th>\n<th>…</th>\n<th>A<sub>n-2</sub></th>\n<th>A<sub>n-1</sub></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B<sub>0</sub></td>\n<td><strong>1</strong></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>1</sub></td>\n<td>A<sub>0</sub></td>\n<td><strong>1</strong></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>2</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td><strong>1</strong></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>0</sub></td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>B<sub>n-2</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td><strong>1</strong></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>n-1</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p>通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 解法1:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> B<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> bi <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                bi <span class=\"token operator\">*</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            B<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>bi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 解法2:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n        B<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 计算下三角</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//计算上三角</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            tmp <span class=\"token operator\">*</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"51-构建乘积数组\"><a href=\"#51-构建乘积数组\" class=\"headerlink\" title=\"51. 构建乘积数组\"></a><a href=\"https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">51. 构建乘积数组</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个数组<code>A[0,1,...,n-1]</code>,请构建一个数组<code>B[0,1,...,n-1]</code>,其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>思路1: 遍历数组，时间复杂度O(n)</li>\n<li>思路2: </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>B<sub>i</sub></th>\n<th>A<sub>0</sub></th>\n<th>A<sub>1</sub></th>\n<th>A<sub>2</sub></th>\n<th>…</th>\n<th>A<sub>n-2</sub></th>\n<th>A<sub>n-1</sub></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B<sub>0</sub></td>\n<td><strong>1</strong></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>1</sub></td>\n<td>A<sub>0</sub></td>\n<td><strong>1</strong></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>2</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td><strong>1</strong></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>0</sub></td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>B<sub>n-2</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td><strong>1</strong></td>\n<td>A<sub>n-1</sub></td>\n</tr>\n<tr>\n<td>B<sub>n-1</sub></td>\n<td>A<sub>0</sub></td>\n<td>A<sub>1</sub></td>\n<td>A<sub>2</sub></td>\n<td>…</td>\n<td>A<sub>n-2</sub></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p>通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。</p>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">// 解法1:\nclass Solution {\npublic:\n    vector&lt;int&gt; multiply(const vector&lt;int&gt;&amp; A) {\n        int len = A.size();\n        vector&lt;int&gt; B;\n        for(int i = 0; i &lt; len; ++i)\n        {\n            int bi = 1;\n            for(int j = 0; j &lt; len; ++j)\n            {\n                if(i == j)\n                    continue;\n                bi *= A[j]; \n            }\n            B.push_back(bi);\n        }\n        return B;\n    }\n};\n\n// 解法2:\nclass Solution {\npublic:\n    vector&lt;int&gt; multiply(const vector&lt;int&gt;&amp; A) {\n        int len = A.size();\n        vector&lt;int&gt; B(len);\n        if(len &lt;= 0)\n            return B;\n        B[0] = 1;\n        // 计算下三角\n        for(int i = 1; i &lt; len; ++i)\n        {\n            B[i] = B[i-1] * A[i-1];\n        }\n        int tmp = 1;\n        //计算上三角\n        for(int i = len - 2; i &gt;= 0; --i)\n        {\n            tmp *= A[i+1];\n            B[i] *= tmp;\n        }\n        return B;\n    }\n};\n</code></pre>\n"},{"title":"链表中环的入口节点","date":"2019-04-23T11:30:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190423-2.jpg","summary":"剑指 offer：55、链表中环的入口节点","_content":"### [55\\. 链表中环的入口节点](https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出nullptr。\n\n### 解题思路：\n+ 确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环\n+ 找到入口节点：\n    - 确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了`k`个节点，即环内节点数目为`k`\n    - 定义两个指针P1和P2指向链表的头节点，如果环内有`k`个节点，那么P1先在链表上向前移动`k`步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点\n\n异常处理：\n1. 输入为空指针\n2. 链表无环\n3. 链表只有一个节点\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(nullptr) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* MeetingNode(ListNode* pHead)\n    {\n        if(pHead == nullptr)\n            return nullptr;\n        ListNode* pSlow = pHead->next;\n        if(pSlow == nullptr)\n            return nullptr;\n        ListNode* pFast = pSlow->next;\n        while(pFast != nullptr && pSlow != nullptr)\n        {\n            if(pFast == pSlow)\n                return pFast;\n            // pSlow走一步\n            pSlow = pSlow->next;\n            // pFast走两步\n            pFast = pFast->next;\n            if(pFast != nullptr)\n                pFast = pFast->next;\n        }\n        // 不存在环\n        return nullptr;\n    }\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead)\n    {\n        ListNode* meetingNode = MeetingNode(pHead);\n        if(meetingNode == nullptr)\n            return nullptr;\n        // 获取环中节点的数目\n        int nodesInLoop = 1;\n        ListNode* pNode1 = meetingNode;\n        while(pNode1->next != meetingNode)\n        {\n            pNode1 = pNode1->next;\n            ++nodesInLoop;\n        }\n        // 先移动pNode1，次数为环中节点的数目\n        pNode1 = pHead;\n        for(int i = 0; i < nodesInLoop; ++i)\n            pNode1 = pNode1->next;\n        // 再移动pNode1和pNode2\n        ListNode* pNode2 = pHead;\n        while(pNode1 != pNode2)\n        {\n            pNode1 = pNode1->next;\n            pNode2 = pNode2->next;\n        }\n        return pNode1;\n    }\n};\n```","source":"_posts/Sword_refers_to_Offer/55_EntryNodeOfLoop.md","raw":"---\ntitle: 链表中环的入口节点\ndate: 2019-04-23 19:30:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190423-2.jpg\nsummary: 剑指 offer：55、链表中环的入口节点\ncategories: 剑指 offer\ntags:\n  - 链表\n  - 鲁棒性\n---\n### [55\\. 链表中环的入口节点](https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出nullptr。\n\n### 解题思路：\n+ 确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环\n+ 找到入口节点：\n    - 确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了`k`个节点，即环内节点数目为`k`\n    - 定义两个指针P1和P2指向链表的头节点，如果环内有`k`个节点，那么P1先在链表上向前移动`k`步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点\n\n异常处理：\n1. 输入为空指针\n2. 链表无环\n3. 链表只有一个节点\n\n### 解答：\n\n```cpp\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(nullptr) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* MeetingNode(ListNode* pHead)\n    {\n        if(pHead == nullptr)\n            return nullptr;\n        ListNode* pSlow = pHead->next;\n        if(pSlow == nullptr)\n            return nullptr;\n        ListNode* pFast = pSlow->next;\n        while(pFast != nullptr && pSlow != nullptr)\n        {\n            if(pFast == pSlow)\n                return pFast;\n            // pSlow走一步\n            pSlow = pSlow->next;\n            // pFast走两步\n            pFast = pFast->next;\n            if(pFast != nullptr)\n                pFast = pFast->next;\n        }\n        // 不存在环\n        return nullptr;\n    }\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead)\n    {\n        ListNode* meetingNode = MeetingNode(pHead);\n        if(meetingNode == nullptr)\n            return nullptr;\n        // 获取环中节点的数目\n        int nodesInLoop = 1;\n        ListNode* pNode1 = meetingNode;\n        while(pNode1->next != meetingNode)\n        {\n            pNode1 = pNode1->next;\n            ++nodesInLoop;\n        }\n        // 先移动pNode1，次数为环中节点的数目\n        pNode1 = pHead;\n        for(int i = 0; i < nodesInLoop; ++i)\n            pNode1 = pNode1->next;\n        // 再移动pNode1和pNode2\n        ListNode* pNode2 = pHead;\n        while(pNode1 != pNode2)\n        {\n            pNode1 = pNode1->next;\n            pNode2 = pNode2->next;\n        }\n        return pNode1;\n    }\n};\n```","slug":"Sword_refers_to_Offer/55_EntryNodeOfLoop","published":1,"updated":"2020-02-01T14:05:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjj005pmetf4tar836u","content":"<h3 id=\"55-链表中环的入口节点\"><a href=\"#55-链表中环的入口节点\" class=\"headerlink\" title=\"55. 链表中环的入口节点\"></a><a href=\"https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">55. 链表中环的入口节点</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出nullptr。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环</li>\n<li>找到入口节点：<ul>\n<li>确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了<code>k</code>个节点，即环内节点数目为<code>k</code></li>\n<li>定义两个指针P1和P2指向链表的头节点，如果环内有<code>k</code>个节点，那么P1先在链表上向前移动<code>k</code>步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点</li>\n</ul>\n</li>\n</ul>\n<p>异常处理：</p>\n<ol>\n<li>输入为空指针</li>\n<li>链表无环</li>\n<li>链表只有一个节点</li>\n</ol>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(nullptr) {\n    }\n};\n*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">MeetingNode</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pSlow <span class=\"token operator\">=</span> pHead<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pSlow <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pFast <span class=\"token operator\">=</span> pSlow<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pFast <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> pSlow <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pFast <span class=\"token operator\">==</span> pSlow<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> pFast<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// pSlow走一步</span>\n            pSlow <span class=\"token operator\">=</span> pSlow<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// pFast走两步</span>\n            pFast <span class=\"token operator\">=</span> pFast<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pFast <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n                pFast <span class=\"token operator\">=</span> pFast<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 不存在环</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">EntryNodeOfLoop</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ListNode<span class=\"token operator\">*</span> meetingNode <span class=\"token operator\">=</span> <span class=\"token function\">MeetingNode</span><span class=\"token punctuation\">(</span>pHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>meetingNode <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取环中节点的数目</span>\n        <span class=\"token keyword\">int</span> nodesInLoop <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> pNode1 <span class=\"token operator\">=</span> meetingNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pNode1<span class=\"token operator\">-</span><span class=\"token operator\">></span>next <span class=\"token operator\">!=</span> meetingNode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pNode1 <span class=\"token operator\">=</span> pNode1<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>nodesInLoop<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 先移动pNode1，次数为环中节点的数目</span>\n        pNode1 <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodesInLoop<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            pNode1 <span class=\"token operator\">=</span> pNode1<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 再移动pNode1和pNode2</span>\n        ListNode<span class=\"token operator\">*</span> pNode2 <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pNode1 <span class=\"token operator\">!=</span> pNode2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pNode1 <span class=\"token operator\">=</span> pNode1<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n            pNode2 <span class=\"token operator\">=</span> pNode2<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pNode1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"55-链表中环的入口节点\"><a href=\"#55-链表中环的入口节点\" class=\"headerlink\" title=\"55. 链表中环的入口节点\"></a><a href=\"https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"noopener\">55. 链表中环的入口节点</a></h3><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出nullptr。</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><ul>\n<li>确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环</li>\n<li>找到入口节点：<ul>\n<li>确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了<code>k</code>个节点，即环内节点数目为<code>k</code></li>\n<li>定义两个指针P1和P2指向链表的头节点，如果环内有<code>k</code>个节点，那么P1先在链表上向前移动<code>k</code>步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点</li>\n</ul>\n</li>\n</ul>\n<p>异常处理：</p>\n<ol>\n<li>输入为空指针</li>\n<li>链表无环</li>\n<li>链表只有一个节点</li>\n</ol>\n<h3 id=\"解答：\"><a href=\"#解答：\" class=\"headerlink\" title=\"解答：\"></a>解答：</h3><pre><code class=\"cpp\">/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(nullptr) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* MeetingNode(ListNode* pHead)\n    {\n        if(pHead == nullptr)\n            return nullptr;\n        ListNode* pSlow = pHead-&gt;next;\n        if(pSlow == nullptr)\n            return nullptr;\n        ListNode* pFast = pSlow-&gt;next;\n        while(pFast != nullptr &amp;&amp; pSlow != nullptr)\n        {\n            if(pFast == pSlow)\n                return pFast;\n            // pSlow走一步\n            pSlow = pSlow-&gt;next;\n            // pFast走两步\n            pFast = pFast-&gt;next;\n            if(pFast != nullptr)\n                pFast = pFast-&gt;next;\n        }\n        // 不存在环\n        return nullptr;\n    }\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead)\n    {\n        ListNode* meetingNode = MeetingNode(pHead);\n        if(meetingNode == nullptr)\n            return nullptr;\n        // 获取环中节点的数目\n        int nodesInLoop = 1;\n        ListNode* pNode1 = meetingNode;\n        while(pNode1-&gt;next != meetingNode)\n        {\n            pNode1 = pNode1-&gt;next;\n            ++nodesInLoop;\n        }\n        // 先移动pNode1，次数为环中节点的数目\n        pNode1 = pHead;\n        for(int i = 0; i &lt; nodesInLoop; ++i)\n            pNode1 = pNode1-&gt;next;\n        // 再移动pNode1和pNode2\n        ListNode* pNode2 = pHead;\n        while(pNode1 != pNode2)\n        {\n            pNode1 = pNode1-&gt;next;\n            pNode2 = pNode2-&gt;next;\n        }\n        return pNode1;\n    }\n};</code></pre>\n"},{"title":"剑指 offer 刷题笔记链接汇总","date":"2019-04-03T06:20:00.000Z","toc":false,"top":true,"img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190403-3.jpg","summary":"剑指 offer 刷题笔记链接汇总","_content":"\n[1、二维数组中的查找](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/)\n\n[2、替换空格](http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/)\n\n[3、从尾到头打印链表](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/)\n\n[4、重建二叉树]\n\n[5、用两个栈实现队列](http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/)\n\n[6、旋转数组的最小数字]\n\n[7、斐波那契数列](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/)\n\n[8、跳台阶](http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/)\n\n[9、变态跳台阶](http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/)\n\n[10、矩形覆盖](http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/)\n\n[11、二进制中1的个数](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/)\n\n[12、数值的整数次方](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/)\n\n[13、调整数组顺序使奇数位于偶数前面]\n\n[14、链表中倒数第k个节点](http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/)\n\n[15、反转链表](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/)\n\n[16、合并两个排序的链表]\n\n[17、树的子结构]\n\n[18、二叉树的镜像](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/)\n\n[19、顺时针打印矩阵]\n\n[20、包含min函数的栈](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/20_min/)\n\n[21、栈的压入、弹出序列]\n\n[22、从上往下打印二叉树]\n\n[23、二叉搜索树的后序遍历序列]\n\n[24、二叉树中和为某一值的路径]\n\n[25、复杂链表的复制]\n\n[26、二叉搜索树与双向链表]\n\n[27、字符串的排列]\n\n[28、数组中出现次数超过一半的数字]\n\n[29、最小的k个数]\n\n[30、连续子数组的最大和](http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/)\n\n[31、整数中1出现的次数（从1到n整数中1出现的次数）]\n\n[32、把数组排成最小的数]\n\n[33、丑数]\n\n[34、第一个只出现一次的字符]\n\n[35、数组中的逆序对]\n\n[36、两个链表的第一个公共结点]\n\n[37、数字在排序数组中出现的次数]\n\n[38、二叉树的深度](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/)\n\n[39、平衡二叉树](http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/)\n\n[40、数组中只出现一次的数字]\n\n[41、和为S的连续正数序列]\n\n[42、和为S的两个数字]\n\n[43、左旋转字符串](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/)\n\n[44、翻转单词顺序列]\n\n[45、扑克牌顺子]\n\n[46、孩子们的游戏（圆圈中最后剩下的数）]\n\n[47、求1+2+3+…+n](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/)\n\n[48、不用加减乘除做加法](http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/)\n\n[49、把字符串转换成整数](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/)\n\n[50、数组中重复的数字]\n\n[51、构建乘积数组](http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/)\n\n[52、正则表达式匹配]\n\n[53、表示数值的字符串]\n\n[54、字符流中第一个不重复的字符]\n\n[55、链表中环的入口节点](http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/)\n\n[56、删除链表中重复的节点]\n\n[57、二叉树的下一个节点]\n\n[58、对称的二叉树]\n\n[59、按之字形顺序打印二叉树]\n\n[60、把二叉树打印成多行]\n\n[61、序列化二叉树]\n\n[62、二叉搜索树的第k个节点]\n\n[63、数据流中的中位数]\n\n[64、滑动窗口的最大值]\n\n[65、矩阵中的路径]\n\n[66、机器人的运动范围]\n","source":"_posts/Sword_refers_to_Offer/Sword_refers_to_Offer.md","raw":"---\ntitle: 剑指 offer 刷题笔记链接汇总\ndate: 2019-04-03 14:20:00\ntoc: false\ntop: true\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190403-3.jpg\nsummary: 剑指 offer 刷题笔记链接汇总\ncategories: 剑指 offer\ntags:\n  - 索引\n---\n\n[1、二维数组中的查找](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/)\n\n[2、替换空格](http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/)\n\n[3、从尾到头打印链表](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/)\n\n[4、重建二叉树]\n\n[5、用两个栈实现队列](http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/)\n\n[6、旋转数组的最小数字]\n\n[7、斐波那契数列](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/)\n\n[8、跳台阶](http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/)\n\n[9、变态跳台阶](http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/)\n\n[10、矩形覆盖](http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/)\n\n[11、二进制中1的个数](http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/)\n\n[12、数值的整数次方](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/)\n\n[13、调整数组顺序使奇数位于偶数前面]\n\n[14、链表中倒数第k个节点](http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/)\n\n[15、反转链表](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/)\n\n[16、合并两个排序的链表]\n\n[17、树的子结构]\n\n[18、二叉树的镜像](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/)\n\n[19、顺时针打印矩阵]\n\n[20、包含min函数的栈](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/20_min/)\n\n[21、栈的压入、弹出序列]\n\n[22、从上往下打印二叉树]\n\n[23、二叉搜索树的后序遍历序列]\n\n[24、二叉树中和为某一值的路径]\n\n[25、复杂链表的复制]\n\n[26、二叉搜索树与双向链表]\n\n[27、字符串的排列]\n\n[28、数组中出现次数超过一半的数字]\n\n[29、最小的k个数]\n\n[30、连续子数组的最大和](http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/)\n\n[31、整数中1出现的次数（从1到n整数中1出现的次数）]\n\n[32、把数组排成最小的数]\n\n[33、丑数]\n\n[34、第一个只出现一次的字符]\n\n[35、数组中的逆序对]\n\n[36、两个链表的第一个公共结点]\n\n[37、数字在排序数组中出现的次数]\n\n[38、二叉树的深度](http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/)\n\n[39、平衡二叉树](http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/)\n\n[40、数组中只出现一次的数字]\n\n[41、和为S的连续正数序列]\n\n[42、和为S的两个数字]\n\n[43、左旋转字符串](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/)\n\n[44、翻转单词顺序列]\n\n[45、扑克牌顺子]\n\n[46、孩子们的游戏（圆圈中最后剩下的数）]\n\n[47、求1+2+3+…+n](http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/)\n\n[48、不用加减乘除做加法](http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/)\n\n[49、把字符串转换成整数](http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/)\n\n[50、数组中重复的数字]\n\n[51、构建乘积数组](http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/)\n\n[52、正则表达式匹配]\n\n[53、表示数值的字符串]\n\n[54、字符流中第一个不重复的字符]\n\n[55、链表中环的入口节点](http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/)\n\n[56、删除链表中重复的节点]\n\n[57、二叉树的下一个节点]\n\n[58、对称的二叉树]\n\n[59、按之字形顺序打印二叉树]\n\n[60、把二叉树打印成多行]\n\n[61、序列化二叉树]\n\n[62、二叉搜索树的第k个节点]\n\n[63、数据流中的中位数]\n\n[64、滑动窗口的最大值]\n\n[65、矩阵中的路径]\n\n[66、机器人的运动范围]\n","slug":"Sword_refers_to_Offer/Sword_refers_to_Offer","published":1,"updated":"2020-02-01T15:12:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurjl005tmetfctk9qg0x","content":"<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/\">1、二维数组中的查找</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/\">2、替换空格</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/\">3、从尾到头打印链表</a></p>\n<p>[4、重建二叉树]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/\">5、用两个栈实现队列</a></p>\n<p>[6、旋转数组的最小数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/\">7、斐波那契数列</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/\">8、跳台阶</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/\">9、变态跳台阶</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/\">10、矩形覆盖</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/\">11、二进制中1的个数</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/\">12、数值的整数次方</a></p>\n<p>[13、调整数组顺序使奇数位于偶数前面]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/\">14、链表中倒数第k个节点</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/\">15、反转链表</a></p>\n<p>[16、合并两个排序的链表]</p>\n<p>[17、树的子结构]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/\">18、二叉树的镜像</a></p>\n<p>[19、顺时针打印矩阵]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/20_min/\">20、包含min函数的栈</a></p>\n<p>[21、栈的压入、弹出序列]</p>\n<p>[22、从上往下打印二叉树]</p>\n<p>[23、二叉搜索树的后序遍历序列]</p>\n<p>[24、二叉树中和为某一值的路径]</p>\n<p>[25、复杂链表的复制]</p>\n<p>[26、二叉搜索树与双向链表]</p>\n<p>[27、字符串的排列]</p>\n<p>[28、数组中出现次数超过一半的数字]</p>\n<p>[29、最小的k个数]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/\">30、连续子数组的最大和</a></p>\n<p>[31、整数中1出现的次数（从1到n整数中1出现的次数）]</p>\n<p>[32、把数组排成最小的数]</p>\n<p>[33、丑数]</p>\n<p>[34、第一个只出现一次的字符]</p>\n<p>[35、数组中的逆序对]</p>\n<p>[36、两个链表的第一个公共结点]</p>\n<p>[37、数字在排序数组中出现的次数]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/\">38、二叉树的深度</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/\">39、平衡二叉树</a></p>\n<p>[40、数组中只出现一次的数字]</p>\n<p>[41、和为S的连续正数序列]</p>\n<p>[42、和为S的两个数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/\">43、左旋转字符串</a></p>\n<p>[44、翻转单词顺序列]</p>\n<p>[45、扑克牌顺子]</p>\n<p>[46、孩子们的游戏（圆圈中最后剩下的数）]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/\">47、求1+2+3+…+n</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/\">48、不用加减乘除做加法</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/\">49、把字符串转换成整数</a></p>\n<p>[50、数组中重复的数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/\">51、构建乘积数组</a></p>\n<p>[52、正则表达式匹配]</p>\n<p>[53、表示数值的字符串]</p>\n<p>[54、字符流中第一个不重复的字符]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/\">55、链表中环的入口节点</a></p>\n<p>[56、删除链表中重复的节点]</p>\n<p>[57、二叉树的下一个节点]</p>\n<p>[58、对称的二叉树]</p>\n<p>[59、按之字形顺序打印二叉树]</p>\n<p>[60、把二叉树打印成多行]</p>\n<p>[61、序列化二叉树]</p>\n<p>[62、二叉搜索树的第k个节点]</p>\n<p>[63、数据流中的中位数]</p>\n<p>[64、滑动窗口的最大值]</p>\n<p>[65、矩阵中的路径]</p>\n<p>[66、机器人的运动范围]</p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/\">1、二维数组中的查找</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/\">2、替换空格</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/\">3、从尾到头打印链表</a></p>\n<p>[4、重建二叉树]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/\">5、用两个栈实现队列</a></p>\n<p>[6、旋转数组的最小数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/\">7、斐波那契数列</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/\">8、跳台阶</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/\">9、变态跳台阶</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/\">10、矩形覆盖</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/\">11、二进制中1的个数</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/\">12、数值的整数次方</a></p>\n<p>[13、调整数组顺序使奇数位于偶数前面]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/\">14、链表中倒数第k个节点</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/\">15、反转链表</a></p>\n<p>[16、合并两个排序的链表]</p>\n<p>[17、树的子结构]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/\">18、二叉树的镜像</a></p>\n<p>[19、顺时针打印矩阵]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/20_min/\">20、包含min函数的栈</a></p>\n<p>[21、栈的压入、弹出序列]</p>\n<p>[22、从上往下打印二叉树]</p>\n<p>[23、二叉搜索树的后序遍历序列]</p>\n<p>[24、二叉树中和为某一值的路径]</p>\n<p>[25、复杂链表的复制]</p>\n<p>[26、二叉搜索树与双向链表]</p>\n<p>[27、字符串的排列]</p>\n<p>[28、数组中出现次数超过一半的数字]</p>\n<p>[29、最小的k个数]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/\">30、连续子数组的最大和</a></p>\n<p>[31、整数中1出现的次数（从1到n整数中1出现的次数）]</p>\n<p>[32、把数组排成最小的数]</p>\n<p>[33、丑数]</p>\n<p>[34、第一个只出现一次的字符]</p>\n<p>[35、数组中的逆序对]</p>\n<p>[36、两个链表的第一个公共结点]</p>\n<p>[37、数字在排序数组中出现的次数]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/\">38、二叉树的深度</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/\">39、平衡二叉树</a></p>\n<p>[40、数组中只出现一次的数字]</p>\n<p>[41、和为S的连续正数序列]</p>\n<p>[42、和为S的两个数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/\">43、左旋转字符串</a></p>\n<p>[44、翻转单词顺序列]</p>\n<p>[45、扑克牌顺子]</p>\n<p>[46、孩子们的游戏（圆圈中最后剩下的数）]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/\">47、求1+2+3+…+n</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/\">48、不用加减乘除做加法</a></p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/\">49、把字符串转换成整数</a></p>\n<p>[50、数组中重复的数字]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/\">51、构建乘积数组</a></p>\n<p>[52、正则表达式匹配]</p>\n<p>[53、表示数值的字符串]</p>\n<p>[54、字符流中第一个不重复的字符]</p>\n<p><a href=\"http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/\">55、链表中环的入口节点</a></p>\n<p>[56、删除链表中重复的节点]</p>\n<p>[57、二叉树的下一个节点]</p>\n<p>[58、对称的二叉树]</p>\n<p>[59、按之字形顺序打印二叉树]</p>\n<p>[60、把二叉树打印成多行]</p>\n<p>[61、序列化二叉树]</p>\n<p>[62、二叉搜索树的第k个节点]</p>\n<p>[63、数据流中的中位数]</p>\n<p>[64、滑动窗口的最大值]</p>\n<p>[65、矩阵中的路径]</p>\n<p>[66、机器人的运动范围]</p>\n"},{"title":"Numpy基础","date":"2019-08-04T14:30:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20190804-1.jpg","summary":"Numpy基础","_content":"## 安装Numpy\n```bash\npip install numpy\n```\n\n## 导入Numpy\n```python\n# 导入numpy\nimport numpy as np\n```\n## Numpy属性\n+ ndim：纬度\n+ shape：行数和列数\n+ size：元素个数\n\n## Numpy创建array\n\n### 关键字\n+ array：创建数组\n+ dtype：指定数据类型\n+ zeros：创建数据全为0\n+ ones：创建数据全为1\n+ empty：创建数据接近于0\n+ arange：按指定范围创建数据\n+ linspace：创建线段\n\n### 创建数组\n1. 指定数组\n```python\n# 2维矩阵，2行3列\na = np.array([[1, 2, 3],[2, 3, 4]])\n```\n2. 全零数组\n```python\n# 2维矩阵，2行3列\na = np.zeros((3,4)) # 数据全为0，3行4列\n'''\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n'''\n```\n3. 全一数组\n```python\n# 2维矩阵，2行3列\na = np.ones((3,4), dtype = np.int) # 数据全为1，3行4列，数据类型为int\n'''\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n'''\n```\n4. 全空数组\n```python\n# 2维矩阵，2行3列\na = np.empty((3,4)) # 数据为empty，接近于0，3行4列\n'''\n[[ 1.72723371e-077 -4.32976793e-311  2.96439388e-323  0.00000000e+000]\n [ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000]\n [ 0.00000000e+000  0.00000000e+000  0.00000000e+000  8.34402697e-309]]\n'''\n```\n5. 创建连续数组\n```python\n# 2维矩阵，2行3列\na = np.arange(10, 20, 2) # 10-19的数据，2步长\n'''\n[10 12 14 16 18]\n'''\n```\n6. 用`reshape`改变数组形状\n```python\n# 2维矩阵，2行3列\na = np.arange(12).reshape((3, 4)) # 10-19的数据，2步长\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\n```\n7. 创建线段型数组\n```python\n# 2维矩阵，2行3列\na = np.linspace(1, 10, 20).reshape(5, 4) # 10-19的数据，2步长\n'''\n[[ 1.          1.47368421  1.94736842  2.42105263]\n [ 2.89473684  3.36842105  3.84210526  4.31578947]\n [ 4.78947368  5.26315789  5.73684211  6.21052632]\n [ 6.68421053  7.15789474  7.63157895  8.10526316]\n [ 8.57894737  9.05263158  9.52631579 10.        ]]\n'''\n```\n\n## Numpy基础运算\n```python\na = np.array([10, 20, 30, 40])\nb = np.arange(4)\n```\n\n### 加减乘除\n```python\nc = a + b # array([10, 21, 32, 43])\nc = a - b # array([10, 19, 28, 37])\nc = a * b # array([0, 20, 60, 120])\nc = a / b # array([inf, 20, 15, 13.33333333])\n```\n\n### 函数运算\n```python\nc = b ** 2 # 乘方运算 array([0, 1, 4, 9])\nc = 10 * np.sin(a) # sin函数 array([-5.44021111, 9.12945251, -9.88031624, 7.4511316 ])\nprint(b < 3) # 逻辑运算 array([ True, True, True, False])\n\n```\n\n### 矩阵运算\n```python\n# 符合数学矩阵运算\na = np.array([[1, 1], [0, 1]])\nb = np.array([[0, 1], [2, 3]])\nc_dot = np.dot(a, b)\n# 另一种写法\nc_dot_2 = a.dot(b)\nprint(c_dot)\n'''\n[[2 4]\n [2 3]]\n'''\n```\n\n### sum、min、max\n`sum()`对数组所有元素求和，`min()`寻找数组最小值，`max()`寻找数组最大值\n```python\na = np.arange(12).reshape((3, 4))\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\nprint(np.sum(a)) # 数组所有元素求和\nprint(np.min(a)) # 数组中的最小元素\nprint(np.max(a)) # 数组中的最大元素\n'''\n66\n0\n11\n'''\n```\n如果要对行或列单独操作，则可以为`axis`参数赋值，当`axis = 1`时，将会以行作为查找单元，`axis = 0`时，将会以列作为查找单元\n```python\nprint(np.sum(a, axis = 1))\nprint(np.min(a, axis = 1))\nprint(np.max(a, axis = 1))\n'''\n[ 6 22 38]\n[0 4 8]\n[ 3  7 11]\n'''\nprint(np.sum(a, axis = 0))\nprint(np.min(a, axis = 0))\nprint(np.max(a, axis = 0))\n'''\n[12 15 18 21]\n[0 1 2 3]\n[ 8  9 10 11]\n'''\n```\n\n### 其他运算\n1. `argmin()`返回矩阵中最小元素的索引，`argmax()`返回矩阵中最大元素的索引\n    ```python\n    a = np.arange(12).reshape((3, 4))\n    print(a)\n    print(np.argmin(a)) # 最小元素的索引\n    print(np.argmax(a)) # 最大元素的索引\n    '''\n    [[ 0  1  2  3]\n    [ 4  5  6  7]\n    [ 8  9 10 11]]\n    0\n    11\n    '''\n    ```\n2. `mean()`和`average()`返回矩阵的平均值\n    ```python\n    print(np.mean(a)) # 5.5\n    print(a.mean()) # 另一种写法\n    print(np.average(a)) # 5.5\n    ```\n3. `cumsum()`累加函数\n   ```python\n   # cumsum()函数生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和\n   print(np.cumsum(a)) # [ 0  1  3  6 10 15 21 28 36 45 55 66]\n   ```\n4. `diff()`累差函数\n   ```python\n   # 该函数计算的是每一行中后一项与前一项之差，所以3x4的矩阵通过函数计算后得到3x3的矩阵\n   print(np.diff(a))\n   '''\n   [[1 1 1]\n    [1 1 1]\n    [1 1 1]]\n   '''\n   ```\n5. 矩阵转置\n   ```python\n   print(np.transpose(a))\n   print(a.T)\n   '''\n   [[ 0  4  8]\n    [ 1  5  9]\n    [ 2  6 10]\n    [ 3  7 11]]\n   '''\n   ```\n\n## Numpy索引\n\n### 一维索引\n```python\n# 和数组索引类似\na = np.arange(12)\nprint(a)\nprint(a[3])\n'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n3\n'''\n\nb = np.arange(12).reshape(3,4)\nprint(b)\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\nprint(b[1]) # 打印矩阵第1行（从0起算）\n'''\n[4 5 6 7]\n'''\n```\n### 二维索引\n```python\n# 和python二维list相似\nb = np.arange(12).reshape(3,4)\nprint(b[1][1])\nprint(b[1, 1]) # 另一种写法\nprint(b[1, 1:3]) # 同时支持切片处理\n'''\n5\n5\n[5 6]\n'''\n```\n### 行列遍历以及迭代\n```python\na = np.arange(12).reshape(3, 4)\n# 按行遍历\nfor row in a:\n    print(a)\n'''\n[0 1 2 3]\n[4 5 6 7]\n[8 9 10 11]\n'''\n# 按列遍历：将矩阵转置后遍历行\nfor column in a.T:\n    print(column)\n'''\n[0 4 8]\n[1 5 9]\n[2 6 10]\n[3 7 11]\n'''\n# 迭代\n# flatten()是一个展开性质的函数，将多维矩阵展开为1行数列\nprint(a.flatten())\n'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n'''\n# flat迭代器\nfor item in a.flat:\n    print(item)\n'''\n1\n2\n...\n11\n'''\n```\n## array合并\n```python\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n# vstack()将两个array上下合并，列数必须相同\nc = np.vstack((a, b))\nprint(c)\n'''\n[[1 2 3]\n [4 5 6]]\n'''\n# hstack()将两个array左右合并，行数必须相同\nd = np.hstack((a, b))\nprint(d)\n'''\n[1 2 3 4 5 6]\n'''\n# 对于a序列来说，其并不是矩阵，需要通过新的方式进行转置\nprint(a[np.newaxis, :])\n'''\n[[1 2 3]]\n'''\nprint(a[:, np.newaxis])\n'''\n[[1]\n [2]\n [3]]\n'''\n# 合并多个矩阵或序列时，使用concatenate()更方便\na = np.array([1, 2, 3])[:, np.newaxis]\nb = np.array([4, 5, 6])[:, np.newaxis]\n# axis = 0纵向合并\nc = np.concatenate((a, b, b, a), axis = 0)\nprint(c)\n'''\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [4]\n [5]\n [6]\n [1]\n [2]\n [3]]\n'''\n# axis = 1横向合并\nd = np.concatenate((a, b, b, a), axis = 1)\nprint(d)\n'''\n[[1 4 4 1]\n [2 5 5 2]\n [3 6 6 3]]\n'''\n```\n## array分割\n### 纵向分割\n```python\n# 纵向分割，即按列分割，分割数量必须是列数的公约数（列数能整除分割数）\na = np.arange(12).reshape(3, 4)\n# 第二个参数为分割数量，第三个参数表示纵向分割(按列分割)\nprint(np.split(a, 2, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''\n```\n### 横向分割\n```python\n# 横向分割，即按行分割，分割数量必须是行数的公约数（行数能整除分割数）\n# 第二个参数为分割数量，第三个参数表示横向分割(按行分割)\nprint(np.split(a, 3, axis=0))\n'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''\n```\n### 不等量分割\n```python\n# 将4列矩阵不等量分割为3个矩阵\nprint(np.array_split(a, 3, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2],\n       [ 6],\n       [10]]), array([[ 3],\n       [ 7],\n       [11]])]\n'''\n```\n### 其他分割方式\n```python\n# 横向分割\nprint(np.vsplit(a, 3)) # 等同于print(np.split(a, 3, axis=0))\n'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''\n# 纵向分割\nprint(np.hsplit(a, 2)) # 等同于print(np.split(a, 2, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''\n```\n## 浅拷贝和深拷贝\n### 浅拷贝\n> 拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象不复制\n\n`=`的赋值方式带有关联性\n```python\na = np.arange(4)\nb = a\nc = b\n# a的值改变，b，c的值会同时改变\na[0] = 11\nprint(a, b, c)\n'''\n[11  1  2  3] [11  1  2  3] [11  1  2  3]\n'''\n```\n### 深拷贝\n> 外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象也复制。\n\n`copy()`的方式没有关联性\n```python\nd = a.copy()\nprint(d)\n# a的值改变，d的值不会改变\na[3] = 44\nprint(a)\nprint(d)\n'''\n[11  1  2  3]\n[11  1  2 44]\n[11  1  2  3]\n'''\n```","source":"_posts/Share/Numpy.md","raw":"---\ntitle: Numpy基础\ndate: 2019-08-04 22:30:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20190804-1.jpg\nsummary: Numpy基础\ncategories: 分享\ntags:\n  - Numpy\n---\n## 安装Numpy\n```bash\npip install numpy\n```\n\n## 导入Numpy\n```python\n# 导入numpy\nimport numpy as np\n```\n## Numpy属性\n+ ndim：纬度\n+ shape：行数和列数\n+ size：元素个数\n\n## Numpy创建array\n\n### 关键字\n+ array：创建数组\n+ dtype：指定数据类型\n+ zeros：创建数据全为0\n+ ones：创建数据全为1\n+ empty：创建数据接近于0\n+ arange：按指定范围创建数据\n+ linspace：创建线段\n\n### 创建数组\n1. 指定数组\n```python\n# 2维矩阵，2行3列\na = np.array([[1, 2, 3],[2, 3, 4]])\n```\n2. 全零数组\n```python\n# 2维矩阵，2行3列\na = np.zeros((3,4)) # 数据全为0，3行4列\n'''\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n'''\n```\n3. 全一数组\n```python\n# 2维矩阵，2行3列\na = np.ones((3,4), dtype = np.int) # 数据全为1，3行4列，数据类型为int\n'''\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n'''\n```\n4. 全空数组\n```python\n# 2维矩阵，2行3列\na = np.empty((3,4)) # 数据为empty，接近于0，3行4列\n'''\n[[ 1.72723371e-077 -4.32976793e-311  2.96439388e-323  0.00000000e+000]\n [ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000]\n [ 0.00000000e+000  0.00000000e+000  0.00000000e+000  8.34402697e-309]]\n'''\n```\n5. 创建连续数组\n```python\n# 2维矩阵，2行3列\na = np.arange(10, 20, 2) # 10-19的数据，2步长\n'''\n[10 12 14 16 18]\n'''\n```\n6. 用`reshape`改变数组形状\n```python\n# 2维矩阵，2行3列\na = np.arange(12).reshape((3, 4)) # 10-19的数据，2步长\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\n```\n7. 创建线段型数组\n```python\n# 2维矩阵，2行3列\na = np.linspace(1, 10, 20).reshape(5, 4) # 10-19的数据，2步长\n'''\n[[ 1.          1.47368421  1.94736842  2.42105263]\n [ 2.89473684  3.36842105  3.84210526  4.31578947]\n [ 4.78947368  5.26315789  5.73684211  6.21052632]\n [ 6.68421053  7.15789474  7.63157895  8.10526316]\n [ 8.57894737  9.05263158  9.52631579 10.        ]]\n'''\n```\n\n## Numpy基础运算\n```python\na = np.array([10, 20, 30, 40])\nb = np.arange(4)\n```\n\n### 加减乘除\n```python\nc = a + b # array([10, 21, 32, 43])\nc = a - b # array([10, 19, 28, 37])\nc = a * b # array([0, 20, 60, 120])\nc = a / b # array([inf, 20, 15, 13.33333333])\n```\n\n### 函数运算\n```python\nc = b ** 2 # 乘方运算 array([0, 1, 4, 9])\nc = 10 * np.sin(a) # sin函数 array([-5.44021111, 9.12945251, -9.88031624, 7.4511316 ])\nprint(b < 3) # 逻辑运算 array([ True, True, True, False])\n\n```\n\n### 矩阵运算\n```python\n# 符合数学矩阵运算\na = np.array([[1, 1], [0, 1]])\nb = np.array([[0, 1], [2, 3]])\nc_dot = np.dot(a, b)\n# 另一种写法\nc_dot_2 = a.dot(b)\nprint(c_dot)\n'''\n[[2 4]\n [2 3]]\n'''\n```\n\n### sum、min、max\n`sum()`对数组所有元素求和，`min()`寻找数组最小值，`max()`寻找数组最大值\n```python\na = np.arange(12).reshape((3, 4))\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\nprint(np.sum(a)) # 数组所有元素求和\nprint(np.min(a)) # 数组中的最小元素\nprint(np.max(a)) # 数组中的最大元素\n'''\n66\n0\n11\n'''\n```\n如果要对行或列单独操作，则可以为`axis`参数赋值，当`axis = 1`时，将会以行作为查找单元，`axis = 0`时，将会以列作为查找单元\n```python\nprint(np.sum(a, axis = 1))\nprint(np.min(a, axis = 1))\nprint(np.max(a, axis = 1))\n'''\n[ 6 22 38]\n[0 4 8]\n[ 3  7 11]\n'''\nprint(np.sum(a, axis = 0))\nprint(np.min(a, axis = 0))\nprint(np.max(a, axis = 0))\n'''\n[12 15 18 21]\n[0 1 2 3]\n[ 8  9 10 11]\n'''\n```\n\n### 其他运算\n1. `argmin()`返回矩阵中最小元素的索引，`argmax()`返回矩阵中最大元素的索引\n    ```python\n    a = np.arange(12).reshape((3, 4))\n    print(a)\n    print(np.argmin(a)) # 最小元素的索引\n    print(np.argmax(a)) # 最大元素的索引\n    '''\n    [[ 0  1  2  3]\n    [ 4  5  6  7]\n    [ 8  9 10 11]]\n    0\n    11\n    '''\n    ```\n2. `mean()`和`average()`返回矩阵的平均值\n    ```python\n    print(np.mean(a)) # 5.5\n    print(a.mean()) # 另一种写法\n    print(np.average(a)) # 5.5\n    ```\n3. `cumsum()`累加函数\n   ```python\n   # cumsum()函数生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和\n   print(np.cumsum(a)) # [ 0  1  3  6 10 15 21 28 36 45 55 66]\n   ```\n4. `diff()`累差函数\n   ```python\n   # 该函数计算的是每一行中后一项与前一项之差，所以3x4的矩阵通过函数计算后得到3x3的矩阵\n   print(np.diff(a))\n   '''\n   [[1 1 1]\n    [1 1 1]\n    [1 1 1]]\n   '''\n   ```\n5. 矩阵转置\n   ```python\n   print(np.transpose(a))\n   print(a.T)\n   '''\n   [[ 0  4  8]\n    [ 1  5  9]\n    [ 2  6 10]\n    [ 3  7 11]]\n   '''\n   ```\n\n## Numpy索引\n\n### 一维索引\n```python\n# 和数组索引类似\na = np.arange(12)\nprint(a)\nprint(a[3])\n'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n3\n'''\n\nb = np.arange(12).reshape(3,4)\nprint(b)\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\nprint(b[1]) # 打印矩阵第1行（从0起算）\n'''\n[4 5 6 7]\n'''\n```\n### 二维索引\n```python\n# 和python二维list相似\nb = np.arange(12).reshape(3,4)\nprint(b[1][1])\nprint(b[1, 1]) # 另一种写法\nprint(b[1, 1:3]) # 同时支持切片处理\n'''\n5\n5\n[5 6]\n'''\n```\n### 行列遍历以及迭代\n```python\na = np.arange(12).reshape(3, 4)\n# 按行遍历\nfor row in a:\n    print(a)\n'''\n[0 1 2 3]\n[4 5 6 7]\n[8 9 10 11]\n'''\n# 按列遍历：将矩阵转置后遍历行\nfor column in a.T:\n    print(column)\n'''\n[0 4 8]\n[1 5 9]\n[2 6 10]\n[3 7 11]\n'''\n# 迭代\n# flatten()是一个展开性质的函数，将多维矩阵展开为1行数列\nprint(a.flatten())\n'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n'''\n# flat迭代器\nfor item in a.flat:\n    print(item)\n'''\n1\n2\n...\n11\n'''\n```\n## array合并\n```python\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n# vstack()将两个array上下合并，列数必须相同\nc = np.vstack((a, b))\nprint(c)\n'''\n[[1 2 3]\n [4 5 6]]\n'''\n# hstack()将两个array左右合并，行数必须相同\nd = np.hstack((a, b))\nprint(d)\n'''\n[1 2 3 4 5 6]\n'''\n# 对于a序列来说，其并不是矩阵，需要通过新的方式进行转置\nprint(a[np.newaxis, :])\n'''\n[[1 2 3]]\n'''\nprint(a[:, np.newaxis])\n'''\n[[1]\n [2]\n [3]]\n'''\n# 合并多个矩阵或序列时，使用concatenate()更方便\na = np.array([1, 2, 3])[:, np.newaxis]\nb = np.array([4, 5, 6])[:, np.newaxis]\n# axis = 0纵向合并\nc = np.concatenate((a, b, b, a), axis = 0)\nprint(c)\n'''\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [4]\n [5]\n [6]\n [1]\n [2]\n [3]]\n'''\n# axis = 1横向合并\nd = np.concatenate((a, b, b, a), axis = 1)\nprint(d)\n'''\n[[1 4 4 1]\n [2 5 5 2]\n [3 6 6 3]]\n'''\n```\n## array分割\n### 纵向分割\n```python\n# 纵向分割，即按列分割，分割数量必须是列数的公约数（列数能整除分割数）\na = np.arange(12).reshape(3, 4)\n# 第二个参数为分割数量，第三个参数表示纵向分割(按列分割)\nprint(np.split(a, 2, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''\n```\n### 横向分割\n```python\n# 横向分割，即按行分割，分割数量必须是行数的公约数（行数能整除分割数）\n# 第二个参数为分割数量，第三个参数表示横向分割(按行分割)\nprint(np.split(a, 3, axis=0))\n'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''\n```\n### 不等量分割\n```python\n# 将4列矩阵不等量分割为3个矩阵\nprint(np.array_split(a, 3, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2],\n       [ 6],\n       [10]]), array([[ 3],\n       [ 7],\n       [11]])]\n'''\n```\n### 其他分割方式\n```python\n# 横向分割\nprint(np.vsplit(a, 3)) # 等同于print(np.split(a, 3, axis=0))\n'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''\n# 纵向分割\nprint(np.hsplit(a, 2)) # 等同于print(np.split(a, 2, axis=1))\n'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''\n```\n## 浅拷贝和深拷贝\n### 浅拷贝\n> 拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象不复制\n\n`=`的赋值方式带有关联性\n```python\na = np.arange(4)\nb = a\nc = b\n# a的值改变，b，c的值会同时改变\na[0] = 11\nprint(a, b, c)\n'''\n[11  1  2  3] [11  1  2  3] [11  1  2  3]\n'''\n```\n### 深拷贝\n> 外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象也复制。\n\n`copy()`的方式没有关联性\n```python\nd = a.copy()\nprint(d)\n# a的值改变，d的值不会改变\na[3] = 44\nprint(a)\nprint(d)\n'''\n[11  1  2  3]\n[11  1  2 44]\n[11  1  2  3]\n'''\n```","slug":"Share/Numpy","published":1,"updated":"2019-08-04T15:54:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka5eurla009smetfvb9xqpcn","content":"<h2 id=\"安装Numpy\"><a href=\"#安装Numpy\" class=\"headerlink\" title=\"安装Numpy\"></a>安装Numpy</h2><pre class=\" language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> numpy</code></pre>\n<h2 id=\"导入Numpy\"><a href=\"#导入Numpy\" class=\"headerlink\" title=\"导入Numpy\"></a>导入Numpy</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 导入numpy</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</code></pre>\n<h2 id=\"Numpy属性\"><a href=\"#Numpy属性\" class=\"headerlink\" title=\"Numpy属性\"></a>Numpy属性</h2><ul>\n<li>ndim：纬度</li>\n<li>shape：行数和列数</li>\n<li>size：元素个数</li>\n</ul>\n<h2 id=\"Numpy创建array\"><a href=\"#Numpy创建array\" class=\"headerlink\" title=\"Numpy创建array\"></a>Numpy创建array</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>array：创建数组</li>\n<li>dtype：指定数据类型</li>\n<li>zeros：创建数据全为0</li>\n<li>ones：创建数据全为1</li>\n<li>empty：创建数据接近于0</li>\n<li>arange：按指定范围创建数据</li>\n<li>linspace：创建线段</li>\n</ul>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><ol>\n<li>指定数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n</li>\n<li>全零数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数据全为0，3行4列</span>\n<span class=\"token triple-quoted-string string\">'''\n[[0. 0. 0. 0.]\n[0. 0. 0. 0.]\n[0. 0. 0. 0.]]\n'''</span></code></pre>\n</li>\n<li>全一数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>int<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数据全为1，3行4列，数据类型为int</span>\n<span class=\"token triple-quoted-string string\">'''\n[[0. 0. 0. 0.]\n[0. 0. 0. 0.]\n[0. 0. 0. 0.]]\n'''</span></code></pre>\n</li>\n<li>全空数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数据为empty，接近于0，3行4列</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 1.72723371e-077 -4.32976793e-311  2.96439388e-323  0.00000000e+000]\n[ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000]\n[ 0.00000000e+000  0.00000000e+000  0.00000000e+000  8.34402697e-309]]\n'''</span></code></pre>\n</li>\n<li>创建连续数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 10-19的数据，2步长</span>\n<span class=\"token triple-quoted-string string\">'''\n[10 12 14 16 18]\n'''</span></code></pre>\n</li>\n<li>用<code>reshape</code>改变数组形状<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 10-19的数据，2步长</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 0  1  2  3]\n[ 4  5  6  7]\n[ 8  9 10 11]]\n'''</span></code></pre>\n</li>\n<li>创建线段型数组<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 2维矩阵，2行3列</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 10-19的数据，2步长</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 1.          1.47368421  1.94736842  2.42105263]\n[ 2.89473684  3.36842105  3.84210526  4.31578947]\n[ 4.78947368  5.26315789  5.73684211  6.21052632]\n[ 6.68421053  7.15789474  7.63157895  8.10526316]\n[ 8.57894737  9.05263158  9.52631579 10.        ]]\n'''</span></code></pre>\n</li>\n</ol>\n<h2 id=\"Numpy基础运算\"><a href=\"#Numpy基础运算\" class=\"headerlink\" title=\"Numpy基础运算\"></a>Numpy基础运算</h2><pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"加减乘除\"><a href=\"#加减乘除\" class=\"headerlink\" title=\"加减乘除\"></a>加减乘除</h3><pre class=\" language-python\"><code class=\"language-python\">c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token comment\" spellcheck=\"true\"># array([10, 21, 32, 43])</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b <span class=\"token comment\" spellcheck=\"true\"># array([10, 19, 28, 37])</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token comment\" spellcheck=\"true\"># array([0, 20, 60, 120])</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b <span class=\"token comment\" spellcheck=\"true\"># array([inf, 20, 15, 13.33333333])</span></code></pre>\n<h3 id=\"函数运算\"><a href=\"#函数运算\" class=\"headerlink\" title=\"函数运算\"></a>函数运算</h3><pre class=\" language-python\"><code class=\"language-python\">c <span class=\"token operator\">=</span> b <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token comment\" spellcheck=\"true\"># 乘方运算 array([0, 1, 4, 9])</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># sin函数 array([-5.44021111, 9.12945251, -9.88031624, 7.4511316 ])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 逻辑运算 array([ True, True, True, False])</span>\n</code></pre>\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 符合数学矩阵运算</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nc_dot <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 另一种写法</span>\nc_dot_2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c_dot<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[2 4]\n [2 3]]\n'''</span></code></pre>\n<h3 id=\"sum、min、max\"><a href=\"#sum、min、max\" class=\"headerlink\" title=\"sum、min、max\"></a>sum、min、max</h3><p><code>sum()</code>对数组所有元素求和，<code>min()</code>寻找数组最小值，<code>max()</code>寻找数组最大值</p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数组所有元素求和</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数组中的最小元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 数组中的最大元素</span>\n<span class=\"token triple-quoted-string string\">'''\n66\n0\n11\n'''</span></code></pre>\n<p>如果要对行或列单独操作，则可以为<code>axis</code>参数赋值，当<code>axis = 1</code>时，将会以行作为查找单元，<code>axis = 0</code>时，将会以列作为查找单元</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[ 6 22 38]\n[0 4 8]\n[ 3  7 11]\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[12 15 18 21]\n[0 1 2 3]\n[ 8  9 10 11]\n'''</span></code></pre>\n<h3 id=\"其他运算\"><a href=\"#其他运算\" class=\"headerlink\" title=\"其他运算\"></a>其他运算</h3><ol>\n<li><code>argmin()</code>返回矩阵中最小元素的索引，<code>argmax()</code>返回矩阵中最大元素的索引<pre class=\" language-python\"><code class=\"language-python\"> a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 最小元素的索引</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 最大元素的索引</span>\n <span class=\"token triple-quoted-string string\">'''\n [[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n 0\n 11\n '''</span></code></pre>\n</li>\n<li><code>mean()</code>和<code>average()</code>返回矩阵的平均值<pre class=\" language-python\"><code class=\"language-python\"> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 5.5</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 另一种写法</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>average<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 5.5</span></code></pre>\n</li>\n<li><code>cumsum()</code>累加函数<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># cumsum()函数生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [ 0  1  3  6 10 15 21 28 36 45 55 66]</span></code></pre>\n</li>\n<li><code>diff()</code>累差函数<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 该函数计算的是每一行中后一项与前一项之差，所以3x4的矩阵通过函数计算后得到3x3的矩阵</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1 1 1]\n [1 1 1]\n [1 1 1]]\n'''</span></code></pre>\n</li>\n<li>矩阵转置<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n'''</span></code></pre>\n</li>\n</ol>\n<h2 id=\"Numpy索引\"><a href=\"#Numpy索引\" class=\"headerlink\" title=\"Numpy索引\"></a>Numpy索引</h2><h3 id=\"一维索引\"><a href=\"#一维索引\" class=\"headerlink\" title=\"一维索引\"></a>一维索引</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 和数组索引类似</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n3\n'''</span>\n\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 打印矩阵第1行（从0起算）</span>\n<span class=\"token triple-quoted-string string\">'''\n[4 5 6 7]\n'''</span></code></pre>\n<h3 id=\"二维索引\"><a href=\"#二维索引\" class=\"headerlink\" title=\"二维索引\"></a>二维索引</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 和python二维list相似</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 另一种写法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 同时支持切片处理</span>\n<span class=\"token triple-quoted-string string\">'''\n5\n5\n[5 6]\n'''</span></code></pre>\n<h3 id=\"行列遍历以及迭代\"><a href=\"#行列遍历以及迭代\" class=\"headerlink\" title=\"行列遍历以及迭代\"></a>行列遍历以及迭代</h3><pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 按行遍历</span>\n<span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[0 1 2 3]\n[4 5 6 7]\n[8 9 10 11]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># 按列遍历：将矩阵转置后遍历行</span>\n<span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[0 4 8]\n[1 5 9]\n[2 6 10]\n[3 7 11]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># 迭代</span>\n<span class=\"token comment\" spellcheck=\"true\"># flatten()是一个展开性质的函数，将多维矩阵展开为1行数列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># flat迭代器</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>flat<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n1\n2\n...\n11\n'''</span></code></pre>\n<h2 id=\"array合并\"><a href=\"#array合并\" class=\"headerlink\" title=\"array合并\"></a>array合并</h2><pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># vstack()将两个array上下合并，列数必须相同</span>\nc <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1 2 3]\n [4 5 6]]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># hstack()将两个array左右合并，行数必须相同</span>\nd <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[1 2 3 4 5 6]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># 对于a序列来说，其并不是矩阵，需要通过新的方式进行转置</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1 2 3]]\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1]\n [2]\n [3]]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># 合并多个矩阵或序列时，使用concatenate()更方便</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># axis = 0纵向合并</span>\nc <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [4]\n [5]\n [6]\n [1]\n [2]\n [3]]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># axis = 1横向合并</span>\nd <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[[1 4 4 1]\n [2 5 5 2]\n [3 6 6 3]]\n'''</span></code></pre>\n<h2 id=\"array分割\"><a href=\"#array分割\" class=\"headerlink\" title=\"array分割\"></a>array分割</h2><h3 id=\"纵向分割\"><a href=\"#纵向分割\" class=\"headerlink\" title=\"纵向分割\"></a>纵向分割</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 纵向分割，即按列分割，分割数量必须是列数的公约数（列数能整除分割数）</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第二个参数为分割数量，第三个参数表示纵向分割(按列分割)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''</span></code></pre>\n<h3 id=\"横向分割\"><a href=\"#横向分割\" class=\"headerlink\" title=\"横向分割\"></a>横向分割</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 横向分割，即按行分割，分割数量必须是行数的公约数（行数能整除分割数）</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第二个参数为分割数量，第三个参数表示横向分割(按行分割)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''</span></code></pre>\n<h3 id=\"不等量分割\"><a href=\"#不等量分割\" class=\"headerlink\" title=\"不等量分割\"></a>不等量分割</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 将4列矩阵不等量分割为3个矩阵</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array_split<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2],\n       [ 6],\n       [10]]), array([[ 3],\n       [ 7],\n       [11]])]\n'''</span></code></pre>\n<h3 id=\"其他分割方式\"><a href=\"#其他分割方式\" class=\"headerlink\" title=\"其他分割方式\"></a>其他分割方式</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 横向分割</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>vsplit<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 等同于print(np.split(a, 3, axis=0))</span>\n<span class=\"token triple-quoted-string string\">'''\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n'''</span>\n<span class=\"token comment\" spellcheck=\"true\"># 纵向分割</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>hsplit<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 等同于print(np.split(a, 2, axis=1))</span>\n<span class=\"token triple-quoted-string string\">'''\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n'''</span></code></pre>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象不复制</p>\n</blockquote>\n<p><code>=</code>的赋值方式带有关联性</p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> a\nc <span class=\"token operator\">=</span> b\n<span class=\"token comment\" spellcheck=\"true\"># a的值改变，b，c的值会同时改变</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[11  1  2  3] [11  1  2  3] [11  1  2  3]\n'''</span></code></pre>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象也复制。</p>\n</blockquote>\n<p><code>copy()</code>的方式没有关联性</p>\n<pre class=\" language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># a的值改变，d的值不会改变</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">44</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n[11  1  2  3]\n[11  1  2 44]\n[11  1  2  3]\n'''</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"安装Numpy\"><a href=\"#安装Numpy\" class=\"headerlink\" title=\"安装Numpy\"></a>安装Numpy</h2><pre><code class=\"bash\">pip install numpy</code></pre>\n<h2 id=\"导入Numpy\"><a href=\"#导入Numpy\" class=\"headerlink\" title=\"导入Numpy\"></a>导入Numpy</h2><pre><code class=\"python\"># 导入numpy\nimport numpy as np</code></pre>\n<h2 id=\"Numpy属性\"><a href=\"#Numpy属性\" class=\"headerlink\" title=\"Numpy属性\"></a>Numpy属性</h2><ul>\n<li>ndim：纬度</li>\n<li>shape：行数和列数</li>\n<li>size：元素个数</li>\n</ul>\n<h2 id=\"Numpy创建array\"><a href=\"#Numpy创建array\" class=\"headerlink\" title=\"Numpy创建array\"></a>Numpy创建array</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>array：创建数组</li>\n<li>dtype：指定数据类型</li>\n<li>zeros：创建数据全为0</li>\n<li>ones：创建数据全为1</li>\n<li>empty：创建数据接近于0</li>\n<li>arange：按指定范围创建数据</li>\n<li>linspace：创建线段</li>\n</ul>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><ol>\n<li>指定数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.array([[1, 2, 3],[2, 3, 4]])</code></pre>\n</li>\n<li>全零数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.zeros((3,4)) # 数据全为0，3行4列\n&#39;&#39;&#39;\n[[0. 0. 0. 0.]\n[0. 0. 0. 0.]\n[0. 0. 0. 0.]]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>全一数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.ones((3,4), dtype = np.int) # 数据全为1，3行4列，数据类型为int\n&#39;&#39;&#39;\n[[0. 0. 0. 0.]\n[0. 0. 0. 0.]\n[0. 0. 0. 0.]]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>全空数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.empty((3,4)) # 数据为empty，接近于0，3行4列\n&#39;&#39;&#39;\n[[ 1.72723371e-077 -4.32976793e-311  2.96439388e-323  0.00000000e+000]\n[ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000]\n[ 0.00000000e+000  0.00000000e+000  0.00000000e+000  8.34402697e-309]]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>创建连续数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.arange(10, 20, 2) # 10-19的数据，2步长\n&#39;&#39;&#39;\n[10 12 14 16 18]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>用<code>reshape</code>改变数组形状<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.arange(12).reshape((3, 4)) # 10-19的数据，2步长\n&#39;&#39;&#39;\n[[ 0  1  2  3]\n[ 4  5  6  7]\n[ 8  9 10 11]]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>创建线段型数组<pre><code class=\"python\"># 2维矩阵，2行3列\na = np.linspace(1, 10, 20).reshape(5, 4) # 10-19的数据，2步长\n&#39;&#39;&#39;\n[[ 1.          1.47368421  1.94736842  2.42105263]\n[ 2.89473684  3.36842105  3.84210526  4.31578947]\n[ 4.78947368  5.26315789  5.73684211  6.21052632]\n[ 6.68421053  7.15789474  7.63157895  8.10526316]\n[ 8.57894737  9.05263158  9.52631579 10.        ]]\n&#39;&#39;&#39;</code></pre>\n</li>\n</ol>\n<h2 id=\"Numpy基础运算\"><a href=\"#Numpy基础运算\" class=\"headerlink\" title=\"Numpy基础运算\"></a>Numpy基础运算</h2><pre><code class=\"python\">a = np.array([10, 20, 30, 40])\nb = np.arange(4)</code></pre>\n<h3 id=\"加减乘除\"><a href=\"#加减乘除\" class=\"headerlink\" title=\"加减乘除\"></a>加减乘除</h3><pre><code class=\"python\">c = a + b # array([10, 21, 32, 43])\nc = a - b # array([10, 19, 28, 37])\nc = a * b # array([0, 20, 60, 120])\nc = a / b # array([inf, 20, 15, 13.33333333])</code></pre>\n<h3 id=\"函数运算\"><a href=\"#函数运算\" class=\"headerlink\" title=\"函数运算\"></a>函数运算</h3><pre><code class=\"python\">c = b ** 2 # 乘方运算 array([0, 1, 4, 9])\nc = 10 * np.sin(a) # sin函数 array([-5.44021111, 9.12945251, -9.88031624, 7.4511316 ])\nprint(b &lt; 3) # 逻辑运算 array([ True, True, True, False])\n</code></pre>\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><pre><code class=\"python\"># 符合数学矩阵运算\na = np.array([[1, 1], [0, 1]])\nb = np.array([[0, 1], [2, 3]])\nc_dot = np.dot(a, b)\n# 另一种写法\nc_dot_2 = a.dot(b)\nprint(c_dot)\n&#39;&#39;&#39;\n[[2 4]\n [2 3]]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"sum、min、max\"><a href=\"#sum、min、max\" class=\"headerlink\" title=\"sum、min、max\"></a>sum、min、max</h3><p><code>sum()</code>对数组所有元素求和，<code>min()</code>寻找数组最小值，<code>max()</code>寻找数组最大值</p>\n<pre><code class=\"python\">a = np.arange(12).reshape((3, 4))\n&#39;&#39;&#39;\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n&#39;&#39;&#39;\nprint(np.sum(a)) # 数组所有元素求和\nprint(np.min(a)) # 数组中的最小元素\nprint(np.max(a)) # 数组中的最大元素\n&#39;&#39;&#39;\n66\n0\n11\n&#39;&#39;&#39;</code></pre>\n<p>如果要对行或列单独操作，则可以为<code>axis</code>参数赋值，当<code>axis = 1</code>时，将会以行作为查找单元，<code>axis = 0</code>时，将会以列作为查找单元</p>\n<pre><code class=\"python\">print(np.sum(a, axis = 1))\nprint(np.min(a, axis = 1))\nprint(np.max(a, axis = 1))\n&#39;&#39;&#39;\n[ 6 22 38]\n[0 4 8]\n[ 3  7 11]\n&#39;&#39;&#39;\nprint(np.sum(a, axis = 0))\nprint(np.min(a, axis = 0))\nprint(np.max(a, axis = 0))\n&#39;&#39;&#39;\n[12 15 18 21]\n[0 1 2 3]\n[ 8  9 10 11]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"其他运算\"><a href=\"#其他运算\" class=\"headerlink\" title=\"其他运算\"></a>其他运算</h3><ol>\n<li><code>argmin()</code>返回矩阵中最小元素的索引，<code>argmax()</code>返回矩阵中最大元素的索引<pre><code class=\"python\"> a = np.arange(12).reshape((3, 4))\n print(a)\n print(np.argmin(a)) # 最小元素的索引\n print(np.argmax(a)) # 最大元素的索引\n &#39;&#39;&#39;\n [[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n 0\n 11\n &#39;&#39;&#39;</code></pre>\n</li>\n<li><code>mean()</code>和<code>average()</code>返回矩阵的平均值<pre><code class=\"python\"> print(np.mean(a)) # 5.5\n print(a.mean()) # 另一种写法\n print(np.average(a)) # 5.5</code></pre>\n</li>\n<li><code>cumsum()</code>累加函数<pre><code class=\"python\"># cumsum()函数生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和\nprint(np.cumsum(a)) # [ 0  1  3  6 10 15 21 28 36 45 55 66]</code></pre>\n</li>\n<li><code>diff()</code>累差函数<pre><code class=\"python\"># 该函数计算的是每一行中后一项与前一项之差，所以3x4的矩阵通过函数计算后得到3x3的矩阵\nprint(np.diff(a))\n&#39;&#39;&#39;\n[[1 1 1]\n [1 1 1]\n [1 1 1]]\n&#39;&#39;&#39;</code></pre>\n</li>\n<li>矩阵转置<pre><code class=\"python\">print(np.transpose(a))\nprint(a.T)\n&#39;&#39;&#39;\n[[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n&#39;&#39;&#39;</code></pre>\n</li>\n</ol>\n<h2 id=\"Numpy索引\"><a href=\"#Numpy索引\" class=\"headerlink\" title=\"Numpy索引\"></a>Numpy索引</h2><h3 id=\"一维索引\"><a href=\"#一维索引\" class=\"headerlink\" title=\"一维索引\"></a>一维索引</h3><pre><code class=\"python\"># 和数组索引类似\na = np.arange(12)\nprint(a)\nprint(a[3])\n&#39;&#39;&#39;\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n3\n&#39;&#39;&#39;\n\nb = np.arange(12).reshape(3,4)\nprint(b)\n&#39;&#39;&#39;\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n&#39;&#39;&#39;\nprint(b[1]) # 打印矩阵第1行（从0起算）\n&#39;&#39;&#39;\n[4 5 6 7]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"二维索引\"><a href=\"#二维索引\" class=\"headerlink\" title=\"二维索引\"></a>二维索引</h3><pre><code class=\"python\"># 和python二维list相似\nb = np.arange(12).reshape(3,4)\nprint(b[1][1])\nprint(b[1, 1]) # 另一种写法\nprint(b[1, 1:3]) # 同时支持切片处理\n&#39;&#39;&#39;\n5\n5\n[5 6]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"行列遍历以及迭代\"><a href=\"#行列遍历以及迭代\" class=\"headerlink\" title=\"行列遍历以及迭代\"></a>行列遍历以及迭代</h3><pre><code class=\"python\">a = np.arange(12).reshape(3, 4)\n# 按行遍历\nfor row in a:\n    print(a)\n&#39;&#39;&#39;\n[0 1 2 3]\n[4 5 6 7]\n[8 9 10 11]\n&#39;&#39;&#39;\n# 按列遍历：将矩阵转置后遍历行\nfor column in a.T:\n    print(column)\n&#39;&#39;&#39;\n[0 4 8]\n[1 5 9]\n[2 6 10]\n[3 7 11]\n&#39;&#39;&#39;\n# 迭代\n# flatten()是一个展开性质的函数，将多维矩阵展开为1行数列\nprint(a.flatten())\n&#39;&#39;&#39;\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n&#39;&#39;&#39;\n# flat迭代器\nfor item in a.flat:\n    print(item)\n&#39;&#39;&#39;\n1\n2\n...\n11\n&#39;&#39;&#39;</code></pre>\n<h2 id=\"array合并\"><a href=\"#array合并\" class=\"headerlink\" title=\"array合并\"></a>array合并</h2><pre><code class=\"python\">a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n# vstack()将两个array上下合并，列数必须相同\nc = np.vstack((a, b))\nprint(c)\n&#39;&#39;&#39;\n[[1 2 3]\n [4 5 6]]\n&#39;&#39;&#39;\n# hstack()将两个array左右合并，行数必须相同\nd = np.hstack((a, b))\nprint(d)\n&#39;&#39;&#39;\n[1 2 3 4 5 6]\n&#39;&#39;&#39;\n# 对于a序列来说，其并不是矩阵，需要通过新的方式进行转置\nprint(a[np.newaxis, :])\n&#39;&#39;&#39;\n[[1 2 3]]\n&#39;&#39;&#39;\nprint(a[:, np.newaxis])\n&#39;&#39;&#39;\n[[1]\n [2]\n [3]]\n&#39;&#39;&#39;\n# 合并多个矩阵或序列时，使用concatenate()更方便\na = np.array([1, 2, 3])[:, np.newaxis]\nb = np.array([4, 5, 6])[:, np.newaxis]\n# axis = 0纵向合并\nc = np.concatenate((a, b, b, a), axis = 0)\nprint(c)\n&#39;&#39;&#39;\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [4]\n [5]\n [6]\n [1]\n [2]\n [3]]\n&#39;&#39;&#39;\n# axis = 1横向合并\nd = np.concatenate((a, b, b, a), axis = 1)\nprint(d)\n&#39;&#39;&#39;\n[[1 4 4 1]\n [2 5 5 2]\n [3 6 6 3]]\n&#39;&#39;&#39;</code></pre>\n<h2 id=\"array分割\"><a href=\"#array分割\" class=\"headerlink\" title=\"array分割\"></a>array分割</h2><h3 id=\"纵向分割\"><a href=\"#纵向分割\" class=\"headerlink\" title=\"纵向分割\"></a>纵向分割</h3><pre><code class=\"python\"># 纵向分割，即按列分割，分割数量必须是列数的公约数（列数能整除分割数）\na = np.arange(12).reshape(3, 4)\n# 第二个参数为分割数量，第三个参数表示纵向分割(按列分割)\nprint(np.split(a, 2, axis=1))\n&#39;&#39;&#39;\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"横向分割\"><a href=\"#横向分割\" class=\"headerlink\" title=\"横向分割\"></a>横向分割</h3><pre><code class=\"python\"># 横向分割，即按行分割，分割数量必须是行数的公约数（行数能整除分割数）\n# 第二个参数为分割数量，第三个参数表示横向分割(按行分割)\nprint(np.split(a, 3, axis=0))\n&#39;&#39;&#39;\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"不等量分割\"><a href=\"#不等量分割\" class=\"headerlink\" title=\"不等量分割\"></a>不等量分割</h3><pre><code class=\"python\"># 将4列矩阵不等量分割为3个矩阵\nprint(np.array_split(a, 3, axis=1))\n&#39;&#39;&#39;\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2],\n       [ 6],\n       [10]]), array([[ 3],\n       [ 7],\n       [11]])]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"其他分割方式\"><a href=\"#其他分割方式\" class=\"headerlink\" title=\"其他分割方式\"></a>其他分割方式</h3><pre><code class=\"python\"># 横向分割\nprint(np.vsplit(a, 3)) # 等同于print(np.split(a, 3, axis=0))\n&#39;&#39;&#39;\n[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]\n&#39;&#39;&#39;\n# 纵向分割\nprint(np.hsplit(a, 2)) # 等同于print(np.split(a, 2, axis=1))\n&#39;&#39;&#39;\n[array([[0, 1],\n       [4, 5],\n       [8, 9]]), array([[ 2,  3],\n       [ 6,  7],\n       [10, 11]])]\n&#39;&#39;&#39;</code></pre>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象不复制</p>\n</blockquote>\n<p><code>=</code>的赋值方式带有关联性</p>\n<pre><code class=\"python\">a = np.arange(4)\nb = a\nc = b\n# a的值改变，b，c的值会同时改变\na[0] = 11\nprint(a, b, c)\n&#39;&#39;&#39;\n[11  1  2  3] [11  1  2  3] [11  1  2  3]\n&#39;&#39;&#39;</code></pre>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象也复制。</p>\n</blockquote>\n<p><code>copy()</code>的方式没有关联性</p>\n<pre><code class=\"python\">d = a.copy()\nprint(d)\n# a的值改变，d的值不会改变\na[3] = 44\nprint(a)\nprint(d)\n&#39;&#39;&#39;\n[11  1  2  3]\n[11  1  2 44]\n[11  1  2  3]\n&#39;&#39;&#39;</code></pre>\n"},{"title":"群晖安装Aria2和AriaNg","date":"2020-05-13T14:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg","summary":"利用群晖docker安装Aria2和AriaNg","_content":"\n最近在群晖上安装了Emby来做影音服务器，那么就需要通过下载获取影音资源，PT下载用的Transmission，BT下载对比之后发现还是用Aria2比较好，配合AriaNg的UI界面，使用起来还是很不错的\n\n#### 安装Aria2\n1. 打开群晖docker，搜索aria2，这里我们选择`p3terx/aria2-pro`映像下载，这个映像虽然没有集成webui，但是对Aria2的配置进行了很多优化。相对于其他的捆绑包来说，更简洁实用。关于这个映像的更多介绍，可以去大佬的[博客](https://p3terx.com/archives/docker-aria2-pro.html)查看\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-1.jpg)\n2. 在下载的过程中，我们可以去创建一个文件夹用于存放aira2的配置，文件夹位置看个人习惯。下载完成后，我们启动映像，点击高级设置\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-2.jpg)\n+ 设置自动重启\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-3.jpg)\n+ 映射文件夹：下载目录`/downloads`，配置目录`/config`\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-4.jpg)\n+ 进行端口设置，容器端口不可更改，本地端口自行设置\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-5.jpg)\n\n+ 添加环境变量，在环境变量中添加红框中的五个变量，其中`RPC_SECRET`是Aira2的连接密钥，这里以`123456`为例\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-6.jpg)\n+ 最后点击应用启动容器，在docker容器中便可以看到启动后的Aria2了\n\n#### 安装AriaNg\n前面说过，这个映像是没有WebUI的，所以需要配合WebUI或者APP进行使用，我们这里选择AriaNg，AriaNg是一个 Aria2 的 Web 前端，你可以在Github项目的 [releases](https://github.com/mayswind/AriaNg/releases) 页面下载\n1. 群晖安装Web Station套件，可以直接在套件中心直接下载安装，安装之后，会增加一个`web`的共享文件夹，将我们下载好的AriaNg文件上传到该共享文件夹\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-7.jpg)\n2. 打开Web Station套件，点击`虚拟主机`中的`新增`按钮\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-8.jpg)\n3. 对web站点进行设置，我们选择`基于端口`，选择`HTTP`，端口号自选。`文档根目录`选择我们刚才上传的AiraNg文件目录，选择后端服务器和PHP，确定即可。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-9.jpg)\n4. 在浏览器输入`群晖IP`+`HTTP端口号`，我这里是192.168.148.12:10086，便可以打开AiraNg界面了，将界面语言设置为中文，可以看到Aira2状态显示未连接\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-10.jpg)\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-11.jpg)\n\n#### AiraNg连接Aria2\n1. 按照步骤依次填入IP、端口和之前设置的密钥\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-12.jpg)\n2. 刷新之后便可以看到Aira2已经连接了\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-13.jpg)\n3. 接下来，我们下载一个种子（[ubuntu19.10](http://releases.ubuntu.com/19.10/ubuntu-19.10-desktop-amd64.iso.torrent)）并添加测试，可以看到速度还可以\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg)\n\n\n现在我们就可以愉快的利用Aria2进行下载了","source":"_posts/Share/install_Aria2_and_AriaNg.md","raw":"---\ntitle: 群晖安装Aria2和AriaNg\ndate: 2020-05-13 22:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg\nsummary: 利用群晖docker安装Aria2和AriaNg\ncategories: 分享\ntags:\n  - 群晖\n---\n\n最近在群晖上安装了Emby来做影音服务器，那么就需要通过下载获取影音资源，PT下载用的Transmission，BT下载对比之后发现还是用Aria2比较好，配合AriaNg的UI界面，使用起来还是很不错的\n\n#### 安装Aria2\n1. 打开群晖docker，搜索aria2，这里我们选择`p3terx/aria2-pro`映像下载，这个映像虽然没有集成webui，但是对Aria2的配置进行了很多优化。相对于其他的捆绑包来说，更简洁实用。关于这个映像的更多介绍，可以去大佬的[博客](https://p3terx.com/archives/docker-aria2-pro.html)查看\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-1.jpg)\n2. 在下载的过程中，我们可以去创建一个文件夹用于存放aira2的配置，文件夹位置看个人习惯。下载完成后，我们启动映像，点击高级设置\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-2.jpg)\n+ 设置自动重启\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-3.jpg)\n+ 映射文件夹：下载目录`/downloads`，配置目录`/config`\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-4.jpg)\n+ 进行端口设置，容器端口不可更改，本地端口自行设置\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-5.jpg)\n\n+ 添加环境变量，在环境变量中添加红框中的五个变量，其中`RPC_SECRET`是Aira2的连接密钥，这里以`123456`为例\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-6.jpg)\n+ 最后点击应用启动容器，在docker容器中便可以看到启动后的Aria2了\n\n#### 安装AriaNg\n前面说过，这个映像是没有WebUI的，所以需要配合WebUI或者APP进行使用，我们这里选择AriaNg，AriaNg是一个 Aria2 的 Web 前端，你可以在Github项目的 [releases](https://github.com/mayswind/AriaNg/releases) 页面下载\n1. 群晖安装Web Station套件，可以直接在套件中心直接下载安装，安装之后，会增加一个`web`的共享文件夹，将我们下载好的AriaNg文件上传到该共享文件夹\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-7.jpg)\n2. 打开Web Station套件，点击`虚拟主机`中的`新增`按钮\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-8.jpg)\n3. 对web站点进行设置，我们选择`基于端口`，选择`HTTP`，端口号自选。`文档根目录`选择我们刚才上传的AiraNg文件目录，选择后端服务器和PHP，确定即可。\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-9.jpg)\n4. 在浏览器输入`群晖IP`+`HTTP端口号`，我这里是192.168.148.12:10086，便可以打开AiraNg界面了，将界面语言设置为中文，可以看到Aira2状态显示未连接\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-10.jpg)\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-11.jpg)\n\n#### AiraNg连接Aria2\n1. 按照步骤依次填入IP、端口和之前设置的密钥\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-12.jpg)\n2. 刷新之后便可以看到Aira2已经连接了\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-13.jpg)\n3. 接下来，我们下载一个种子（[ubuntu19.10](http://releases.ubuntu.com/19.10/ubuntu-19.10-desktop-amd64.iso.torrent)）并添加测试，可以看到速度还可以\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg)\n\n\n现在我们就可以愉快的利用Aria2进行下载了","slug":"Share/install_Aria2_and_AriaNg","published":1,"updated":"2020-05-13T14:32:43.498Z","_id":"cka5f6p1t009wmetf4axlpdb4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在群晖上安装了Emby来做影音服务器，那么就需要通过下载获取影音资源，PT下载用的Transmission，BT下载对比之后发现还是用Aria2比较好，配合AriaNg的UI界面，使用起来还是很不错的</p>\n<h4 id=\"安装Aria2\"><a href=\"#安装Aria2\" class=\"headerlink\" title=\"安装Aria2\"></a>安装Aria2</h4><ol>\n<li>打开群晖docker，搜索aria2，这里我们选择<code>p3terx/aria2-pro</code>映像下载，这个映像虽然没有集成webui，但是对Aria2的配置进行了很多优化。相对于其他的捆绑包来说，更简洁实用。关于这个映像的更多介绍，可以去大佬的<a href=\"https://p3terx.com/archives/docker-aria2-pro.html\" target=\"_blank\" rel=\"noopener\">博客</a>查看<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-1.jpg\" alt></li>\n<li>在下载的过程中，我们可以去创建一个文件夹用于存放aira2的配置，文件夹位置看个人习惯。下载完成后，我们启动映像，点击高级设置<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-2.jpg\" alt></li>\n</ol>\n<ul>\n<li><p>设置自动重启<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-3.jpg\" alt></p>\n</li>\n<li><p>映射文件夹：下载目录<code>/downloads</code>，配置目录<code>/config</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-4.jpg\" alt></p>\n</li>\n<li><p>进行端口设置，容器端口不可更改，本地端口自行设置<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-5.jpg\" alt></p>\n</li>\n<li><p>添加环境变量，在环境变量中添加红框中的五个变量，其中<code>RPC_SECRET</code>是Aira2的连接密钥，这里以<code>123456</code>为例<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-6.jpg\" alt></p>\n</li>\n<li><p>最后点击应用启动容器，在docker容器中便可以看到启动后的Aria2了</p>\n</li>\n</ul>\n<h4 id=\"安装AriaNg\"><a href=\"#安装AriaNg\" class=\"headerlink\" title=\"安装AriaNg\"></a>安装AriaNg</h4><p>前面说过，这个映像是没有WebUI的，所以需要配合WebUI或者APP进行使用，我们这里选择AriaNg，AriaNg是一个 Aria2 的 Web 前端，你可以在Github项目的 <a href=\"https://github.com/mayswind/AriaNg/releases\" target=\"_blank\" rel=\"noopener\">releases</a> 页面下载</p>\n<ol>\n<li>群晖安装Web Station套件，可以直接在套件中心直接下载安装，安装之后，会增加一个<code>web</code>的共享文件夹，将我们下载好的AriaNg文件上传到该共享文件夹<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-7.jpg\" alt></li>\n<li>打开Web Station套件，点击<code>虚拟主机</code>中的<code>新增</code>按钮<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-8.jpg\" alt></li>\n<li>对web站点进行设置，我们选择<code>基于端口</code>，选择<code>HTTP</code>，端口号自选。<code>文档根目录</code>选择我们刚才上传的AiraNg文件目录，选择后端服务器和PHP，确定即可。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-9.jpg\" alt></li>\n<li>在浏览器输入<code>群晖IP</code>+<code>HTTP端口号</code>，我这里是192.168.148.12:10086，便可以打开AiraNg界面了，将界面语言设置为中文，可以看到Aira2状态显示未连接<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-10.jpg\" alt><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-11.jpg\" alt></li>\n</ol>\n<h4 id=\"AiraNg连接Aria2\"><a href=\"#AiraNg连接Aria2\" class=\"headerlink\" title=\"AiraNg连接Aria2\"></a>AiraNg连接Aria2</h4><ol>\n<li>按照步骤依次填入IP、端口和之前设置的密钥<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-12.jpg\" alt></li>\n<li>刷新之后便可以看到Aira2已经连接了<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-13.jpg\" alt></li>\n<li>接下来，我们下载一个种子（<a href=\"http://releases.ubuntu.com/19.10/ubuntu-19.10-desktop-amd64.iso.torrent\" target=\"_blank\" rel=\"noopener\">ubuntu19.10</a>）并添加测试，可以看到速度还可以<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg\" alt></li>\n</ol>\n<p>现在我们就可以愉快的利用Aria2进行下载了</p>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<p>最近在群晖上安装了Emby来做影音服务器，那么就需要通过下载获取影音资源，PT下载用的Transmission，BT下载对比之后发现还是用Aria2比较好，配合AriaNg的UI界面，使用起来还是很不错的</p>\n<h4 id=\"安装Aria2\"><a href=\"#安装Aria2\" class=\"headerlink\" title=\"安装Aria2\"></a>安装Aria2</h4><ol>\n<li>打开群晖docker，搜索aria2，这里我们选择<code>p3terx/aria2-pro</code>映像下载，这个映像虽然没有集成webui，但是对Aria2的配置进行了很多优化。相对于其他的捆绑包来说，更简洁实用。关于这个映像的更多介绍，可以去大佬的<a href=\"https://p3terx.com/archives/docker-aria2-pro.html\" target=\"_blank\" rel=\"noopener\">博客</a>查看<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-1.jpg\" alt></li>\n<li>在下载的过程中，我们可以去创建一个文件夹用于存放aira2的配置，文件夹位置看个人习惯。下载完成后，我们启动映像，点击高级设置<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-2.jpg\" alt></li>\n</ol>\n<ul>\n<li><p>设置自动重启<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-3.jpg\" alt></p>\n</li>\n<li><p>映射文件夹：下载目录<code>/downloads</code>，配置目录<code>/config</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-4.jpg\" alt></p>\n</li>\n<li><p>进行端口设置，容器端口不可更改，本地端口自行设置<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-5.jpg\" alt></p>\n</li>\n<li><p>添加环境变量，在环境变量中添加红框中的五个变量，其中<code>RPC_SECRET</code>是Aira2的连接密钥，这里以<code>123456</code>为例<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-6.jpg\" alt></p>\n</li>\n<li><p>最后点击应用启动容器，在docker容器中便可以看到启动后的Aria2了</p>\n</li>\n</ul>\n<h4 id=\"安装AriaNg\"><a href=\"#安装AriaNg\" class=\"headerlink\" title=\"安装AriaNg\"></a>安装AriaNg</h4><p>前面说过，这个映像是没有WebUI的，所以需要配合WebUI或者APP进行使用，我们这里选择AriaNg，AriaNg是一个 Aria2 的 Web 前端，你可以在Github项目的 <a href=\"https://github.com/mayswind/AriaNg/releases\" target=\"_blank\" rel=\"noopener\">releases</a> 页面下载</p>\n<ol>\n<li>群晖安装Web Station套件，可以直接在套件中心直接下载安装，安装之后，会增加一个<code>web</code>的共享文件夹，将我们下载好的AriaNg文件上传到该共享文件夹<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-7.jpg\" alt></li>\n<li>打开Web Station套件，点击<code>虚拟主机</code>中的<code>新增</code>按钮<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-8.jpg\" alt></li>\n<li>对web站点进行设置，我们选择<code>基于端口</code>，选择<code>HTTP</code>，端口号自选。<code>文档根目录</code>选择我们刚才上传的AiraNg文件目录，选择后端服务器和PHP，确定即可。<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-9.jpg\" alt></li>\n<li>在浏览器输入<code>群晖IP</code>+<code>HTTP端口号</code>，我这里是192.168.148.12:10086，便可以打开AiraNg界面了，将界面语言设置为中文，可以看到Aira2状态显示未连接<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-10.jpg\" alt><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-11.jpg\" alt></li>\n</ol>\n<h4 id=\"AiraNg连接Aria2\"><a href=\"#AiraNg连接Aria2\" class=\"headerlink\" title=\"AiraNg连接Aria2\"></a>AiraNg连接Aria2</h4><ol>\n<li>按照步骤依次填入IP、端口和之前设置的密钥<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-12.jpg\" alt></li>\n<li>刷新之后便可以看到Aira2已经连接了<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-13.jpg\" alt></li>\n<li>接下来，我们下载一个种子（<a href=\"http://releases.ubuntu.com/19.10/ubuntu-19.10-desktop-amd64.iso.torrent\" target=\"_blank\" rel=\"noopener\">ubuntu19.10</a>）并添加测试，可以看到速度还可以<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200513-14.jpg\" alt></li>\n</ol>\n<p>现在我们就可以愉快的利用Aria2进行下载了</p>\n"},{"title":"群晖docker安装Emby并开启硬件解码","date":"2020-05-06T14:00:00.000Z","img":"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg","summary":"群晖docker安装Emby并开启硬件解码","_content":"\n最近在群晖中安装了Emby，使用体验很不错，现在将自己的安装过程分享出来\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg)\n目前群晖中安装emby主要有两种方式，一是通过在套件中心中添加源来安装，二是通过docker来安装。我选择的是通过docker进行安装，虽然过程稍微有些复杂，但是备份迁移都要比群晖套件有优势。\n硬件解码可以让显卡接过视频解码转码的重任，为CPU分担压力，不过有部分机器不支持硬件解码，群晖支持硬件解码的必要条件是：\n+ 群晖系统为DS 918+\n+ CPU支持硬件解码\n\n通过ssh连接到群晖，输入`ls /dev/dri`，如果和下图一样，那么恭喜你，你可以开启硬件解码\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-2.jpg)\n\n需要说明的是，emby开启硬件加速功能是需要会员的，当然也有免费的替代品——Jellyfin，Jellyfin是emby的一个分支，拥有emby的大部分功能，大家可以自行选择。\n\n### 在docker中安装emby\n#### 下载emby镜像\n在docker注册表中搜索emby，选择`emby/embyserver`下载\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-3.jpg)\n\n#### 启动硬件加速\n1. 下载完映像之后，不要直接启动，开启群晖的SSH，打开控制面板，在终端机开启\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-4.jpg)\n\n2. 通过ssh工具登录到群晖，输入`sudo -i`切换到`root`账户，会要求输入密码\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-5.jpg)\n3. 输入以下代码启动emby容器\n```bash\ndocker run \\\n    --name=emby \\ # 容器名称\n    --device=/dev/dri:/dev/dri \\ #开启硬件解码\n    --net host \\ # 配置网络\n    emby/embyserver # 要运行的映像名称\n```\n这里通过`--net host`是该容器使用`docker host`网络，即与docker主机网络相同。目的是解决emby无法刮削元数据的问题，因为emby使用`theMovieDb`进行刮削，详情可见[解决tinyMediaManager无法刮削的问题](https://www.jianshu.com/p/5ca8f1c04926)。这样只要在修改群晖`hosts`文件，便可以解决emby无法刮削的问题。不过建议直接使用tMM进行刮削，tMM也可以通过docker安装了——[群晖Docker安装tinyMediaManager并解决无法刮削的问题](https://www.jianshu.com/p/1f09ad93a9f0)\n\n4. 此时可以在群晖docker容器中看到正在运行的emby容器，将容器关闭并进行以下配置\n+ 添加卷\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-6.jpg)\n+ 修改`UID`和`GID`\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-7.jpg)\n5. 应用并开启emby容器，在浏览器中输入IP+8096就可以进入emby了\n\n\n怎么使用emby就交给大家去探索了！\n\n#### 参考博客：\n1. [打造低功耗家庭影音NAS：i3-8100更换 华擎J5005ITX 群晖下Jellyfin硬解！](https://post.smzdm.com/p/akmgnkdk/)\n2. [docker 网络-host](https://www.jianshu.com/p/1dd65ab5b997)\n\n\n\n\n\n\n\n\n","source":"_posts/Share/install_Emby_in_docker.md","raw":"---\ntitle: 群晖docker安装Emby并开启硬件解码\ndate: 2020-05-06 22:00:00\nimg: https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg\nsummary: 群晖docker安装Emby并开启硬件解码\ncategories: 分享\ntags:\n  - 群晖\n---\n\n最近在群晖中安装了Emby，使用体验很不错，现在将自己的安装过程分享出来\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg)\n目前群晖中安装emby主要有两种方式，一是通过在套件中心中添加源来安装，二是通过docker来安装。我选择的是通过docker进行安装，虽然过程稍微有些复杂，但是备份迁移都要比群晖套件有优势。\n硬件解码可以让显卡接过视频解码转码的重任，为CPU分担压力，不过有部分机器不支持硬件解码，群晖支持硬件解码的必要条件是：\n+ 群晖系统为DS 918+\n+ CPU支持硬件解码\n\n通过ssh连接到群晖，输入`ls /dev/dri`，如果和下图一样，那么恭喜你，你可以开启硬件解码\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-2.jpg)\n\n需要说明的是，emby开启硬件加速功能是需要会员的，当然也有免费的替代品——Jellyfin，Jellyfin是emby的一个分支，拥有emby的大部分功能，大家可以自行选择。\n\n### 在docker中安装emby\n#### 下载emby镜像\n在docker注册表中搜索emby，选择`emby/embyserver`下载\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-3.jpg)\n\n#### 启动硬件加速\n1. 下载完映像之后，不要直接启动，开启群晖的SSH，打开控制面板，在终端机开启\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-4.jpg)\n\n2. 通过ssh工具登录到群晖，输入`sudo -i`切换到`root`账户，会要求输入密码\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-5.jpg)\n3. 输入以下代码启动emby容器\n```bash\ndocker run \\\n    --name=emby \\ # 容器名称\n    --device=/dev/dri:/dev/dri \\ #开启硬件解码\n    --net host \\ # 配置网络\n    emby/embyserver # 要运行的映像名称\n```\n这里通过`--net host`是该容器使用`docker host`网络，即与docker主机网络相同。目的是解决emby无法刮削元数据的问题，因为emby使用`theMovieDb`进行刮削，详情可见[解决tinyMediaManager无法刮削的问题](https://www.jianshu.com/p/5ca8f1c04926)。这样只要在修改群晖`hosts`文件，便可以解决emby无法刮削的问题。不过建议直接使用tMM进行刮削，tMM也可以通过docker安装了——[群晖Docker安装tinyMediaManager并解决无法刮削的问题](https://www.jianshu.com/p/1f09ad93a9f0)\n\n4. 此时可以在群晖docker容器中看到正在运行的emby容器，将容器关闭并进行以下配置\n+ 添加卷\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-6.jpg)\n+ 修改`UID`和`GID`\n![](https://gitee.com/wenguang0816/blogPic/raw/master/20200506-7.jpg)\n5. 应用并开启emby容器，在浏览器中输入IP+8096就可以进入emby了\n\n\n怎么使用emby就交给大家去探索了！\n\n#### 参考博客：\n1. [打造低功耗家庭影音NAS：i3-8100更换 华擎J5005ITX 群晖下Jellyfin硬解！](https://post.smzdm.com/p/akmgnkdk/)\n2. [docker 网络-host](https://www.jianshu.com/p/1dd65ab5b997)\n\n\n\n\n\n\n\n\n","slug":"Share/install_Emby_in_docker","published":1,"updated":"2020-05-13T14:39:48.533Z","_id":"cka5g3yg700a1metfztr4kvd5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在群晖中安装了Emby，使用体验很不错，现在将自己的安装过程分享出来<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg\" alt><br>目前群晖中安装emby主要有两种方式，一是通过在套件中心中添加源来安装，二是通过docker来安装。我选择的是通过docker进行安装，虽然过程稍微有些复杂，但是备份迁移都要比群晖套件有优势。<br>硬件解码可以让显卡接过视频解码转码的重任，为CPU分担压力，不过有部分机器不支持硬件解码，群晖支持硬件解码的必要条件是：</p>\n<ul>\n<li>群晖系统为DS 918+</li>\n<li>CPU支持硬件解码</li>\n</ul>\n<p>通过ssh连接到群晖，输入<code>ls /dev/dri</code>，如果和下图一样，那么恭喜你，你可以开启硬件解码<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-2.jpg\" alt></p>\n<p>需要说明的是，emby开启硬件加速功能是需要会员的，当然也有免费的替代品——Jellyfin，Jellyfin是emby的一个分支，拥有emby的大部分功能，大家可以自行选择。</p>\n<h3 id=\"在docker中安装emby\"><a href=\"#在docker中安装emby\" class=\"headerlink\" title=\"在docker中安装emby\"></a>在docker中安装emby</h3><h4 id=\"下载emby镜像\"><a href=\"#下载emby镜像\" class=\"headerlink\" title=\"下载emby镜像\"></a>下载emby镜像</h4><p>在docker注册表中搜索emby，选择<code>emby/embyserver</code>下载<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-3.jpg\" alt></p>\n<h4 id=\"启动硬件加速\"><a href=\"#启动硬件加速\" class=\"headerlink\" title=\"启动硬件加速\"></a>启动硬件加速</h4><ol>\n<li><p>下载完映像之后，不要直接启动，开启群晖的SSH，打开控制面板，在终端机开启<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-4.jpg\" alt></p>\n</li>\n<li><p>通过ssh工具登录到群晖，输入<code>sudo -i</code>切换到<code>root</code>账户，会要求输入密码<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-5.jpg\" alt></p>\n</li>\n<li><p>输入以下代码启动emby容器</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">docker run \\\n --name<span class=\"token operator\">=</span>emby \\ <span class=\"token comment\" spellcheck=\"true\"># 容器名称</span>\n --device<span class=\"token operator\">=</span>/dev/dri:/dev/dri \\ <span class=\"token comment\" spellcheck=\"true\">#开启硬件解码</span>\n --net host \\ <span class=\"token comment\" spellcheck=\"true\"># 配置网络</span>\n emby/embyserver <span class=\"token comment\" spellcheck=\"true\"># 要运行的映像名称</span></code></pre>\n<p>这里通过<code>--net host</code>是该容器使用<code>docker host</code>网络，即与docker主机网络相同。目的是解决emby无法刮削元数据的问题，因为emby使用<code>theMovieDb</code>进行刮削，详情可见<a href=\"https://www.jianshu.com/p/5ca8f1c04926\" target=\"_blank\" rel=\"noopener\">解决tinyMediaManager无法刮削的问题</a>。这样只要在修改群晖<code>hosts</code>文件，便可以解决emby无法刮削的问题。不过建议直接使用tMM进行刮削，tMM也可以通过docker安装了——<a href=\"https://www.jianshu.com/p/1f09ad93a9f0\" target=\"_blank\" rel=\"noopener\">群晖Docker安装tinyMediaManager并解决无法刮削的问题</a></p>\n</li>\n<li><p>此时可以在群晖docker容器中看到正在运行的emby容器，将容器关闭并进行以下配置</p>\n</li>\n</ol>\n<ul>\n<li>添加卷<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-6.jpg\" alt></li>\n<li>修改<code>UID</code>和<code>GID</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-7.jpg\" alt></li>\n</ul>\n<ol start=\"5\">\n<li>应用并开启emby容器，在浏览器中输入IP+8096就可以进入emby了</li>\n</ol>\n<p>怎么使用emby就交给大家去探索了！</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><ol>\n<li><a href=\"https://post.smzdm.com/p/akmgnkdk/\" target=\"_blank\" rel=\"noopener\">打造低功耗家庭影音NAS：i3-8100更换 华擎J5005ITX 群晖下Jellyfin硬解！</a></li>\n<li><a href=\"https://www.jianshu.com/p/1dd65ab5b997\" target=\"_blank\" rel=\"noopener\">docker 网络-host</a></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://jiweibo.github.io/assets/img/avater.jpg","name":"WILBER","introduction":"Stay Hungry Stay Foolish","url":"https://jiweibo.github.io","title":"前去学习"},{"avatar":"https://ws4.sinaimg.cn/large/006tKfTcgy1g1o47f720gj30dw0dw3yp.jpg","name":"程序员小吴","introduction":"一起来学算法吧！","url":"http://www.cxyxiaowu.com","title":"前去学习"},{"avatar":"http://zhongdeming.fun/images/avatar.jpeg","name":"DM Zhong","introduction":"Learn & Live","url":"http://zhongdeming.fun","title":"前去学习"}]}},"excerpt":"","more":"<p>最近在群晖中安装了Emby，使用体验很不错，现在将自己的安装过程分享出来<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-1.jpg\" alt><br>目前群晖中安装emby主要有两种方式，一是通过在套件中心中添加源来安装，二是通过docker来安装。我选择的是通过docker进行安装，虽然过程稍微有些复杂，但是备份迁移都要比群晖套件有优势。<br>硬件解码可以让显卡接过视频解码转码的重任，为CPU分担压力，不过有部分机器不支持硬件解码，群晖支持硬件解码的必要条件是：</p>\n<ul>\n<li>群晖系统为DS 918+</li>\n<li>CPU支持硬件解码</li>\n</ul>\n<p>通过ssh连接到群晖，输入<code>ls /dev/dri</code>，如果和下图一样，那么恭喜你，你可以开启硬件解码<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-2.jpg\" alt></p>\n<p>需要说明的是，emby开启硬件加速功能是需要会员的，当然也有免费的替代品——Jellyfin，Jellyfin是emby的一个分支，拥有emby的大部分功能，大家可以自行选择。</p>\n<h3 id=\"在docker中安装emby\"><a href=\"#在docker中安装emby\" class=\"headerlink\" title=\"在docker中安装emby\"></a>在docker中安装emby</h3><h4 id=\"下载emby镜像\"><a href=\"#下载emby镜像\" class=\"headerlink\" title=\"下载emby镜像\"></a>下载emby镜像</h4><p>在docker注册表中搜索emby，选择<code>emby/embyserver</code>下载<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-3.jpg\" alt></p>\n<h4 id=\"启动硬件加速\"><a href=\"#启动硬件加速\" class=\"headerlink\" title=\"启动硬件加速\"></a>启动硬件加速</h4><ol>\n<li><p>下载完映像之后，不要直接启动，开启群晖的SSH，打开控制面板，在终端机开启<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-4.jpg\" alt></p>\n</li>\n<li><p>通过ssh工具登录到群晖，输入<code>sudo -i</code>切换到<code>root</code>账户，会要求输入密码<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-5.jpg\" alt></p>\n</li>\n<li><p>输入以下代码启动emby容器</p>\n<pre><code class=\"bash\">docker run \\\n --name=emby \\ # 容器名称\n --device=/dev/dri:/dev/dri \\ #开启硬件解码\n --net host \\ # 配置网络\n emby/embyserver # 要运行的映像名称</code></pre>\n<p>这里通过<code>--net host</code>是该容器使用<code>docker host</code>网络，即与docker主机网络相同。目的是解决emby无法刮削元数据的问题，因为emby使用<code>theMovieDb</code>进行刮削，详情可见<a href=\"https://www.jianshu.com/p/5ca8f1c04926\" target=\"_blank\" rel=\"noopener\">解决tinyMediaManager无法刮削的问题</a>。这样只要在修改群晖<code>hosts</code>文件，便可以解决emby无法刮削的问题。不过建议直接使用tMM进行刮削，tMM也可以通过docker安装了——<a href=\"https://www.jianshu.com/p/1f09ad93a9f0\" target=\"_blank\" rel=\"noopener\">群晖Docker安装tinyMediaManager并解决无法刮削的问题</a></p>\n</li>\n<li><p>此时可以在群晖docker容器中看到正在运行的emby容器，将容器关闭并进行以下配置</p>\n</li>\n</ol>\n<ul>\n<li>添加卷<br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-6.jpg\" alt></li>\n<li>修改<code>UID</code>和<code>GID</code><br><img src=\"https://gitee.com/wenguang0816/blogPic/raw/master/20200506-7.jpg\" alt></li>\n</ul>\n<ol start=\"5\">\n<li>应用并开启emby容器，在浏览器中输入IP+8096就可以进入emby了</li>\n</ol>\n<p>怎么使用emby就交给大家去探索了！</p>\n<h4 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h4><ol>\n<li><a href=\"https://post.smzdm.com/p/akmgnkdk/\" target=\"_blank\" rel=\"noopener\">打造低功耗家庭影音NAS：i3-8100更换 华擎J5005ITX 群晖下Jellyfin硬解！</a></li>\n<li><a href=\"https://www.jianshu.com/p/1dd65ab5b997\" target=\"_blank\" rel=\"noopener\">docker 网络-host</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cka5eurgh0009metfhn6rkhiu","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurgs000fmetfbd1mjhvy"},{"post_id":"cka5eurg40004metfs2y3dytf","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurgu000jmetfsmynorqe"},{"post_id":"cka5eurgk000ametfw4lswn24","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurgv000mmetfaifeclnv"},{"post_id":"cka5eurgo000dmetfqemqv8n5","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurgx000rmetf5du9d1bv"},{"post_id":"cka5eurgc0005metfglq39p35","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurgy000tmetfsnuawcc0"},{"post_id":"cka5eurgg0008metfn86jajxi","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurh0000xmetf98cc79o3"},{"post_id":"cka5eurgw000qmetfjddezmw5","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurh20010metfceejw5xc"},{"post_id":"cka5eurgr000emetfbb79e0jm","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurh50014metfd80xdq5h"},{"post_id":"cka5eurgx000smetfnta83ywo","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurh70017metf0zfdhte2"},{"post_id":"cka5eurgz000wmetfauzyh17k","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurh80019metfvgo6z3mk"},{"post_id":"cka5eurgt000imetfwnoqh6kn","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhe001cmetfp6kfu6ya"},{"post_id":"cka5eurh1000zmetfgg0yov1d","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhf001emetfny0mirvs"},{"post_id":"cka5eurh40013metfjnxge9nw","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhh001hmetfhznjs6oi"},{"post_id":"cka5eurgu000lmetfxjdi6fi5","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhj001kmetfq8n54yaw"},{"post_id":"cka5eurh60016metfx4hma3b0","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhl001ometfk2ar4tdk"},{"post_id":"cka5eurh80018metfhid5ja44","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhn001rmetfaplwe8ks"},{"post_id":"cka5eurhc001bmetfi71xbzdl","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurho001umetf95f58s4v"},{"post_id":"cka5eurhe001dmetf1dcy7bn0","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhp001xmetfve15cgq8"},{"post_id":"cka5eurhg001gmetfec9cg3z8","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhq0021metf5ir8gcwn"},{"post_id":"cka5eurhh001jmetfstauvdbg","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhr0024metffh9spvsx"},{"post_id":"cka5eurhk001nmetf8f6309cy","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurht0026metfxcv366c1"},{"post_id":"cka5eurhm001qmetfoo4kb4p2","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhu0029metfyy9v432l"},{"post_id":"cka5eurhn001tmetfpxhkjses","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhv002bmetfy1vwtukj"},{"post_id":"cka5eurhp001wmetfuahu7irh","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhw002emetfphn7ndur"},{"post_id":"cka5eurhq0020metfgb70xyo2","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhx002gmetf2uu7ib26"},{"post_id":"cka5eurhr0023metff8c30cs8","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurhz002jmetf8wigq2yf"},{"post_id":"cka5eurhs0025metfne4a09ck","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri0002mmetfxeem57jx"},{"post_id":"cka5eurhu0028metf2hx66gxn","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri2002qmetfktrncyz6"},{"post_id":"cka5eurhv002ametfkp8yvhwp","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri3002tmetfe6htbg3u"},{"post_id":"cka5eurhw002dmetf05bckupc","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri5002xmetf13nluoup"},{"post_id":"cka5eurhx002fmetf6nkpb4to","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri60030metf6my1qow7"},{"post_id":"cka5eurhy002imetffvyxcofd","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri80034metfedbsslni"},{"post_id":"cka5eurhz002lmetfkcyx2p2s","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euri90037metf5kothnvc"},{"post_id":"cka5euri1002pmetf8czsmwtz","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euria0039metf5w0l7149"},{"post_id":"cka5euri3002smetfgf95lhgv","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurib003dmetfjrup582y"},{"post_id":"cka5euri4002wmetftyq5wy5o","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5euric003fmetfeqshvmq1"},{"post_id":"cka5euri6002zmetf86xlj1a9","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurie003imetf2wu66fev"},{"post_id":"cka5euri70033metf6uiic3of","category_id":"cka5eurgv000nmetfemew0c4l","_id":"cka5eurif003lmetfc0ome3u5"},{"post_id":"cka5euri80036metf85rrf5r4","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurih003ometfcmkc0rvs"},{"post_id":"cka5euri90038metfhbsq0dw1","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5euril003qmetf949d6ylk"},{"post_id":"cka5eurib003cmetfme2wfjzb","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurim003umetff9cawr24"},{"post_id":"cka5euric003emetfuufoh9j4","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurio003xmetff9uh83i8"},{"post_id":"cka5eurid003hmetfmh55og0m","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5euriq0042metfrmr0kndn"},{"post_id":"cka5eurie003kmetfteo6dk0f","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurir0045metfxvrfqlgw"},{"post_id":"cka5eurin003wmetfaf53r9gr","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurit004ametf6m9fgyqu"},{"post_id":"cka5eurig003nmetfdjd8sean","category_id":"cka5euril003smetf7qskoayb","_id":"cka5euriu004cmetfdavreysd"},{"post_id":"cka5eurip0040metfhcuqkngy","category_id":"cka5euril003smetf7qskoayb","_id":"cka5euriw004fmetfnpbc06ro"},{"post_id":"cka5euriq0044metfpasfadq4","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj0004imetf9pf06njf"},{"post_id":"cka5eurii003pmetf0s2vzyn6","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj1004mmetf1iski2i2"},{"post_id":"cka5euris0048metf7of66835","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj5004pmetf9wmyb4bx"},{"post_id":"cka5eurit004bmetfn6kflwv5","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj7004tmetf13fn06g3"},{"post_id":"cka5euril003tmetfoqhgvz85","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj8004wmetflhw19vq6"},{"post_id":"cka5euriu004emetfsh9p6vwk","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurj90050metfn8m9hojc"},{"post_id":"cka5euriz004hmetf6uai83ji","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurja0053metfxfjqzcdv"},{"post_id":"cka5eurj0004lmetfz872kp45","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjb0057metfstqktfh3"},{"post_id":"cka5eurj2004ometfbvpucx3a","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjc005ametf9r2dxg6o"},{"post_id":"cka5eurj6004smetft3g3y3vm","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurje005dmetfcd33rx7s"},{"post_id":"cka5eurj7004vmetftwpe3h8q","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjg005hmetfrntae49v"},{"post_id":"cka5eurj8004zmetfnvq5y7a5","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjh005jmetfmyo57tn3"},{"post_id":"cka5eurj90052metfjtms9tw7","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjj005nmetfenaoeypg"},{"post_id":"cka5eurja0056metfs90dgy51","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjk005qmetf9kp3hq2y"},{"post_id":"cka5eurjb0059metf3spmbex8","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjl005umetfiad56n0t"},{"post_id":"cka5eurjd005cmetf67d19efd","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjm005wmetfjyhgckkl"},{"post_id":"cka5eurjf005gmetf555pp6gw","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjm005zmetfchkh3htd"},{"post_id":"cka5eurjg005imetfii3rbt0r","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjm0060metfzlzu42o3"},{"post_id":"cka5eurji005mmetf4tblqtey","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjn0063metfy0jnzpbo"},{"post_id":"cka5eurjj005pmetf4tar836u","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjn0064metfjowdgwew"},{"post_id":"cka5eurjl005tmetfctk9qg0x","category_id":"cka5euril003smetf7qskoayb","_id":"cka5eurjn0067metf5l2ybkj2"},{"post_id":"cka5eurla009smetfvb9xqpcn","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5eurlc009umetf7z3mxkux"},{"post_id":"cka5f6p1t009wmetf4axlpdb4","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5fbnw1009zmetfqlayg6i6"},{"post_id":"cka5g3yg700a1metfztr4kvd5","category_id":"cka5eurge0006metfy8xdk4dh","_id":"cka5g7fvt00a3metf1yomadc7"}],"PostTag":[{"post_id":"cka5eurg40004metfs2y3dytf","tag_id":"cka5eurgf0007metfyss9avo1","_id":"cka5eurgu000kmetfm1e91f1i"},{"post_id":"cka5eurg40004metfs2y3dytf","tag_id":"cka5eurgl000cmetfurnozsir","_id":"cka5eurgw000ometffayinhni"},{"post_id":"cka5eurgc0005metfglq39p35","tag_id":"cka5eurgt000hmetf6krwr34u","_id":"cka5eurh0000ymetf6ya7bw7f"},{"post_id":"cka5eurgc0005metfglq39p35","tag_id":"cka5eurgw000pmetfmxvv3g0n","_id":"cka5eurh40012metf56ng827b"},{"post_id":"cka5eurgg0008metfn86jajxi","tag_id":"cka5eurgy000vmetfgoknwbhs","_id":"cka5eurhh001imetf2md1lz2o"},{"post_id":"cka5eurgg0008metfn86jajxi","tag_id":"cka5eurh50015metflqu8tyab","_id":"cka5eurhj001lmetfkeygws25"},{"post_id":"cka5eurgg0008metfn86jajxi","tag_id":"cka5eurgt000hmetf6krwr34u","_id":"cka5eurhl001pmetf5iu0hmwn"},{"post_id":"cka5eurgh0009metfhn6rkhiu","tag_id":"cka5eurgf0007metfyss9avo1","_id":"cka5eurho001vmetfe9dn5mi8"},{"post_id":"cka5eurgh0009metfhn6rkhiu","tag_id":"cka5eurhf001fmetfnp4olbvq","_id":"cka5eurhq001ymetfl34pyup3"},{"post_id":"cka5eurgh0009metfhn6rkhiu","tag_id":"cka5eurhj001mmetfyhkl4pp1","_id":"cka5eurhr0022metfoq1gc55n"},{"post_id":"cka5eurgk000ametfw4lswn24","tag_id":"cka5eurgt000hmetf6krwr34u","_id":"cka5eurhz002kmetffpubjg9y"},{"post_id":"cka5eurgk000ametfw4lswn24","tag_id":"cka5eurhq001zmetfc9muftka","_id":"cka5euri0002nmetf4z6nz91k"},{"post_id":"cka5eurgk000ametfw4lswn24","tag_id":"cka5eurht0027metfczc3pti0","_id":"cka5euri2002rmetf5hb5tbf7"},{"post_id":"cka5eurgk000ametfw4lswn24","tag_id":"cka5eurhv002cmetfr5x2mjur","_id":"cka5euri4002umetfbp8kg1pr"},{"post_id":"cka5eurgo000dmetfqemqv8n5","tag_id":"cka5eurgt000hmetf6krwr34u","_id":"cka5euri6002ymetfw0vlr01p"},{"post_id":"cka5eurgo000dmetfqemqv8n5","tag_id":"cka5eurgw000pmetfmxvv3g0n","_id":"cka5euri70031metfc6q0si30"},{"post_id":"cka5eurgr000emetfbb79e0jm","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5euri80035metfgv23czrc"},{"post_id":"cka5eurgt000imetfwnoqh6kn","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5euria003bmetfubvmi5ah"},{"post_id":"cka5eurgu000lmetfxjdi6fi5","tag_id":"cka5euria003ametfoyrfqv1c","_id":"cka5eurie003jmetfgoca97ph"},{"post_id":"cka5eurgw000qmetfjddezmw5","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurim003vmetfzx51du4k"},{"post_id":"cka5eurgw000qmetfjddezmw5","tag_id":"cka5eurig003mmetfe66etoxk","_id":"cka5eurio003ymetfyq3dy0jw"},{"post_id":"cka5euril003tmetfoqhgvz85","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5euriq0043metfsn0yn1pd"},{"post_id":"cka5eurgx000smetfnta83ywo","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurir0046metfid66e13q"},{"post_id":"cka5eurgz000wmetfauzyh17k","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5euriy004gmetf0lal61qt"},{"post_id":"cka5eurgz000wmetfauzyh17k","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurj0004jmetfoagh1csp"},{"post_id":"cka5eurit004bmetfn6kflwv5","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurj2004nmetf4hqpitsp"},{"post_id":"cka5eurit004bmetfn6kflwv5","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurj6004qmetf0peinxy0"},{"post_id":"cka5euriu004emetfsh9p6vwk","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurj7004umetf59ksl7on"},{"post_id":"cka5eurj0004lmetfz872kp45","tag_id":"cka5eurhf001fmetfnp4olbvq","_id":"cka5eurj8004xmetf5o60ywxi"},{"post_id":"cka5eurh1000zmetfgg0yov1d","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurj90051metfbo9qhj82"},{"post_id":"cka5eurh1000zmetfgg0yov1d","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurja0054metfpaxzikgw"},{"post_id":"cka5eurh1000zmetfgg0yov1d","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurjb0058metfovv6oqe8"},{"post_id":"cka5eurh40013metfjnxge9nw","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurjd005bmetfo7q9rf01"},{"post_id":"cka5eurh60016metfx4hma3b0","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjf005fmetfty6mshom"},{"post_id":"cka5eurh80018metfhid5ja44","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurji005lmetfdre15668"},{"post_id":"cka5eurjg005imetfii3rbt0r","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjj005ometf3ran33tb"},{"post_id":"cka5eurji005mmetf4tblqtey","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjk005smetfzufphhdb"},{"post_id":"cka5eurhc001bmetfi71xbzdl","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurjm005vmetfphtqgnwv"},{"post_id":"cka5eurhe001dmetf1dcy7bn0","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjm005ymetf9v3tglwu"},{"post_id":"cka5eurhg001gmetfec9cg3z8","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjn0062metfuas86mpk"},{"post_id":"cka5eurhh001jmetfstauvdbg","tag_id":"cka5euria003ametfoyrfqv1c","_id":"cka5eurjn0066metfsr7rlf6i"},{"post_id":"cka5eurhk001nmetf8f6309cy","tag_id":"cka5euria003ametfoyrfqv1c","_id":"cka5eurjo0069metftoxr53dj"},{"post_id":"cka5eurhm001qmetfoo4kb4p2","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjo006bmetfs20jtefy"},{"post_id":"cka5eurhn001tmetfpxhkjses","tag_id":"cka5euria003ametfoyrfqv1c","_id":"cka5eurjo006dmetf5lasjmwz"},{"post_id":"cka5eurhp001wmetfuahu7irh","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjp006fmetfcckcq1o4"},{"post_id":"cka5eurhq0020metfgb70xyo2","tag_id":"cka5euri70032metf731v5n4i","_id":"cka5eurjr006jmetfyxuv1h5q"},{"post_id":"cka5eurhq0020metfgb70xyo2","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjr006kmetfmefw0h1g"},{"post_id":"cka5eurhq0020metfgb70xyo2","tag_id":"cka5eurjq006hmetfwcmruuaq","_id":"cka5eurjr006mmetf8jp8djrz"},{"post_id":"cka5eurhr0023metff8c30cs8","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurjr006nmetf5pw0vz42"},{"post_id":"cka5eurhs0025metfne4a09ck","tag_id":"cka5eurig003mmetfe66etoxk","_id":"cka5eurjs006pmetfne8tivxs"},{"post_id":"cka5eurhu0028metf2hx66gxn","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjs006rmetfnlnh84ep"},{"post_id":"cka5eurhv002ametfkp8yvhwp","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjt006tmetf3sgjj6w7"},{"post_id":"cka5eurhw002dmetf05bckupc","tag_id":"cka5eurjs006smetfcjvt5t5u","_id":"cka5eurjt006vmetf26blfoo7"},{"post_id":"cka5eurhx002fmetf6nkpb4to","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurju006xmetfcassowoy"},{"post_id":"cka5eurhy002imetffvyxcofd","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjw006zmetfwmopf62t"},{"post_id":"cka5eurhz002lmetfkcyx2p2s","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjw0071metf1titjgwa"},{"post_id":"cka5euri1002pmetf8czsmwtz","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurjx0074metft01i5r4b"},{"post_id":"cka5euri1002pmetf8czsmwtz","tag_id":"cka5eurjw0072metfd05ogonc","_id":"cka5eurjx0075metf1e8eu05u"},{"post_id":"cka5euri3002smetfgf95lhgv","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurjy0077metfis5vlzwd"},{"post_id":"cka5euri4002wmetftyq5wy5o","tag_id":"cka5eurjx0076metfdar0tf9v","_id":"cka5eurjy0079metfola016gk"},{"post_id":"cka5euri6002zmetf86xlj1a9","tag_id":"cka5eurir0047metf8kb2z3gq","_id":"cka5eurjz007bmetf74voy6qr"},{"post_id":"cka5euri70033metf6uiic3of","tag_id":"cka5eurig003mmetfe66etoxk","_id":"cka5eurjz007dmetftjza4rju"},{"post_id":"cka5euri80036metf85rrf5r4","tag_id":"cka5eurjz007cmetfszh3tnwx","_id":"cka5eurjz007gmetfjzbkd7ob"},{"post_id":"cka5euri80036metf85rrf5r4","tag_id":"cka5eurjz007emetfv5uy0wzs","_id":"cka5eurjz007hmetfb4uljytw"},{"post_id":"cka5euri90038metfhbsq0dw1","tag_id":"cka5eurgy000vmetfgoknwbhs","_id":"cka5eurk0007jmetfj14nc6qd"},{"post_id":"cka5euri90038metfhbsq0dw1","tag_id":"cka5eurjz007fmetfcp2zjecx","_id":"cka5eurk0007kmetfl0h6jtwg"},{"post_id":"cka5eurib003cmetfme2wfjzb","tag_id":"cka5eurk0007imetfgj0kl16x","_id":"cka5eurk1007ometf93o6xqyp"},{"post_id":"cka5eurib003cmetfme2wfjzb","tag_id":"cka5eurk0007lmetfb1qwmna9","_id":"cka5eurk1007pmetfwj4clewb"},{"post_id":"cka5eurib003cmetfme2wfjzb","tag_id":"cka5eurk0007mmetfpgkhmv77","_id":"cka5eurk1007rmetfvngfx2yt"},{"post_id":"cka5euric003emetfuufoh9j4","tag_id":"cka5eurk0007nmetfuf9iu8yc","_id":"cka5eurk1007tmetfrshgcsc3"},{"post_id":"cka5euric003emetfuufoh9j4","tag_id":"cka5eurk1007qmetfma2t0c8u","_id":"cka5eurk1007umetfc715qtu0"},{"post_id":"cka5eurid003hmetfmh55og0m","tag_id":"cka5eurgy000vmetfgoknwbhs","_id":"cka5eurk7007ymetfqd637y8o"},{"post_id":"cka5eurid003hmetfmh55og0m","tag_id":"cka5eurk1007smetfya6gc95h","_id":"cka5eurk8007zmetf1lnj10tg"},{"post_id":"cka5eurid003hmetfmh55og0m","tag_id":"cka5eurk1007vmetfslt5odp9","_id":"cka5eurk80081metf5oyk33dc"},{"post_id":"cka5eurid003hmetfmh55og0m","tag_id":"cka5eurk2007wmetfocknz8pt","_id":"cka5eurk80082metfditk61s2"},{"post_id":"cka5eurie003kmetfteo6dk0f","tag_id":"cka5eurjz007cmetfszh3tnwx","_id":"cka5eurk80084metfti48r72q"},{"post_id":"cka5eurig003nmetfdjd8sean","tag_id":"cka5eurk80080metfdj930e9h","_id":"cka5eurk80085metfgqtokz41"},{"post_id":"cka5eurig003nmetfdjd8sean","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurk90087metfrb9kw2cm"},{"post_id":"cka5eurii003pmetf0s2vzyn6","tag_id":"cka5eurhf001fmetfnp4olbvq","_id":"cka5eurka0089metfca1yxaw2"},{"post_id":"cka5eurii003pmetf0s2vzyn6","tag_id":"cka5eurk80083metfvgca1zse","_id":"cka5eurka008ametf6s4os492"},{"post_id":"cka5eurii003pmetf0s2vzyn6","tag_id":"cka5eurk90086metfjionnlj1","_id":"cka5eurka008cmetfatz29dvs"},{"post_id":"cka5eurin003wmetfaf53r9gr","tag_id":"cka5eurk80083metfvgca1zse","_id":"cka5eurkb008emetfrkdyi82n"},{"post_id":"cka5eurin003wmetfaf53r9gr","tag_id":"cka5eurka008bmetfmg3klymn","_id":"cka5eurkb008fmetfjnavnm6s"},{"post_id":"cka5eurip0040metfhcuqkngy","tag_id":"cka5eurka008dmetffnbfzjy5","_id":"cka5eurkb008imetfc52yrdxf"},{"post_id":"cka5eurip0040metfhcuqkngy","tag_id":"cka5eurkb008gmetfsypnqcbp","_id":"cka5eurkb008jmetfvtqs1sge"},{"post_id":"cka5euriq0044metfpasfadq4","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurkc008mmetfmdjkqc1u"},{"post_id":"cka5euriq0044metfpasfadq4","tag_id":"cka5eurka008dmetffnbfzjy5","_id":"cka5eurkc008nmetfauaq3oqv"},{"post_id":"cka5euris0048metf7of66835","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurkd008pmetfs91px45n"},{"post_id":"cka5euriz004hmetf6uai83ji","tag_id":"cka5eurhf001fmetfnp4olbvq","_id":"cka5eurkd008rmetf9uc0u9gj"},{"post_id":"cka5euriz004hmetf6uai83ji","tag_id":"cka5eurkd008ometfzv668mzz","_id":"cka5eurke008smetf1ta87hqc"},{"post_id":"cka5eurj2004ometfbvpucx3a","tag_id":"cka5eurgl000cmetfurnozsir","_id":"cka5eurke008vmetfi3pzs9k2"},{"post_id":"cka5eurj2004ometfbvpucx3a","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurke008wmetf1zjjtglq"},{"post_id":"cka5eurj2004ometfbvpucx3a","tag_id":"cka5eurk80083metfvgca1zse","_id":"cka5eurkf008ymetf6cvmp5am"},{"post_id":"cka5eurj6004smetft3g3y3vm","tag_id":"cka5eurk80080metfdj930e9h","_id":"cka5eurkf008zmetfgqi4co6o"},{"post_id":"cka5eurj6004smetft3g3y3vm","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurkf0091metfizt1o7nq"},{"post_id":"cka5eurj7004vmetftwpe3h8q","tag_id":"cka5eurk80083metfvgca1zse","_id":"cka5eurkf0092metf5old1vrj"},{"post_id":"cka5eurj8004zmetfnvq5y7a5","tag_id":"cka5euri4002vmetfwwqmpz0e","_id":"cka5eurkg0094metfhi8l5lry"},{"post_id":"cka5eurj8004zmetfnvq5y7a5","tag_id":"cka5eurkf0090metfd5pp8tyx","_id":"cka5eurkg0095metf39w1joag"},{"post_id":"cka5eurj90052metfjtms9tw7","tag_id":"cka5eurgl000cmetfurnozsir","_id":"cka5eurkh0098metftgk5xp0d"},{"post_id":"cka5eurj90052metfjtms9tw7","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurkh0099metfnjssd1gt"},{"post_id":"cka5eurj90052metfjtms9tw7","tag_id":"cka5eurk80083metfvgca1zse","_id":"cka5eurki009bmetfnud8osps"},{"post_id":"cka5eurja0056metfs90dgy51","tag_id":"cka5eurja0055metfu5s0at8h","_id":"cka5eurki009cmetf39ixc2pa"},{"post_id":"cka5eurjb0059metf3spmbex8","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurki009emetft68lhjur"},{"post_id":"cka5eurjb0059metf3spmbex8","tag_id":"cka5eurgl000cmetfurnozsir","_id":"cka5eurki009fmetfubvl1wks"},{"post_id":"cka5eurjd005cmetf67d19efd","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurkj009imetfodz9wz3p"},{"post_id":"cka5eurjd005cmetf67d19efd","tag_id":"cka5eurki009gmetft5ij7hin","_id":"cka5eurkj009jmetf69h2wsy3"},{"post_id":"cka5eurjf005gmetf555pp6gw","tag_id":"cka5eurkb008hmetfiqi5ujih","_id":"cka5eurkk009mmetfdlvh30m4"},{"post_id":"cka5eurjf005gmetf555pp6gw","tag_id":"cka5eurkj009kmetfqutka0k9","_id":"cka5eurkk009nmetfusete4iw"},{"post_id":"cka5eurjj005pmetf4tar836u","tag_id":"cka5eurhf001fmetfnp4olbvq","_id":"cka5eurkk009pmetfcc2qdcf7"},{"post_id":"cka5eurjj005pmetf4tar836u","tag_id":"cka5eurkd008ometfzv668mzz","_id":"cka5eurkk009qmetfo57a57hu"},{"post_id":"cka5eurjl005tmetfctk9qg0x","tag_id":"cka5eurkk009ometfzvg43ou5","_id":"cka5eurkk009rmetfrkgtq72t"},{"post_id":"cka5eurla009smetfvb9xqpcn","tag_id":"cka5eurlc009tmetfuk6sck93","_id":"cka5eurlc009vmetftxqcr0ii"},{"post_id":"cka5f6p1t009wmetf4axlpdb4","tag_id":"cka5eurjz007cmetfszh3tnwx","_id":"cka5g15d100a0metfz7it2hek"},{"post_id":"cka5g3yg700a1metfztr4kvd5","tag_id":"cka5eurjz007cmetfszh3tnwx","_id":"cka5g7fvt00a2metf166y6o7i"}],"Tag":[{"name":"数据结构","_id":"cka5eurgf0007metfyss9avo1"},{"name":"二叉树","_id":"cka5eurgl000cmetfurnozsir"},{"name":"macOS","_id":"cka5eurgt000hmetf6krwr34u"},{"name":"终端美化","_id":"cka5eurgw000pmetfmxvv3g0n"},{"name":"git","_id":"cka5eurgy000vmetfgoknwbhs"},{"name":"全局忽略","_id":"cka5eurh50015metflqu8tyab"},{"name":"链表","_id":"cka5eurhf001fmetfnp4olbvq"},{"name":"转载","_id":"cka5eurhj001mmetfyhkl4pp1"},{"name":"Python","_id":"cka5eurhq001zmetfc9muftka"},{"name":"pyenv","_id":"cka5eurht0027metfczc3pti0"},{"name":"virtualenv","_id":"cka5eurhv002cmetfr5x2mjur"},{"name":"数组","_id":"cka5euri4002vmetfwwqmpz0e"},{"name":"位运算","_id":"cka5euri70032metf731v5n4i"},{"name":"数据库","_id":"cka5euria003ametfoyrfqv1c"},{"name":"哈希表","_id":"cka5eurig003mmetfe66etoxk"},{"name":"数学","_id":"cka5eurir0047metf8kb2z3gq"},{"name":"字符串","_id":"cka5eurja0055metfu5s0at8h"},{"name":"回溯算法","_id":"cka5eurjq006hmetfwcmruuaq"},{"name":"二分查找","_id":"cka5eurjs006smetfcjvt5t5u"},{"name":"排序","_id":"cka5eurjw0072metfd05ogonc"},{"name":"贪心算法","_id":"cka5eurjx0076metfdar0tf9v"},{"name":"群晖","_id":"cka5eurjz007cmetfszh3tnwx"},{"name":"Docker","_id":"cka5eurjz007emetfv5uy0wzs"},{"name":"branch & tag","_id":"cka5eurjz007fmetfcp2zjecx"},{"name":"ubuntu","_id":"cka5eurk0007imetfgj0kl16x"},{"name":"命令行","_id":"cka5eurk0007lmetfb1qwmna9"},{"name":"用户名","_id":"cka5eurk0007mmetfpgkhmv77"},{"name":"QT5","_id":"cka5eurk0007nmetfuf9iu8yc"},{"name":"串口通信","_id":"cka5eurk1007qmetfma2t0c8u"},{"name":"华为云","_id":"cka5eurk1007smetfya6gc95h"},{"name":"代码托管","_id":"cka5eurk1007vmetfslt5odp9"},{"name":"团队协作","_id":"cka5eurk2007wmetfocknz8pt"},{"name":"查找","_id":"cka5eurk80080metfdj930e9h"},{"name":"栈","_id":"cka5eurk80083metfvgca1zse"},{"name":"头插法","_id":"cka5eurk90086metfjionnlj1"},{"name":"队列","_id":"cka5eurka008bmetfmg3klymn"},{"name":"循环","_id":"cka5eurka008dmetffnbfzjy5"},{"name":"斐波那契","_id":"cka5eurkb008gmetfsypnqcbp"},{"name":"递归","_id":"cka5eurkb008hmetfiqi5ujih"},{"name":"鲁棒性","_id":"cka5eurkd008ometfzv668mzz"},{"name":"动态规划","_id":"cka5eurkf0090metfd5pp8tyx"},{"name":"逻辑与","_id":"cka5eurki009gmetft5ij7hin"},{"name":"逻辑运算","_id":"cka5eurkj009kmetfqutka0k9"},{"name":"索引","_id":"cka5eurkk009ometfzvg43ou5"},{"name":"Numpy","_id":"cka5eurlc009tmetfuk6sck93"}]}}